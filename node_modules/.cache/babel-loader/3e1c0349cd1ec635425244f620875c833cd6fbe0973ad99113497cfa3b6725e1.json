{"ast":null,"code":"import { CosmosClient } from \"@azure/cosmos\";\nclass CosmosDBService {\n  constructor() {\n    // You should store these in environment variables for security\n    this.endpoint = process.env.REACT_APP_COSMOS_ENDPOINT;\n    this.key = process.env.REACT_APP_COSMOS_KEY;\n    this.databaseId = process.env.REACT_APP_COSMOS_DATABASE_ID || \"azure_learning_games\";\n    this.containerId = process.env.REACT_APP_COSMOS_CONTAINER_ID || \"game_scores\";\n    this.client = new CosmosClient({\n      endpoint: this.endpoint,\n      key: this.key\n    });\n    this.database = this.client.database(this.databaseId);\n    this.container = this.database.container(this.containerId);\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    try {\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        id: `${nickname}_${gameType}_${timestamp}`,\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata\n      };\n      const {\n        resource: createdItem\n      } = await this.container.items.create(scoreData);\n      console.log(`Successfully saved score for ${nickname} in ${gameType}`);\n      return createdItem;\n    } catch (error) {\n      console.error(\"Error saving score to CosmosDB:\", error);\n      throw error;\n    }\n  }\n  async getLeaderboard(gameType, limit = 10) {\n    try {\n      const querySpec = {\n        query: \"SELECT * FROM c WHERE c.gameType = @gameType ORDER BY c.score DESC OFFSET 0 LIMIT @limit\",\n        parameters: [{\n          name: \"@gameType\",\n          value: gameType\n        }, {\n          name: \"@limit\",\n          value: limit\n        }]\n      };\n      const {\n        resources\n      } = await this.container.items.query(querySpec).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error(\"Error retrieving leaderboard from CosmosDB:\", error);\n      throw error;\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosClient","CosmosDBService","constructor","endpoint","process","env","REACT_APP_COSMOS_ENDPOINT","key","REACT_APP_COSMOS_KEY","databaseId","REACT_APP_COSMOS_DATABASE_ID","containerId","REACT_APP_COSMOS_CONTAINER_ID","client","database","container","saveGameScore","nickname","gameType","score","metadata","timestamp","Date","toISOString","scoreData","id","resource","createdItem","items","create","console","log","error","getLeaderboard","limit","querySpec","query","parameters","name","value","resources","fetchAll"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["import { CosmosClient } from \"@azure/cosmos\";\n\nclass CosmosDBService {\n    constructor() {\n        // You should store these in environment variables for security\n        this.endpoint = process.env.REACT_APP_COSMOS_ENDPOINT;\n        this.key = process.env.REACT_APP_COSMOS_KEY;\n        this.databaseId = process.env.REACT_APP_COSMOS_DATABASE_ID || \"azure_learning_games\";\n        this.containerId = process.env.REACT_APP_COSMOS_CONTAINER_ID || \"game_scores\";\n        \n        this.client = new CosmosClient({ endpoint: this.endpoint, key: this.key });\n        this.database = this.client.database(this.databaseId);\n        this.container = this.database.container(this.containerId);\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        try {\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                id: `${nickname}_${gameType}_${timestamp}`,\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata\n            };\n            \n            const { resource: createdItem } = await this.container.items.create(scoreData);\n            console.log(`Successfully saved score for ${nickname} in ${gameType}`);\n            return createdItem;\n        } catch (error) {\n            console.error(\"Error saving score to CosmosDB:\", error);\n            throw error;\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 10) {\n        try {\n            const querySpec = {\n                query: \"SELECT * FROM c WHERE c.gameType = @gameType ORDER BY c.score DESC OFFSET 0 LIMIT @limit\",\n                parameters: [\n                    { name: \"@gameType\", value: gameType },\n                    { name: \"@limit\", value: limit }\n                ]\n            };\n            \n            const { resources } = await this.container.items.query(querySpec).fetchAll();\n            return resources;\n        } catch (error) {\n            console.error(\"Error retrieving leaderboard from CosmosDB:\", error);\n            throw error;\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAE5C,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;IACrD,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB;IAC3C,IAAI,CAACC,UAAU,GAAGL,OAAO,CAACC,GAAG,CAACK,4BAA4B,IAAI,sBAAsB;IACpF,IAAI,CAACC,WAAW,GAAGP,OAAO,CAACC,GAAG,CAACO,6BAA6B,IAAI,aAAa;IAE7E,IAAI,CAACC,MAAM,GAAG,IAAIb,YAAY,CAAC;MAAEG,QAAQ,EAAE,IAAI,CAACA,QAAQ;MAAEI,GAAG,EAAE,IAAI,CAACA;IAAI,CAAC,CAAC;IAC1E,IAAI,CAACO,QAAQ,GAAG,IAAI,CAACD,MAAM,CAACC,QAAQ,CAAC,IAAI,CAACL,UAAU,CAAC;IACrD,IAAI,CAACM,SAAS,GAAG,IAAI,CAACD,QAAQ,CAACC,SAAS,CAAC,IAAI,CAACJ,WAAW,CAAC;EAC9D;EAEA,MAAMK,aAAaA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC1D,IAAI;MACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1C,MAAMC,SAAS,GAAG;QACdC,EAAE,EAAE,GAAGR,QAAQ,IAAIC,QAAQ,IAAIG,SAAS,EAAE;QAC1CJ,QAAQ;QACRC,QAAQ;QACRC,KAAK;QACLE,SAAS;QACT,GAAGD;MACP,CAAC;MAED,MAAM;QAAEM,QAAQ,EAAEC;MAAY,CAAC,GAAG,MAAM,IAAI,CAACZ,SAAS,CAACa,KAAK,CAACC,MAAM,CAACL,SAAS,CAAC;MAC9EM,OAAO,CAACC,GAAG,CAAC,gCAAgCd,QAAQ,OAAOC,QAAQ,EAAE,CAAC;MACtE,OAAOS,WAAW;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMC,cAAcA,CAACf,QAAQ,EAAEgB,KAAK,GAAG,EAAE,EAAE;IACvC,IAAI;MACA,MAAMC,SAAS,GAAG;QACdC,KAAK,EAAE,0FAA0F;QACjGC,UAAU,EAAE,CACR;UAAEC,IAAI,EAAE,WAAW;UAAEC,KAAK,EAAErB;QAAS,CAAC,EACtC;UAAEoB,IAAI,EAAE,QAAQ;UAAEC,KAAK,EAAEL;QAAM,CAAC;MAExC,CAAC;MAED,MAAM;QAAEM;MAAU,CAAC,GAAG,MAAM,IAAI,CAACzB,SAAS,CAACa,KAAK,CAACQ,KAAK,CAACD,SAAS,CAAC,CAACM,QAAQ,CAAC,CAAC;MAC5E,OAAOD,SAAS;IACpB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACf;EACJ;AACJ;AAEA,eAAe,IAAI/B,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}