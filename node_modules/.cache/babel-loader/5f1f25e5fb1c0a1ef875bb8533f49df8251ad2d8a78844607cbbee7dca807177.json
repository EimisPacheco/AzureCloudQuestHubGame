{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { TypeMarker } from \"./enums/TypeMarker\";\nimport { CosmosEncryptedNumberType } from \"./CosmosEncryptedNumber\";\n/**\n * Represents a builder class for building encrypted parameters in parametrized query.\n */\nexport class EncryptionQueryBuilder {\n  constructor(query) {\n    this.query = query;\n    this.parameters = [];\n  }\n  /**\n   * Adds parameter to query\n   */\n  addParameter(name, value, path) {\n    if (value === null) {\n      this.parameters.push({\n        name: name,\n        value: null,\n        path: path\n      });\n      return;\n    }\n    switch (true) {\n      case typeof value === \"boolean\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.Boolean,\n          path\n        });\n        break;\n      case typeof value === \"string\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.String,\n          path\n        });\n        break;\n      case value instanceof Date:\n        {\n          const date = value.toISOString();\n          this.parameters.push({\n            name: name,\n            value: date,\n            type: TypeMarker.String,\n            path: path\n          });\n          break;\n        }\n      case isCosmosEncryptedNumber(value):\n        {\n          const num = value.value;\n          if (value.numberType === CosmosEncryptedNumberType.Integer) {\n            this.parameters.push({\n              name,\n              value: num,\n              type: TypeMarker.Long,\n              path\n            });\n          } else if (value.numberType === CosmosEncryptedNumberType.Float) {\n            this.parameters.push({\n              name,\n              value: num,\n              type: TypeMarker.Double,\n              path\n            });\n          }\n          break;\n        }\n      case Array.isArray(value):\n        this.parameters.push({\n          name,\n          value,\n          path\n        });\n        break;\n      case typeof value === \"object\":\n        this.parameters.push({\n          name,\n          value,\n          path\n        });\n        break;\n      default:\n        throw new Error(`Unsupported parameter type for parameter \"${name}\": ${typeof value}`);\n    }\n  }\n  /** Adds unencrypted parameter to query */\n  addUnencryptedParameter(name, value, path) {\n    this.parameters.push({\n      name: name,\n      value: value,\n      path: path\n    });\n  }\n  /*\n   * @internal\n   */\n  toEncryptionSqlQuerySpec() {\n    return {\n      query: this.query,\n      parameters: this.parameters\n    };\n  }\n}\nfunction isCosmosEncryptedNumber(val) {\n  return val !== null && typeof val === \"object\" && typeof val.value === \"number\" && typeof val.numberType === \"string\" && (val.numberType === CosmosEncryptedNumberType.Integer || val.numberType === CosmosEncryptedNumberType.Float);\n}","map":{"version":3,"names":["TypeMarker","CosmosEncryptedNumberType","EncryptionQueryBuilder","constructor","query","parameters","addParameter","name","value","path","push","type","Boolean","String","Date","date","toISOString","isCosmosEncryptedNumber","num","numberType","Integer","Long","Float","Double","Array","isArray","Error","addUnencryptedParameter","toEncryptionSqlQuerySpec","val"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/EncryptionQueryBuilder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  SqlQuerySpec,\n  SqlParameter,\n  JSONArray,\n  JSONObject,\n  JSONValue,\n} from \"../queryExecutionContext\";\nimport { TypeMarker } from \"./enums/TypeMarker\";\nimport { CosmosEncryptedNumber, CosmosEncryptedNumberType } from \"./CosmosEncryptedNumber\";\n\nexport interface EncryptionSqlParameter extends SqlParameter {\n  type?: TypeMarker;\n  path: string;\n}\n\n/**\n * Represents a builder class for building encrypted parameters in parametrized query.\n */\nexport class EncryptionQueryBuilder {\n  private query: string;\n  private parameters?: EncryptionSqlParameter[];\n\n  constructor(query: string) {\n    this.query = query;\n    this.parameters = [];\n  }\n  /**\n   * Adds parameter to query\n   */\n  public addParameter(\n    name: string,\n    value: boolean | string | null | JSONArray | JSONObject | Date | CosmosEncryptedNumber,\n    path: string,\n  ): void {\n    if (value === null) {\n      this.parameters.push({ name: name, value: null, path: path });\n      return;\n    }\n    switch (true) {\n      case typeof value === \"boolean\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.Boolean,\n          path,\n        });\n        break;\n      case typeof value === \"string\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.String,\n          path,\n        });\n        break;\n      case value instanceof Date: {\n        const date = value.toISOString();\n        this.parameters.push({\n          name: name,\n          value: date,\n          type: TypeMarker.String,\n          path: path,\n        });\n        break;\n      }\n      case isCosmosEncryptedNumber(value): {\n        const num = value.value;\n        if (value.numberType === CosmosEncryptedNumberType.Integer) {\n          this.parameters.push({\n            name,\n            value: num,\n            type: TypeMarker.Long,\n            path,\n          });\n        } else if (value.numberType === CosmosEncryptedNumberType.Float) {\n          this.parameters.push({\n            name,\n            value: num,\n            type: TypeMarker.Double,\n            path,\n          });\n        }\n        break;\n      }\n      case Array.isArray(value):\n        this.parameters.push({ name, value, path });\n        break;\n      case typeof value === \"object\":\n        this.parameters.push({ name, value, path });\n        break;\n      default:\n        throw new Error(`Unsupported parameter type for parameter \"${name}\": ${typeof value}`);\n    }\n  }\n\n  /** Adds unencrypted parameter to query */\n  public addUnencryptedParameter(name: string, value: JSONValue, path: string): void {\n    this.parameters.push({ name: name, value: value, path: path });\n  }\n\n  /*\n   * @internal\n   */\n  public toEncryptionSqlQuerySpec(): SqlQuerySpec {\n    return {\n      query: this.query,\n      parameters: this.parameters,\n    };\n  }\n}\n\nfunction isCosmosEncryptedNumber(val: any): val is CosmosEncryptedNumber {\n  return (\n    val !== null &&\n    typeof val === \"object\" &&\n    typeof val.value === \"number\" &&\n    typeof val.numberType === \"string\" &&\n    (val.numberType === CosmosEncryptedNumberType.Integer ||\n      val.numberType === CosmosEncryptedNumberType.Float)\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}