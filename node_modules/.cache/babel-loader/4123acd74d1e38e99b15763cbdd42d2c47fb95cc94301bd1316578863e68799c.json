{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\nconst AWSArchitectureGame = () => {\n  _s();\n  var _currentQuestion$opti;\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n  const [score, setScore] = useState(0);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    let retryCount = 0;\n    const maxRetries = 3;\n    while (retryCount < maxRetries) {\n      try {\n        console.log('üöÄ Fetching new architecture...');\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Origin': 'http://localhost:3000'\n          },\n          mode: 'cors',\n          credentials: 'omit',\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (response.status === 503) {\n          retryCount++;\n          console.log(`‚ö†Ô∏è Attempt ${retryCount}/${maxRetries}: Server temporarily unavailable`);\n          if (retryCount === maxRetries) {\n            throw new Error('Server is temporarily unavailable. Please try again later.');\n          }\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          continue;\n        }\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('üì¶ Received data:', data);\n        setArchitectureInfo({\n          name: data.architecture.name,\n          description: data.architecture.description\n        });\n        const transformedServices = data.services.map(serviceName => ({\n          id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n          name: serviceName,\n          icon: getCachedServiceIcon(serviceName)\n        }));\n        setArchitecture({\n          services: transformedServices,\n          connections: data.connections\n        });\n        if (data.missingServices && data.missingServices.length > 0) {\n          const currentMissingService = data.missingServices[0];\n          console.log('‚ùì Current Question Data:', currentMissingService);\n          setCurrentQuestion({\n            text: currentMissingService.position,\n            optimizationFocus: currentMissingService.optimizationFocus,\n            options: currentMissingService.options.map(opt => {\n              const cleanedName = opt.service.replace(/^(Amazon|AWS)\\s+/, '').replace(/\\s+/g, ' ').trim();\n              console.log(`üîç Processing option: ${cleanedName}`);\n              const iconPath = SERVICE_MAPPINGS[cleanedName];\n              const iconUrl = iconPath ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}` : '/aws-icons/default.svg';\n              console.log(`üéØ Icon URL for ${cleanedName}:`, iconUrl);\n              return {\n                id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n                name: opt.service,\n                isCorrect: opt.isCorrect,\n                isOptimal: opt.isOptimal,\n                explanation: opt.explanation,\n                rating: opt.rating,\n                icon: iconUrl\n              };\n            })\n          });\n          setServiceOptions(currentMissingService.options);\n        }\n\n        // Success - break the retry loop\n        break;\n      } catch (error) {\n        console.error('‚ùå Failed to load architecture:', error);\n        if (retryCount === maxRetries - 1) {\n          setError(error.message);\n        }\n        retryCount++;\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n    }\n    setIsLoading(false);\n  }, [API_URL, difficulty, isLoading]);\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-architecture-button\",\n          onClick: loadNextArchitecture,\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'New Architecture'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"architecture-description\",\n        children: architectureInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 32\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          currentQuestion: currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Question: \", currentQuestion.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Optimization Focus: \", currentQuestion.optimizationFocus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"service-options\",\n            children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map((option, index) => /*#__PURE__*/_jsxDEV(DraggableService, {\n              service: option,\n              onClick: () => handleServiceSelection(option.id)\n            }, `${option.id}-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 7\n  }, this);\n};\n_s(AWSArchitectureGame, \"bSQea3j8JJ0kyR2XgeOxzOSfgLk=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","AWSArchitectureDisplay","DraggableService","DndProvider","HTML5Backend","getCachedServiceIcon","SERVICE_MAPPINGS","jsxDEV","_jsxDEV","Fragment","_Fragment","S3_BUCKET_URL","ICONS_BASE_PATH","AWSArchitectureGame","_s","_currentQuestion$opti","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","difficulty","score","setScore","API_URL","sensors","activationConstraint","distance","loadNextArchitecture","retryCount","maxRetries","console","log","response","fetch","method","headers","mode","credentials","body","JSON","stringify","status","Error","Promise","resolve","setTimeout","ok","data","json","name","description","transformedServices","services","map","serviceName","id","toLowerCase","replace","icon","connections","missingServices","length","currentMissingService","text","position","optimizationFocus","options","opt","cleanedName","service","trim","iconPath","iconUrl","isCorrect","isOptimal","explanation","rating","message","handleServiceSelection","selectedServiceId","selectedOption","find","points","prev","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","option","index","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\nconst AWSArchitectureGame = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [architecture, setArchitecture] = useState(null);\n    const [architectureInfo, setArchitectureInfo] = useState(null);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [serviceOptions, setServiceOptions] = useState([]);\n    const [difficulty] = useState('BEGINNER');\n    const [score, setScore] = useState(0); \n  \n    const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n    const sensors = useSensors(\n      useSensor(PointerSensor, {\n        activationConstraint: {\n          distance: 8,\n        },\n      }),\n      useSensor(TouchSensor)\n    );\n\n    const loadNextArchitecture = useCallback(async () => {\n      if (isLoading) return;\n      setIsLoading(true);\n      setError(null);\n      \n      let retryCount = 0;\n      const maxRetries = 3;\n\n      while (retryCount < maxRetries) {\n        try {\n          console.log('üöÄ Fetching new architecture...');\n          const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Origin': 'http://localhost:3000'\n            },\n            mode: 'cors',\n            credentials: 'omit',\n            body: JSON.stringify({ difficulty })\n          });\n\n          if (response.status === 503) {\n            retryCount++;\n            console.log(`‚ö†Ô∏è Attempt ${retryCount}/${maxRetries}: Server temporarily unavailable`);\n            if (retryCount === maxRetries) {\n              throw new Error('Server is temporarily unavailable. Please try again later.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            continue;\n          }\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const data = await response.json();\n          console.log('üì¶ Received data:', data);\n\n          setArchitectureInfo({\n            name: data.architecture.name,\n            description: data.architecture.description\n          });\n          \n          const transformedServices = data.services.map(serviceName => ({\n            id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n            name: serviceName,\n            icon: getCachedServiceIcon(serviceName)\n          }));\n\n          setArchitecture({\n            services: transformedServices,\n            connections: data.connections\n          });\n\n          if (data.missingServices && data.missingServices.length > 0) {\n            const currentMissingService = data.missingServices[0];\n            console.log('‚ùì Current Question Data:', currentMissingService);\n            \n            setCurrentQuestion({\n              text: currentMissingService.position,\n              optimizationFocus: currentMissingService.optimizationFocus,\n              options: currentMissingService.options.map(opt => {\n                const cleanedName = opt.service\n                  .replace(/^(Amazon|AWS)\\s+/, '')\n                  .replace(/\\s+/g, ' ')\n                  .trim();\n\n                console.log(`üîç Processing option: ${cleanedName}`);\n                const iconPath = SERVICE_MAPPINGS[cleanedName];\n                const iconUrl = iconPath \n                  ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`\n                  : '/aws-icons/default.svg';\n\n                console.log(`üéØ Icon URL for ${cleanedName}:`, iconUrl);\n\n                return {\n                  id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n                  name: opt.service,\n                  isCorrect: opt.isCorrect,\n                  isOptimal: opt.isOptimal,\n                  explanation: opt.explanation,\n                  rating: opt.rating,\n                  icon: iconUrl\n                };\n              })\n            });\n            \n            setServiceOptions(currentMissingService.options);\n          }\n          \n          // Success - break the retry loop\n          break;\n\n        } catch (error) {\n          console.error('‚ùå Failed to load architecture:', error);\n          if (retryCount === maxRetries - 1) {\n            setError(error.message);\n          }\n          retryCount++;\n          if (retryCount < maxRetries) {\n            await new Promise(resolve => setTimeout(resolve, 2000));\n          }\n        }\n      }\n      \n      setIsLoading(false);\n    }, [API_URL, difficulty, isLoading]);\n\n    const handleServiceSelection = async (selectedServiceId) => {\n      const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n      \n      if (selectedOption?.isCorrect) {\n        const points = selectedOption.isOptimal ? 2 : 1;\n        setScore(prev => prev + points);\n      }\n    };\n\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"game-container\">\n          <div className=\"game-header\">\n            <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n            <div className=\"score\">Score: {score}</div>\n            <button \n              className=\"new-architecture-button\"\n              onClick={loadNextArchitecture}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'New Architecture'}\n            </button>\n          </div>\n          \n          {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n          \n          {error ? (\n            <div className=\"error-message\">{error}</div>\n          ) : (\n            <>\n              <AWSArchitectureDisplay \n                architecture={architecture}\n                currentQuestion={currentQuestion}\n              />\n              \n              {currentQuestion && (\n                <div className=\"question-container\">\n                  <h3>Question: {currentQuestion.text}</h3>\n                  <p>Optimization Focus: {currentQuestion.optimizationFocus}</p>\n                  <div className=\"service-options\">\n                    {currentQuestion.options?.map((option, index) => (\n                      <DraggableService\n                        key={`${option.id}-${index}`}\n                        service={option}\n                        onClick={() => handleServiceSelection(option.id)}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </DndProvider>\n    );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}