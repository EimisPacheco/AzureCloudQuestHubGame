{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  constructor() {\n    this.failedAttempts = [];\n    this.metadataLookups = [];\n    this.gaterwayStatistics = [];\n    this.locationEndpointsContacted = new Set();\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n  recordFailedAttempt(gaterwayStatistics, retryAttemptNumber) {\n    const attempt = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gaterwayStatistics.startTimeUTCInMs,\n      durationInMs: gaterwayStatistics.durationInMs,\n      statusCode: gaterwayStatistics.statusCode,\n      substatusCode: gaterwayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gaterwayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gaterwayStatistics.responsePayloadLengthInBytes,\n      activityId: gaterwayStatistics.activityId,\n      operationType: gaterwayStatistics.operationType,\n      resourceType: gaterwayStatistics.resourceType\n    };\n    this.failedAttempts.push(attempt);\n  }\n  recordNetworkCall(gaterwayStatistics) {\n    this.gaterwayStatistics.push(gaterwayStatistics);\n  }\n  recordEncryptionDiagnostics(encryptionDiagnostics) {\n    var _a, _b;\n    const {\n      encryptContent,\n      decryptContent\n    } = encryptionDiagnostics;\n    const encryptionDuration = (_a = encryptContent[Constants.Encryption.DiagnosticsDuration]) !== null && _a !== void 0 ? _a : 0;\n    const decryptionDuration = (_b = decryptContent[Constants.Encryption.DiagnosticsDuration]) !== null && _b !== void 0 ? _b : 0;\n    encryptionDiagnostics.processingDurationInMs = encryptionDuration + decryptionDuration;\n    this.encryptionDiagnostics = encryptionDiagnostics;\n  }\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  mergeDiagnostics(childDiagnostics, metadataType) {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach(endpoint => this.locationEndpointsContacted.add(endpoint));\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gaterwayStatistics.forEach(gateway => this.metadataLookups.push({\n      activityId: gateway.activityId,\n      requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n      startTimeUTCInMs: gateway.startTimeUTCInMs,\n      operationType: gateway.operationType,\n      resourceType: gateway.resourceType,\n      durationInMs: gateway.durationInMs,\n      metaDataType: metadataType\n    }));\n    // Copy child nodes's metadata lookups to parent's metadata lookups.\n    childDiagnostics.metadataLookups.forEach(lookup => this.metadataLookups.push(lookup));\n    // Copy child nodes's failed attempts to parent's failed attempts.\n    childDiagnostics.failedAttempts.forEach(lookup => this.failedAttempts.push(lookup));\n  }\n  getClientSideStats(endTimeUTCInMs = getCurrentTimestampInMs()) {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups]\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts]\n      },\n      gatewayStatistics: this.gaterwayStatistics,\n      encryptionDiagnostics: this.encryptionDiagnostics\n    };\n  }\n  getTotalRequestPayloadLength() {\n    let totalRequestPayloadLength = 0;\n    this.gaterwayStatistics.forEach(req => totalRequestPayloadLength += req.requestPayloadLengthInBytes);\n    this.metadataLookups.forEach(req => totalRequestPayloadLength += req.requestPayloadLengthInBytes);\n    this.failedAttempts.forEach(req => totalRequestPayloadLength += req.requestPayloadLengthInBytes);\n    return totalRequestPayloadLength;\n  }\n  getTotalResponsePayloadLength() {\n    let totalResponsePayloadLength = 0;\n    this.gaterwayStatistics.forEach(req => totalResponsePayloadLength += req.responsePayloadLengthInBytes);\n    this.metadataLookups.forEach(req => totalResponsePayloadLength += req.responsePayloadLengthInBytes);\n    this.failedAttempts.forEach(req => totalResponsePayloadLength += req.responsePayloadLengthInBytes);\n    return totalResponsePayloadLength;\n  }\n  recordEndpointResolution(location) {\n    this.locationEndpointsContacted.add(location);\n  }\n}","map":{"version":3,"names":["Constants","getCurrentTimestampInMs","CosmosDiagnosticContext","constructor","failedAttempts","metadataLookups","gaterwayStatistics","locationEndpointsContacted","Set","requestStartTimeUTCinMs","recordFailedAttempt","retryAttemptNumber","attempt","attemptNumber","startTimeUTCInMs","durationInMs","statusCode","substatusCode","subStatusCode","requestPayloadLengthInBytes","responsePayloadLengthInBytes","activityId","operationType","resourceType","push","recordNetworkCall","recordEncryptionDiagnostics","encryptionDiagnostics","encryptContent","decryptContent","encryptionDuration","_a","Encryption","DiagnosticsDuration","decryptionDuration","_b","processingDurationInMs","mergeDiagnostics","childDiagnostics","metadataType","forEach","endpoint","add","gateway","metaDataType","lookup","getClientSideStats","endTimeUTCInMs","requestStartTimeUTCInMs","requestDurationInMs","totalRequestPayloadLengthInBytes","getTotalRequestPayloadLength","totalResponsePayloadLengthInBytes","getTotalResponsePayloadLength","values","metadataDiagnostics","retryDiagnostics","gatewayStatistics","totalRequestPayloadLength","req","totalResponsePayloadLength","recordEndpointResolution","location"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/diagnostics/CosmosDiagnosticsContext.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common\";\nimport type {\n  ClientSideRequestStatistics,\n  EncryptionDiagnostics,\n  FailedRequestAttemptDiagnostic,\n  GatewayStatistics,\n  MetadataLookUpDiagnostic,\n  MetadataLookUpType,\n} from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  private requestStartTimeUTCinMs: number;\n  private failedAttempts: FailedRequestAttemptDiagnostic[] = [];\n  private metadataLookups: MetadataLookUpDiagnostic[] = [];\n  private gaterwayStatistics: GatewayStatistics[] = [];\n  public locationEndpointsContacted: Set<string> = new Set();\n  encryptionDiagnostics: EncryptionDiagnostics;\n\n  public constructor() {\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n\n  public recordFailedAttempt(\n    gaterwayStatistics: GatewayStatistics,\n    retryAttemptNumber: number,\n  ): void {\n    const attempt: FailedRequestAttemptDiagnostic = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gaterwayStatistics.startTimeUTCInMs,\n      durationInMs: gaterwayStatistics.durationInMs,\n      statusCode: gaterwayStatistics.statusCode,\n      substatusCode: gaterwayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gaterwayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gaterwayStatistics.responsePayloadLengthInBytes,\n      activityId: gaterwayStatistics.activityId,\n      operationType: gaterwayStatistics.operationType,\n      resourceType: gaterwayStatistics.resourceType,\n    };\n    this.failedAttempts.push(attempt);\n  }\n\n  public recordNetworkCall(gaterwayStatistics: GatewayStatistics): void {\n    this.gaterwayStatistics.push(gaterwayStatistics);\n  }\n\n  public recordEncryptionDiagnostics(encryptionDiagnostics: EncryptionDiagnostics): void {\n    const { encryptContent, decryptContent } = encryptionDiagnostics;\n    const encryptionDuration = encryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n    const decryptionDuration = decryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n\n    encryptionDiagnostics.processingDurationInMs = encryptionDuration + decryptionDuration;\n    this.encryptionDiagnostics = encryptionDiagnostics;\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  public mergeDiagnostics(\n    childDiagnostics: CosmosDiagnosticContext,\n    metadataType: MetadataLookUpType,\n  ): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint),\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gaterwayStatistics.forEach((gateway) =>\n      this.metadataLookups.push({\n        activityId: gateway.activityId,\n        requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n        startTimeUTCInMs: gateway.startTimeUTCInMs,\n        operationType: gateway.operationType,\n        resourceType: gateway.resourceType,\n        durationInMs: gateway.durationInMs,\n        metaDataType: metadataType,\n      }),\n    );\n\n    // Copy child nodes's metadata lookups to parent's metadata lookups.\n    childDiagnostics.metadataLookups.forEach((lookup) => this.metadataLookups.push(lookup));\n\n    // Copy child nodes's failed attempts to parent's failed attempts.\n    childDiagnostics.failedAttempts.forEach((lookup) => this.failedAttempts.push(lookup));\n  }\n\n  public getClientSideStats(\n    endTimeUTCInMs: number = getCurrentTimestampInMs(),\n  ): ClientSideRequestStatistics {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups],\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts],\n      },\n      gatewayStatistics: this.gaterwayStatistics,\n      encryptionDiagnostics: this.encryptionDiagnostics,\n    };\n  }\n\n  public getTotalRequestPayloadLength(): number {\n    let totalRequestPayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    return totalRequestPayloadLength;\n  }\n\n  public getTotalResponsePayloadLength(): number {\n    let totalResponsePayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    return totalResponsePayloadLength;\n  }\n\n  public recordEndpointResolution(location: string): void {\n    this.locationEndpointsContacted.add(location);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}