{"ast":null,"code":"// No need to import CosmosClient anymore\nclass CosmosDBService {\n  constructor() {\n    // Define the function URLs\n    this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n    this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n\n    // Debug log the actual URLs\n    console.log('üîç Azure Function URLs:');\n    console.log('Save Score URL:', this.saveScoreUrl);\n    console.log('Leaderboard URL:', this.getLeaderboardUrl);\n\n    // Check if the function URLs are configured\n    const functionsConfigured = Boolean(this.saveScoreUrl) && Boolean(this.getLeaderboardUrl);\n\n    // Set localStorage usage based on configuration\n    this.useLocalStorage = !functionsConfigured;\n    if (this.useLocalStorage) {\n      console.warn(\"‚ö†Ô∏è Using localStorage because one or both function URLs are missing:\");\n      console.warn(\"Save Score URL exists:\", Boolean(this.saveScoreUrl));\n      console.warn(\"Leaderboard URL exists:\", Boolean(this.getLeaderboardUrl));\n    } else {\n      console.log(\"‚úÖ Azure Functions API initialized with URLs:\");\n      console.log(\"Save Score:\", this.saveScoreUrl);\n      console.log(\"Leaderboard:\", this.getLeaderboardUrl);\n    }\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    console.log(`üéÆ SCORE SAVE ATTEMPT - Player: ${nickname}, Game: ${gameType}, Score: ${score}`);\n\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log(`üì¶ [LocalStorage] Saving score: ${nickname}, ${gameType}, ${score}`);\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        id: `${nickname}_${gameType}_${timestamp}`,\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata\n      };\n      const existingScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n      existingScores.push(scoreData);\n      localStorage.setItem('gameScores', JSON.stringify(existingScores));\n      console.log(`‚úÖ [LocalStorage] Score saved successfully!`);\n      return scoreData;\n    }\n\n    // Use function API in production\n    if (!this.saveScoreUrl) {\n      console.log(`‚ö†Ô∏è [Mock API] Would save score: ${nickname}, ${gameType}, ${score}`);\n      return {\n        id: \"mock-id\",\n        success: false,\n        message: \"Function API not configured\"\n      };\n    }\n    try {\n      console.log(`üîÑ Calling Azure Function: ${this.saveScoreUrl.split('?')[0]}`);\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        metadata\n      };\n      const response = await fetch(this.saveScoreUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(scoreData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log(`‚úÖ SCORE SAVED SUCCESSFULLY via Azure Function - ID: ${result.id || 'unknown'}`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå ERROR SAVING SCORE to Azure Function:`, error);\n      return {\n        id: \"error-id\",\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getLeaderboard(gameType, limit = 10) {\n    console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n      const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n      const leaderboard = allScores.filter(score => score.gameType === gameType).sort((a, b) => b.score - a.score).slice(0, limit);\n      console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n      return leaderboard;\n    }\n\n    // Use function API in production\n    if (!this.getLeaderboardUrl) {\n      console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n      return [{\n        nickname: \"Example\",\n        score: 100,\n        timestamp: new Date().toISOString()\n      }];\n    }\n    try {\n      const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n      console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n      return data;\n    } catch (error) {\n      console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n      return [];\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosDBService","constructor","saveScoreUrl","process","env","REACT_APP_FUNCTION_SAVE_SCORE_URL","getLeaderboardUrl","REACT_APP_FUNCTION_LEADERBOARD_URL","console","log","functionsConfigured","Boolean","useLocalStorage","warn","saveGameScore","nickname","gameType","score","metadata","timestamp","Date","toISOString","scoreData","id","existingScores","JSON","parse","localStorage","getItem","push","setItem","stringify","success","message","split","response","fetch","method","headers","body","ok","Error","status","result","json","error","getLeaderboard","limit","allScores","leaderboard","filter","sort","a","b","slice","length","url","encodeURIComponent","data"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["// No need to import CosmosClient anymore\nclass CosmosDBService {\n    constructor() {\n        // Define the function URLs\n        this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n        this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n        \n        // Debug log the actual URLs\n        console.log('üîç Azure Function URLs:');\n        console.log('Save Score URL:', this.saveScoreUrl);\n        console.log('Leaderboard URL:', this.getLeaderboardUrl);\n        \n        // Check if the function URLs are configured\n        const functionsConfigured = Boolean(this.saveScoreUrl) && Boolean(this.getLeaderboardUrl);\n        \n        // Set localStorage usage based on configuration\n        this.useLocalStorage = !functionsConfigured;\n        \n        if (this.useLocalStorage) {\n            console.warn(\"‚ö†Ô∏è Using localStorage because one or both function URLs are missing:\");\n            console.warn(\"Save Score URL exists:\", Boolean(this.saveScoreUrl));\n            console.warn(\"Leaderboard URL exists:\", Boolean(this.getLeaderboardUrl));\n        } else {\n            console.log(\"‚úÖ Azure Functions API initialized with URLs:\");\n            console.log(\"Save Score:\", this.saveScoreUrl);\n            console.log(\"Leaderboard:\", this.getLeaderboardUrl);\n        }\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        console.log(`üéÆ SCORE SAVE ATTEMPT - Player: ${nickname}, Game: ${gameType}, Score: ${score}`);\n        \n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log(`üì¶ [LocalStorage] Saving score: ${nickname}, ${gameType}, ${score}`);\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                id: `${nickname}_${gameType}_${timestamp}`,\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata\n            };\n            \n            const existingScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n            existingScores.push(scoreData);\n            localStorage.setItem('gameScores', JSON.stringify(existingScores));\n            \n            console.log(`‚úÖ [LocalStorage] Score saved successfully!`);\n            return scoreData;\n        }\n        \n        // Use function API in production\n        if (!this.saveScoreUrl) {\n            console.log(`‚ö†Ô∏è [Mock API] Would save score: ${nickname}, ${gameType}, ${score}`);\n            return { id: \"mock-id\", success: false, message: \"Function API not configured\" };\n        }\n        \n        try {\n            console.log(`üîÑ Calling Azure Function: ${this.saveScoreUrl.split('?')[0]}`);\n            \n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                metadata\n            };\n            \n            const response = await fetch(this.saveScoreUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(scoreData)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            console.log(`‚úÖ SCORE SAVED SUCCESSFULLY via Azure Function - ID: ${result.id || 'unknown'}`);\n            return result;\n        } catch (error) {\n            console.error(`‚ùå ERROR SAVING SCORE to Azure Function:`, error);\n            return { id: \"error-id\", success: false, error: error.message };\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 10) {\n        console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n        \n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n            const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n            const leaderboard = allScores\n                .filter(score => score.gameType === gameType)\n                .sort((a, b) => b.score - a.score)\n                .slice(0, limit);\n                \n            console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n            return leaderboard;\n        }\n        \n        // Use function API in production\n        if (!this.getLeaderboardUrl) {\n            console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n            return [{ nickname: \"Example\", score: 100, timestamp: new Date().toISOString() }];\n        }\n        \n        try {\n            const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n            console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n            \n            const response = await fetch(url);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n            return data;\n        } catch (error) {\n            console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n            return [];\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}