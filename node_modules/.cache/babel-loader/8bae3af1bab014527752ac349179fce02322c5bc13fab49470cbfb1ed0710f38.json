{"ast":null,"code":"const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App-Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n  BLOCKCHAIN: 'Arch_Blockchain',\n  BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n  CLOUD_FINANCIAL_MANAGEMENT: 'Arch_Cloud-Financial-Management',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  CUSTOMER_ENABLEMENT: 'Arch_Customer-Enablement',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n  END_USER_COMPUTING: 'Arch_End-User-Computing',\n  FRONT_END_WEB_MOBILE: 'Arch_Front-End-Web-Mobile',\n  GAMES: 'Arch_Games',\n  INTERNET_OF_THINGS: 'Arch_Internet-of-Things',\n  MACHINE_LEARNING: 'Arch_Machine-Learning',\n  MANAGEMENT_GOVERNANCE: 'Arch_Management-Governance',\n  MEDIA_SERVICES: 'Arch_Media-Services',\n  MIGRATION_TRANSFER: 'Arch_Migration-Transfer',\n  NETWORKING_CONTENT_DELIVERY: 'Arch_Networking-Content-Delivery',\n  QUANTUM_TECHNOLOGIES: 'Arch_Quantum-Technologies',\n  ROBOTICS: 'Arch_Robotics',\n  SATELLITE: 'Arch_Satellite',\n  SECURITY_IDENTITY_COMPLIANCE: 'Arch_Security-Identity-Compliance',\n  STORAGE: 'Arch_Storage'\n};\nconst SERVICE_MAPPINGS = {\n  // Existing mappings\n  \"Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n  \"S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n  \"CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n  \"Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n  \"RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n  \"EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n  \"DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n  \"Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n  \"VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n  \"ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n  \"ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n  \"CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n  \"API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n  \"Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\",\n  \"WAF\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-WAF_16.svg\",\n  \"WAF & Shield\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-WAF_16.svg\",\n  // New mappings based on the provided list\n  \"Athena\": \"Arch_Analytics/16/Arch_Amazon-Athena_16.svg\",\n  \"CloudSearch\": \"Arch_Analytics/16/Arch_Amazon-CloudSearch_16.svg\",\n  \"Kinesis\": \"Arch_Analytics/16/Arch_Amazon-Kinesis_16.svg\",\n  \"QuickSight\": \"Arch_Analytics/16/Arch_Amazon-QuickSight_16.svg\",\n  \"Redshift\": \"Arch_Analytics/16/Arch_Amazon-Redshift_16.svg\",\n  \"Glue\": \"Arch_Analytics/16/Arch_AWS-Glue_16.svg\",\n  \"Step Functions\": \"Arch_App-Integration/16/Arch_AWS-Step-Functions_16.svg\",\n  \"AppSync\": \"Arch_App-Integration/16/Arch_AWS-AppSync_16.svg\",\n  \"SQS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Queue-Service_16.svg\",\n  \"SNS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Notification-Service_16.svg\",\n  \"EventBridge\": \"Arch_App-Integration/16/Arch_Amazon-EventBridge_16.svg\",\n  \"Bedrock\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Bedrock_16.svg\",\n  \"CodeGuru\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-CodeGuru_16.svg\",\n  \"Comprehend\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Comprehend_16.svg\",\n  \"Lex\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Lex_16.svg\",\n  \"Polly\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Polly_16.svg\",\n  \"Rekognition\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Rekognition_16.svg\",\n  \"SageMaker\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-SageMaker_16.svg\"\n  // Add more mappings as needed\n};\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Cache for resolved icons\nconst iconCache = new Map();\nconst getServiceIcon = serviceName => {\n  if (!serviceName) {\n    console.error('❌ No service name provided to getServiceIcon');\n    return null;\n  }\n\n  // Remove \"Amazon\" or \"AWS\" prefix if present\n  const cleanedName = serviceName.replace(/^(Amazon|AWS)\\s+/, '').replace(/\\s+/g, ' ').trim();\n  console.log(`🔍 Looking for icon mapping for service: \"${cleanedName}\"`);\n\n  // Find the mapping for this service\n  let iconPath = SERVICE_MAPPINGS[cleanedName];\n\n  // If no exact match, try to find a partial match\n  if (!iconPath) {\n    const partialMatch = Object.keys(SERVICE_MAPPINGS).find(key => cleanedName.toLowerCase().includes(key.toLowerCase()));\n    if (partialMatch) {\n      iconPath = SERVICE_MAPPINGS[partialMatch];\n      console.log(`📎 Found partial match: ${partialMatch}`);\n    }\n  }\n\n  // Always construct and log the full URL attempt, even if mapping not found\n  const attemptedUrl = iconPath ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}` : `${S3_BUCKET_URL}${ICONS_BASE_PATH}/[No mapping found for ${cleanedName}]`;\n  console.log(`🔗 Attempted S3 URL:`, attemptedUrl);\n  if (!iconPath) {\n    console.error(`❌ No icon mapping found for service: ${cleanedName}`);\n    return null;\n  }\n  return attemptedUrl;\n};\nconst getCachedServiceIcon = serviceName => {\n  if (iconCache.has(serviceName)) {\n    console.log(`🎯 Cache hit for ${serviceName}:`, iconCache.get(serviceName));\n    return iconCache.get(serviceName);\n  }\n  const iconUrl = getServiceIcon(serviceName);\n  if (iconUrl) {\n    console.log(`💾 Caching icon URL for ${serviceName}:`, iconUrl);\n    iconCache.set(serviceName, iconUrl);\n  }\n  return iconUrl;\n};\n\n// Single export statement for all needed functions and constants\nexport { getCachedServiceIcon, AWS_ICON_CATEGORIES, SERVICE_MAPPINGS };","map":{"version":3,"names":["AWS_ICON_CATEGORIES","ANALYTICS","APP_INTEGRATION","ARTIFICIAL_INTELLIGENCE","BLOCKCHAIN","BUSINESS_APPLICATIONS","CLOUD_FINANCIAL_MANAGEMENT","COMPUTE","CONTAINERS","CUSTOMER_ENABLEMENT","DATABASE","DEVELOPER_TOOLS","END_USER_COMPUTING","FRONT_END_WEB_MOBILE","GAMES","INTERNET_OF_THINGS","MACHINE_LEARNING","MANAGEMENT_GOVERNANCE","MEDIA_SERVICES","MIGRATION_TRANSFER","NETWORKING_CONTENT_DELIVERY","QUANTUM_TECHNOLOGIES","ROBOTICS","SATELLITE","SECURITY_IDENTITY_COMPLIANCE","STORAGE","SERVICE_MAPPINGS","S3_BUCKET_URL","ICONS_BASE_PATH","iconCache","Map","getServiceIcon","serviceName","console","error","cleanedName","replace","trim","log","iconPath","partialMatch","Object","keys","find","key","toLowerCase","includes","attemptedUrl","getCachedServiceIcon","has","get","iconUrl","set"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/IconResolver.js"],"sourcesContent":["const AWS_ICON_CATEGORIES = {\n    ANALYTICS: 'Arch_Analytics',\n    APP_INTEGRATION: 'Arch_App-Integration',\n    ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n    BLOCKCHAIN: 'Arch_Blockchain',\n    BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n    CLOUD_FINANCIAL_MANAGEMENT: 'Arch_Cloud-Financial-Management',\n    COMPUTE: 'Arch_Compute',\n    CONTAINERS: 'Arch_Containers',\n    CUSTOMER_ENABLEMENT: 'Arch_Customer-Enablement',\n    DATABASE: 'Arch_Database',\n    DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n    END_USER_COMPUTING: 'Arch_End-User-Computing',\n    FRONT_END_WEB_MOBILE: 'Arch_Front-End-Web-Mobile',\n    GAMES: 'Arch_Games',\n    INTERNET_OF_THINGS: 'Arch_Internet-of-Things',\n    MACHINE_LEARNING: 'Arch_Machine-Learning',\n    MANAGEMENT_GOVERNANCE: 'Arch_Management-Governance',\n    MEDIA_SERVICES: 'Arch_Media-Services',\n    MIGRATION_TRANSFER: 'Arch_Migration-Transfer',\n    NETWORKING_CONTENT_DELIVERY: 'Arch_Networking-Content-Delivery',\n    QUANTUM_TECHNOLOGIES: 'Arch_Quantum-Technologies',\n    ROBOTICS: 'Arch_Robotics',\n    SATELLITE: 'Arch_Satellite',\n    SECURITY_IDENTITY_COMPLIANCE: 'Arch_Security-Identity-Compliance',\n    STORAGE: 'Arch_Storage'\n  };\n  \n  const SERVICE_MAPPINGS = {\n    // Existing mappings\n    \"Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n    \"S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n    \"CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n    \"Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n    \"RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n    \"EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n    \"DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n    \"Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n    \"VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n    \"ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n    \"ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n    \"CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n    \"API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n    \"Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\",\n    \"WAF\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-WAF_16.svg\",\n    \"WAF & Shield\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-WAF_16.svg\",\n    \n    // New mappings based on the provided list\n    \"Athena\": \"Arch_Analytics/16/Arch_Amazon-Athena_16.svg\",\n    \"CloudSearch\": \"Arch_Analytics/16/Arch_Amazon-CloudSearch_16.svg\",\n    \"Kinesis\": \"Arch_Analytics/16/Arch_Amazon-Kinesis_16.svg\",\n    \"QuickSight\": \"Arch_Analytics/16/Arch_Amazon-QuickSight_16.svg\",\n    \"Redshift\": \"Arch_Analytics/16/Arch_Amazon-Redshift_16.svg\",\n    \"Glue\": \"Arch_Analytics/16/Arch_AWS-Glue_16.svg\",\n    \"Step Functions\": \"Arch_App-Integration/16/Arch_AWS-Step-Functions_16.svg\",\n    \"AppSync\": \"Arch_App-Integration/16/Arch_AWS-AppSync_16.svg\",\n    \"SQS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Queue-Service_16.svg\",\n    \"SNS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Notification-Service_16.svg\",\n    \"EventBridge\": \"Arch_App-Integration/16/Arch_Amazon-EventBridge_16.svg\",\n    \"Bedrock\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Bedrock_16.svg\",\n    \"CodeGuru\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-CodeGuru_16.svg\",\n    \"Comprehend\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Comprehend_16.svg\",\n    \"Lex\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Lex_16.svg\",\n    \"Polly\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Polly_16.svg\",\n    \"Rekognition\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-Rekognition_16.svg\",\n    \"SageMaker\": \"Arch_Artificial-Intelligence/16/Arch_Amazon-SageMaker_16.svg\",\n    // Add more mappings as needed\n  };\n  \n  const S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\n  const ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n  \n  // Cache for resolved icons\n  const iconCache = new Map();\n  \n  const getServiceIcon = (serviceName) => {\n    if (!serviceName) {\n      console.error('❌ No service name provided to getServiceIcon');\n      return null;\n    }\n  \n    // Remove \"Amazon\" or \"AWS\" prefix if present\n    const cleanedName = serviceName\n      .replace(/^(Amazon|AWS)\\s+/, '')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  \n    console.log(`🔍 Looking for icon mapping for service: \"${cleanedName}\"`);\n  \n    // Find the mapping for this service\n    let iconPath = SERVICE_MAPPINGS[cleanedName];\n    \n    // If no exact match, try to find a partial match\n    if (!iconPath) {\n      const partialMatch = Object.keys(SERVICE_MAPPINGS).find(key => \n        cleanedName.toLowerCase().includes(key.toLowerCase())\n      );\n      if (partialMatch) {\n        iconPath = SERVICE_MAPPINGS[partialMatch];\n        console.log(`📎 Found partial match: ${partialMatch}`);\n      }\n    }\n    \n    // Always construct and log the full URL attempt, even if mapping not found\n    const attemptedUrl = iconPath \n      ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`\n      : `${S3_BUCKET_URL}${ICONS_BASE_PATH}/[No mapping found for ${cleanedName}]`;\n      \n    console.log(`🔗 Attempted S3 URL:`, attemptedUrl);\n  \n    if (!iconPath) {\n      console.error(`❌ No icon mapping found for service: ${cleanedName}`);\n      return null;\n    }\n  \n    return attemptedUrl;\n  };\n  \n  const getCachedServiceIcon = (serviceName) => {\n    if (iconCache.has(serviceName)) {\n      console.log(`🎯 Cache hit for ${serviceName}:`, iconCache.get(serviceName));\n      return iconCache.get(serviceName);\n    }\n  \n    const iconUrl = getServiceIcon(serviceName);\n    if (iconUrl) {\n      console.log(`💾 Caching icon URL for ${serviceName}:`, iconUrl);\n      iconCache.set(serviceName, iconUrl);\n    }\n  \n    return iconUrl;\n  };\n  \n  // Single export statement for all needed functions and constants\n  export {\n    getCachedServiceIcon,\n    AWS_ICON_CATEGORIES,\n    SERVICE_MAPPINGS\n  };"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG;EACxBC,SAAS,EAAE,gBAAgB;EAC3BC,eAAe,EAAE,sBAAsB;EACvCC,uBAAuB,EAAE,8BAA8B;EACvDC,UAAU,EAAE,iBAAiB;EAC7BC,qBAAqB,EAAE,4BAA4B;EACnDC,0BAA0B,EAAE,iCAAiC;EAC7DC,OAAO,EAAE,cAAc;EACvBC,UAAU,EAAE,iBAAiB;EAC7BC,mBAAmB,EAAE,0BAA0B;EAC/CC,QAAQ,EAAE,eAAe;EACzBC,eAAe,EAAE,sBAAsB;EACvCC,kBAAkB,EAAE,yBAAyB;EAC7CC,oBAAoB,EAAE,2BAA2B;EACjDC,KAAK,EAAE,YAAY;EACnBC,kBAAkB,EAAE,yBAAyB;EAC7CC,gBAAgB,EAAE,uBAAuB;EACzCC,qBAAqB,EAAE,4BAA4B;EACnDC,cAAc,EAAE,qBAAqB;EACrCC,kBAAkB,EAAE,yBAAyB;EAC7CC,2BAA2B,EAAE,kCAAkC;EAC/DC,oBAAoB,EAAE,2BAA2B;EACjDC,QAAQ,EAAE,eAAe;EACzBC,SAAS,EAAE,gBAAgB;EAC3BC,4BAA4B,EAAE,mCAAmC;EACjEC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvB;EACA,UAAU,EAAE,iEAAiE;EAC7E,IAAI,EAAE,2DAA2D;EACjE,YAAY,EAAE,mEAAmE;EACjF,qBAAqB,EAAE,0EAA0E;EACjG,KAAK,EAAE,yCAAyC;EAChD,KAAK,EAAE,wCAAwC;EAC/C,UAAU,EAAE,8CAA8C;EAC1D,QAAQ,EAAE,wCAAwC;EAClD,KAAK,EAAE,8EAA8E;EACrF,KAAK,EAAE,iEAAiE;EACxE,aAAa,EAAE,iDAAiD;EAChE,YAAY,EAAE,6DAA6D;EAC3E,aAAa,EAAE,oEAAoE;EACnF,mBAAmB,EAAE,mDAAmD;EACxE,KAAK,EAAE,0DAA0D;EACjE,cAAc,EAAE,0DAA0D;EAE1E;EACA,QAAQ,EAAE,6CAA6C;EACvD,aAAa,EAAE,kDAAkD;EACjE,SAAS,EAAE,8CAA8C;EACzD,YAAY,EAAE,iDAAiD;EAC/D,UAAU,EAAE,+CAA+C;EAC3D,MAAM,EAAE,wCAAwC;EAChD,gBAAgB,EAAE,wDAAwD;EAC1E,SAAS,EAAE,iDAAiD;EAC5D,KAAK,EAAE,iEAAiE;EACxE,KAAK,EAAE,wEAAwE;EAC/E,aAAa,EAAE,wDAAwD;EACvE,SAAS,EAAE,4DAA4D;EACvE,UAAU,EAAE,6DAA6D;EACzE,YAAY,EAAE,+DAA+D;EAC7E,KAAK,EAAE,wDAAwD;EAC/D,OAAO,EAAE,0DAA0D;EACnE,aAAa,EAAE,gEAAgE;EAC/E,WAAW,EAAE;EACb;AACF,CAAC;AAED,MAAMC,aAAa,GAAG,yDAAyD;AAC/E,MAAMC,eAAe,GAAG,uDAAuD;;AAE/E;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE3B,MAAMC,cAAc,GAAIC,WAAW,IAAK;EACtC,IAAI,CAACA,WAAW,EAAE;IAChBC,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;IAC7D,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,WAAW,GAAGH,WAAW,CAC5BI,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAC/BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBC,IAAI,CAAC,CAAC;EAETJ,OAAO,CAACK,GAAG,CAAC,6CAA6CH,WAAW,GAAG,CAAC;;EAExE;EACA,IAAII,QAAQ,GAAGb,gBAAgB,CAACS,WAAW,CAAC;;EAE5C;EACA,IAAI,CAACI,QAAQ,EAAE;IACb,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAAChB,gBAAgB,CAAC,CAACiB,IAAI,CAACC,GAAG,IACzDT,WAAW,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,GAAG,CAACC,WAAW,CAAC,CAAC,CACtD,CAAC;IACD,IAAIL,YAAY,EAAE;MAChBD,QAAQ,GAAGb,gBAAgB,CAACc,YAAY,CAAC;MACzCP,OAAO,CAACK,GAAG,CAAC,2BAA2BE,YAAY,EAAE,CAAC;IACxD;EACF;;EAEA;EACA,MAAMO,YAAY,GAAGR,QAAQ,GACzB,GAAGZ,aAAa,GAAGC,eAAe,IAAIW,QAAQ,EAAE,GAChD,GAAGZ,aAAa,GAAGC,eAAe,0BAA0BO,WAAW,GAAG;EAE9EF,OAAO,CAACK,GAAG,CAAC,sBAAsB,EAAES,YAAY,CAAC;EAEjD,IAAI,CAACR,QAAQ,EAAE;IACbN,OAAO,CAACC,KAAK,CAAC,wCAAwCC,WAAW,EAAE,CAAC;IACpE,OAAO,IAAI;EACb;EAEA,OAAOY,YAAY;AACrB,CAAC;AAED,MAAMC,oBAAoB,GAAIhB,WAAW,IAAK;EAC5C,IAAIH,SAAS,CAACoB,GAAG,CAACjB,WAAW,CAAC,EAAE;IAC9BC,OAAO,CAACK,GAAG,CAAC,oBAAoBN,WAAW,GAAG,EAAEH,SAAS,CAACqB,GAAG,CAAClB,WAAW,CAAC,CAAC;IAC3E,OAAOH,SAAS,CAACqB,GAAG,CAAClB,WAAW,CAAC;EACnC;EAEA,MAAMmB,OAAO,GAAGpB,cAAc,CAACC,WAAW,CAAC;EAC3C,IAAImB,OAAO,EAAE;IACXlB,OAAO,CAACK,GAAG,CAAC,2BAA2BN,WAAW,GAAG,EAAEmB,OAAO,CAAC;IAC/DtB,SAAS,CAACuB,GAAG,CAACpB,WAAW,EAAEmB,OAAO,CAAC;EACrC;EAEA,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA,SACEH,oBAAoB,EACpBhD,mBAAmB,EACnB0B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}