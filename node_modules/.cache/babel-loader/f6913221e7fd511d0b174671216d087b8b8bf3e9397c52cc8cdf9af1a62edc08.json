{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  const complexityByDifficulty = {\n    'BEGINNER': {\n      minServices: 3,\n      maxServices: 4\n    },\n    'INTERMEDIATE': {\n      minServices: 4,\n      maxServices: 6\n    },\n    'ADVANCED': {\n      minServices: 6,\n      maxServices: 8\n    }\n  };\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: `You are an AWS architecture expert. Generate complex, realistic architectures using these services: ${AVAILABLE_SERVICES.map(s => s.name).join(', ')}.\n          For BEGINNER: Focus on basic patterns like web hosting or data processing.\n          For INTERMEDIATE: Include patterns like microservices and event-driven architectures.\n          For ADVANCED: Create complex patterns with multiple data stores and processing layers.\n          Return JSON with services array and connections array showing realistic service interactions.`\n      }, {\n        role: \"user\",\n        content: `Generate a ${difficulty} level AWS architecture with ${complexityByDifficulty[difficulty].minServices}-${complexityByDifficulty[difficulty].maxServices} services.`\n      }],\n      temperature: 0.7,\n      response_format: {\n        type: \"json_object\"\n      }\n    });\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('Raw AI Response:', aiSuggestion);\n\n    // Validate the AI response structure\n    if (!aiSuggestion || !aiSuggestion.services || !aiSuggestion.options) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    // Map service IDs to full service objects\n    const getServiceById = id => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{\n          from: randomServices[0].id,\n          to: randomServices[1].id\n        }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","complexityByDifficulty","minServices","maxServices","completion","chat","completions","create","model","messages","role","content","map","s","join","temperature","response_format","type","aiSuggestion","JSON","parse","choices","message","console","log","services","options","Error","getServiceById","find","architecture","connections","question","text","missingServices","missingService","error","randomServices","sort","Math","random","slice","from","to"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  const complexityByDifficulty = {\n    'BEGINNER': { minServices: 3, maxServices: 4 },\n    'INTERMEDIATE': { minServices: 4, maxServices: 6 },\n    'ADVANCED': { minServices: 6, maxServices: 8 }\n  };\n\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        { \n          role: \"system\", \n          content: `You are an AWS architecture expert. Generate complex, realistic architectures using these services: ${AVAILABLE_SERVICES.map(s => s.name).join(', ')}.\n          For BEGINNER: Focus on basic patterns like web hosting or data processing.\n          For INTERMEDIATE: Include patterns like microservices and event-driven architectures.\n          For ADVANCED: Create complex patterns with multiple data stores and processing layers.\n          Return JSON with services array and connections array showing realistic service interactions.`\n        },\n        {\n          role: \"user\",\n          content: `Generate a ${difficulty} level AWS architecture with ${complexityByDifficulty[difficulty].minServices}-${complexityByDifficulty[difficulty].maxServices} services.`\n        }\n      ],\n      temperature: 0.7,\n      response_format: { type: \"json_object\" }\n    });\n\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('Raw AI Response:', aiSuggestion);\n\n    // Validate the AI response structure\n    if (!aiSuggestion || !aiSuggestion.services || !aiSuggestion.options) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    // Map service IDs to full service objects\n    const getServiceById = (id) => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    \n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{ from: randomServices[0].id, to: randomServices[1].id }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}