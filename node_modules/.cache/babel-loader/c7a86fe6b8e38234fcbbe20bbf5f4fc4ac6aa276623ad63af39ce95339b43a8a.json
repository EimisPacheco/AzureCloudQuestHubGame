{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AeadAes256CbcHmacSha256Algorithm } from \"./AeadAes256CbcHmacSha256Algorithm\";\n/**\n * Represents the encryption setting for a specific property in an item.\n * @hidden\n */\nexport class EncryptionSettingForProperty {\n  constructor(clientEncryptionIncludedPath) {\n    this.encryptionKeyId = clientEncryptionIncludedPath.clientEncryptionKeyId;\n    this.encryptionType = clientEncryptionIncludedPath.encryptionType;\n    this.encryptionAlgorithm = clientEncryptionIncludedPath.encryptionAlgorithm;\n  }\n  async buildEncryptionAlgorithm(clientEncryptionKeyProperties, encryptionManager, forceRefresh) {\n    const protectedDataEncryptionKey = await this.buildProtectedDataEncryptionKey(clientEncryptionKeyProperties, encryptionManager, forceRefresh);\n    const encryptionAlgorithm = new AeadAes256CbcHmacSha256Algorithm(protectedDataEncryptionKey, this.encryptionType);\n    return encryptionAlgorithm;\n  }\n  async buildProtectedDataEncryptionKey(clientEncryptionKeyProperties, encryptionManager, forceRefresh) {\n    const keyEncryptionKey = encryptionManager.keyEncryptionKeyCache.getOrCreate(clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name, clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value, encryptionManager.encryptionKeyStoreProvider);\n    const protectedDataEncryptionKey = await encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(this.encryptionKeyId, keyEncryptionKey, clientEncryptionKeyProperties.wrappedDataEncryptionKey, forceRefresh);\n    return protectedDataEncryptionKey;\n  }\n}","map":{"version":3,"names":["AeadAes256CbcHmacSha256Algorithm","EncryptionSettingForProperty","constructor","clientEncryptionIncludedPath","encryptionKeyId","clientEncryptionKeyId","encryptionType","encryptionAlgorithm","buildEncryptionAlgorithm","clientEncryptionKeyProperties","encryptionManager","forceRefresh","protectedDataEncryptionKey","buildProtectedDataEncryptionKey","keyEncryptionKey","keyEncryptionKeyCache","getOrCreate","encryptionKeyWrapMetadata","name","value","encryptionKeyStoreProvider","protectedDataEncryptionKeyCache","wrappedDataEncryptionKey"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/EncryptionSettingForProperty.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionIncludedPath } from \"./ClientEncryptionIncludedPath\";\nimport type { ClientEncryptionKeyProperties } from \"./ClientEncryptionKey\";\nimport type { EncryptionAlgorithm, EncryptionType } from \"./enums\";\nimport { AeadAes256CbcHmacSha256Algorithm } from \"./AeadAes256CbcHmacSha256Algorithm\";\nimport type { ProtectedDataEncryptionKey } from \"./EncryptionKey\";\nimport type { EncryptionManager } from \"./EncryptionManager\";\n\n/**\n * Represents the encryption setting for a specific property in an item.\n * @hidden\n */\nexport class EncryptionSettingForProperty {\n  // client encryption key id.\n  encryptionKeyId: string;\n  // encryption type - Deterministic/Randomized.\n  encryptionType: EncryptionType;\n  // encryption algorithm - AEAD_AES_256_CBC_HMAC_SHA256\n  encryptionAlgorithm: EncryptionAlgorithm;\n\n  constructor(clientEncryptionIncludedPath: ClientEncryptionIncludedPath) {\n    this.encryptionKeyId = clientEncryptionIncludedPath.clientEncryptionKeyId;\n    this.encryptionType = clientEncryptionIncludedPath.encryptionType;\n    this.encryptionAlgorithm = clientEncryptionIncludedPath.encryptionAlgorithm;\n  }\n\n  public async buildEncryptionAlgorithm(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<AeadAes256CbcHmacSha256Algorithm> {\n    const protectedDataEncryptionKey = await this.buildProtectedDataEncryptionKey(\n      clientEncryptionKeyProperties,\n      encryptionManager,\n      forceRefresh,\n    );\n    const encryptionAlgorithm = new AeadAes256CbcHmacSha256Algorithm(\n      protectedDataEncryptionKey,\n      this.encryptionType,\n    );\n\n    return encryptionAlgorithm;\n  }\n\n  private async buildProtectedDataEncryptionKey(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<ProtectedDataEncryptionKey> {\n    const keyEncryptionKey = encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name,\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value,\n      encryptionManager.encryptionKeyStoreProvider,\n    );\n    const protectedDataEncryptionKey =\n      await encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(\n        this.encryptionKeyId,\n        keyEncryptionKey,\n        clientEncryptionKeyProperties.wrappedDataEncryptionKey,\n        forceRefresh,\n      );\n\n    return protectedDataEncryptionKey;\n  }\n}\n"],"mappings":"AAAA;AACA;AAKA,SAASA,gCAAgC,QAAQ,oCAAoC;AAIrF;;;;AAIA,OAAM,MAAOC,4BAA4B;EAQvCC,YAAYC,4BAA0D;IACpE,IAAI,CAACC,eAAe,GAAGD,4BAA4B,CAACE,qBAAqB;IACzE,IAAI,CAACC,cAAc,GAAGH,4BAA4B,CAACG,cAAc;IACjE,IAAI,CAACC,mBAAmB,GAAGJ,4BAA4B,CAACI,mBAAmB;EAC7E;EAEO,MAAMC,wBAAwBA,CACnCC,6BAA4D,EAC5DC,iBAAoC,EACpCC,YAAsB;IAEtB,MAAMC,0BAA0B,GAAG,MAAM,IAAI,CAACC,+BAA+B,CAC3EJ,6BAA6B,EAC7BC,iBAAiB,EACjBC,YAAY,CACb;IACD,MAAMJ,mBAAmB,GAAG,IAAIP,gCAAgC,CAC9DY,0BAA0B,EAC1B,IAAI,CAACN,cAAc,CACpB;IAED,OAAOC,mBAAmB;EAC5B;EAEQ,MAAMM,+BAA+BA,CAC3CJ,6BAA4D,EAC5DC,iBAAoC,EACpCC,YAAsB;IAEtB,MAAMG,gBAAgB,GAAGJ,iBAAiB,CAACK,qBAAqB,CAACC,WAAW,CAC1EP,6BAA6B,CAACQ,yBAAyB,CAACC,IAAI,EAC5DT,6BAA6B,CAACQ,yBAAyB,CAACE,KAAK,EAC7DT,iBAAiB,CAACU,0BAA0B,CAC7C;IACD,MAAMR,0BAA0B,GAC9B,MAAMF,iBAAiB,CAACW,+BAA+B,CAACL,WAAW,CACjE,IAAI,CAACZ,eAAe,EACpBU,gBAAgB,EAChBL,6BAA6B,CAACa,wBAAwB,EACtDX,YAAY,CACb;IAEH,OAAOC,0BAA0B;EACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}