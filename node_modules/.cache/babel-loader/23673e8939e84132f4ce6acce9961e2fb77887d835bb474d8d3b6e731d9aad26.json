{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, MarkerType, Handle } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSServiceNode = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(motion.div, {\n  className: `aws-service-node ${data.isMissing ? 'missing' : ''}`,\n  initial: {\n    scale: 0,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1\n  },\n  exit: {\n    scale: 0,\n    opacity: 0\n  },\n  whileHover: {\n    scale: 1.1\n  },\n  transition: {\n    type: \"spring\",\n    stiffness: 300\n  },\n  children: [/*#__PURE__*/_jsxDEV(Handle, {\n    type: \"target\",\n    position: \"top\",\n    id: `${data.id}-target`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-content\",\n    children: [data.isMissing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missing-service-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.icon,\n      alt: data.label,\n      className: \"service-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"service-label\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Handle, {\n    type: \"source\",\n    position: \"bottom\",\n    id: `${data.id}-source`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = AWSServiceNode;\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\nconst createNodeId = serviceName => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\nconst AWSArchitectureDisplay = ({\n  architecture,\n  currentQuestion\n}) => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  useEffect(() => {\n    var _architecture$connect, _architecture$connect2;\n    if (!architecture) return;\n    const newNodes = [];\n    const newEdges = [];\n    const nodePositions = {};\n\n    // Create a map of dependencies to organize layers\n    const dependencyMap = new Map();\n    const incomingConnections = new Map();\n\n    // Initialize maps\n    architecture.services.forEach(service => {\n      const nodeId = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      dependencyMap.set(nodeId, []);\n      incomingConnections.set(nodeId, 0);\n    });\n\n    // Build dependency map and count incoming connections\n    (_architecture$connect = architecture.connections) === null || _architecture$connect === void 0 ? void 0 : _architecture$connect.forEach(conn => {\n      const fromId = typeof conn.from === 'string' ? conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n      const toId = typeof conn.to === 'string' ? conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n      dependencyMap.get(fromId).push(toId);\n      incomingConnections.set(toId, (incomingConnections.get(toId) || 0) + 1);\n    });\n\n    // Find root nodes (nodes with no incoming connections)\n    const rootNodes = Array.from(incomingConnections.entries()).filter(([nodeId, count]) => count === 0).map(([nodeId]) => nodeId);\n\n    // Calculate positions by layers\n    const HORIZONTAL_SPACING = 250;\n    const VERTICAL_SPACING = 120;\n    const processed = new Set();\n    let currentX = 50;\n    const processNode = (nodeId, level = 0) => {\n      if (processed.has(nodeId)) return;\n      processed.add(nodeId);\n      const service = architecture.services.find(s => (s.id || s.name.toLowerCase().replace(/[^a-z0-9]+/g, '-')) === nodeId);\n\n      // Get children (dependent nodes)\n      const children = dependencyMap.get(nodeId) || [];\n\n      // Calculate vertical position for parallel nodes\n      const totalChildren = children.length;\n      const centerY = 200;\n      let nodeY = centerY;\n      if (totalChildren > 1) {\n        // If node has multiple children, position them in parallel\n        const verticalOffset = VERTICAL_SPACING * (totalChildren - 1) / 2;\n        nodeY = centerY - verticalOffset + level * VERTICAL_SPACING;\n      }\n\n      // Create node\n      const node = {\n        id: nodeId,\n        type: 'awsService',\n        position: {\n          x: currentX,\n          y: nodeY\n        },\n        data: {\n          label: service.name,\n          icon: service.icon,\n          isMissing: service.name.toLowerCase().includes('missing')\n        },\n        style: {\n          width: 120,\n          height: 80\n        }\n      };\n      newNodes.push(node);\n      nodePositions[nodeId] = node.position;\n\n      // Process children\n      if (children.length > 0) {\n        currentX += HORIZONTAL_SPACING;\n        children.forEach((childId, index) => {\n          const childY = totalChildren > 1 ? centerY - (totalChildren - 1) * VERTICAL_SPACING / 2 + index * VERTICAL_SPACING : centerY;\n          processNode(childId, index);\n        });\n        currentX -= HORIZONTAL_SPACING;\n      }\n    };\n\n    // Process all root nodes\n    rootNodes.forEach(nodeId => processNode(nodeId));\n\n    // Create edges with improved styling\n    (_architecture$connect2 = architecture.connections) === null || _architecture$connect2 === void 0 ? void 0 : _architecture$connect2.forEach(conn => {\n      const fromId = typeof conn.from === 'string' ? conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n      const toId = typeof conn.to === 'string' ? conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n      if (nodePositions[fromId] && nodePositions[toId]) {\n        newEdges.push({\n          id: `${fromId}-${toId}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep',\n          animated: true,\n          style: {\n            stroke: '#4FD1C5',\n            strokeWidth: 2,\n            opacity: 0.8\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20\n          }\n        });\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '600px',\n      width: '100%'\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      fitViewOptions: {\n        padding: 0.2,\n        minZoom: 0.5,\n        maxZoom: 1.5\n      },\n      defaultViewport: {\n        zoom: 1\n      },\n      minZoom: 0.5,\n      maxZoom: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#4FD1C5\",\n        gap: 16,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"qOdGaiImnCja3mNU5uxxCrNYw9I=\");\n_c2 = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"AWSServiceNode\");\n$RefreshReg$(_c2, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","MarkerType","Handle","motion","getCachedServiceIcon","jsxDEV","_jsxDEV","AWSServiceNode","data","div","className","isMissing","initial","scale","opacity","animate","exit","whileHover","transition","type","stiffness","children","position","id","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","label","_c","nodeTypes","awsService","createNodeId","serviceName","console","error","toLowerCase","replace","AWSArchitectureDisplay","architecture","currentQuestion","_s","nodes","setNodes","edges","setEdges","_architecture$connect","_architecture$connect2","newNodes","newEdges","nodePositions","dependencyMap","Map","incomingConnections","services","forEach","service","nodeId","name","set","connections","conn","fromId","from","toId","to","get","push","rootNodes","Array","entries","filter","count","map","HORIZONTAL_SPACING","VERTICAL_SPACING","processed","Set","currentX","processNode","level","has","add","find","s","totalChildren","length","centerY","nodeY","verticalOffset","node","x","y","includes","style","width","height","childId","index","childY","source","target","animated","stroke","strokeWidth","markerEnd","ArrowClosed","fitView","fitViewOptions","padding","minZoom","maxZoom","defaultViewport","zoom","color","gap","size","_c2","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactFlow, { \n  Background, \n  Controls, \n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  MarkerType,\n  Handle\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst AWSServiceNode = ({ data }) => (\n  <motion.div\n    className={`aws-service-node ${data.isMissing ? 'missing' : ''}`}\n    initial={{ scale: 0, opacity: 0 }}\n    animate={{ scale: 1, opacity: 1 }}\n    exit={{ scale: 0, opacity: 0 }}\n    whileHover={{ scale: 1.1 }}\n    transition={{ type: \"spring\", stiffness: 300 }}\n  >\n    <Handle \n      type=\"target\" \n      position=\"top\" \n      id={`${data.id}-target`}\n      className=\"handle\"\n    />\n    <div className=\"node-content\">\n      {data.isMissing ? (\n        <div className=\"missing-service-placeholder\">\n          <span>?</span>\n        </div>\n      ) : (\n        <img src={data.icon} alt={data.label} className=\"service-icon\" />\n      )}\n      <span className=\"service-label\">{data.label}</span>\n    </div>\n    <Handle \n      type=\"source\" \n      position=\"bottom\" \n      id={`${data.id}-source`}\n      className=\"handle\"\n    />\n  </motion.div>\n);\n\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\n\nconst createNodeId = (serviceName) => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\n\nconst AWSArchitectureDisplay = ({ architecture, currentQuestion }) => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  useEffect(() => {\n    if (!architecture) return;\n\n    const newNodes = [];\n    const newEdges = [];\n    const nodePositions = {};\n    \n    // Create a map of dependencies to organize layers\n    const dependencyMap = new Map();\n    const incomingConnections = new Map();\n    \n    // Initialize maps\n    architecture.services.forEach(service => {\n      const nodeId = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      dependencyMap.set(nodeId, []);\n      incomingConnections.set(nodeId, 0);\n    });\n\n    // Build dependency map and count incoming connections\n    architecture.connections?.forEach(conn => {\n      const fromId = typeof conn.from === 'string' ? \n        conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n      const toId = typeof conn.to === 'string' ? \n        conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n      \n      dependencyMap.get(fromId).push(toId);\n      incomingConnections.set(toId, (incomingConnections.get(toId) || 0) + 1);\n    });\n\n    // Find root nodes (nodes with no incoming connections)\n    const rootNodes = Array.from(incomingConnections.entries())\n      .filter(([nodeId, count]) => count === 0)\n      .map(([nodeId]) => nodeId);\n\n    // Calculate positions by layers\n    const HORIZONTAL_SPACING = 250;\n    const VERTICAL_SPACING = 120;\n    const processed = new Set();\n    let currentX = 50;\n\n    const processNode = (nodeId, level = 0) => {\n      if (processed.has(nodeId)) return;\n      processed.add(nodeId);\n\n      const service = architecture.services.find(s => \n        (s.id || s.name.toLowerCase().replace(/[^a-z0-9]+/g, '-')) === nodeId\n      );\n\n      // Get children (dependent nodes)\n      const children = dependencyMap.get(nodeId) || [];\n      \n      // Calculate vertical position for parallel nodes\n      const totalChildren = children.length;\n      const centerY = 200;\n      let nodeY = centerY;\n\n      if (totalChildren > 1) {\n        // If node has multiple children, position them in parallel\n        const verticalOffset = (VERTICAL_SPACING * (totalChildren - 1)) / 2;\n        nodeY = centerY - verticalOffset + (level * VERTICAL_SPACING);\n      }\n\n      // Create node\n      const node = {\n        id: nodeId,\n        type: 'awsService',\n        position: { x: currentX, y: nodeY },\n        data: {\n          label: service.name,\n          icon: service.icon,\n          isMissing: service.name.toLowerCase().includes('missing')\n        },\n        style: {\n          width: 120,\n          height: 80\n        }\n      };\n      newNodes.push(node);\n      nodePositions[nodeId] = node.position;\n\n      // Process children\n      if (children.length > 0) {\n        currentX += HORIZONTAL_SPACING;\n        children.forEach((childId, index) => {\n          const childY = totalChildren > 1 \n            ? centerY - ((totalChildren - 1) * VERTICAL_SPACING / 2) + (index * VERTICAL_SPACING)\n            : centerY;\n          processNode(childId, index);\n        });\n        currentX -= HORIZONTAL_SPACING;\n      }\n    };\n\n    // Process all root nodes\n    rootNodes.forEach(nodeId => processNode(nodeId));\n\n    // Create edges with improved styling\n    architecture.connections?.forEach(conn => {\n      const fromId = typeof conn.from === 'string' ? \n        conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n      const toId = typeof conn.to === 'string' ? \n        conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n\n      if (nodePositions[fromId] && nodePositions[toId]) {\n        newEdges.push({\n          id: `${fromId}-${toId}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep',\n          animated: true,\n          style: { \n            stroke: '#4FD1C5', \n            strokeWidth: 2,\n            opacity: 0.8\n          },\n          markerEnd: { \n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20\n          }\n        });\n      }\n    });\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture]);\n\n  return (\n    <div style={{ height: '600px', width: '100%' }}> {/* Increased height for parallel layout */}\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        nodeTypes={nodeTypes}\n        fitView\n        fitViewOptions={{\n          padding: 0.2,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        }}\n        defaultViewport={{ zoom: 1 }}\n        minZoom={0.5}\n        maxZoom={1.5}\n      >\n        <Background color=\"#4FD1C5\" gap={16} size={1} />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}