{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AWS architecture expert. Generate different architecture scenarios using only the allowed services.\"\n      }, {\n        role: \"user\",\n        content: `Create a ${difficulty} level AWS architecture scenario. \n          Return a JSON object with exactly this structure:\n          {\n            \"services\": [\"service1_id\", \"service2_id\"],\n            \"connections\": [{\"from\": \"service1_id\", \"to\": \"service2_id\"}],\n            \"missingService\": \"service_id\",\n            \"question\": \"What service would you use for...?\",\n            \"options\": [\"service1_id\", \"service2_id\", \"service3_id\"]\n          }\n          Use only these service IDs: lambda, s3, ec2, ecs, dynamodb, rds`\n      }],\n      temperature: 0.8\n    });\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('Raw AI Response:', aiSuggestion);\n\n    // Validate the AI response structure\n    if (!aiSuggestion || !aiSuggestion.services || !aiSuggestion.options) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    // Map service IDs to full service objects\n    const getServiceById = id => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{\n          from: randomServices[0].id,\n          to: randomServices[1].id\n        }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","completion","chat","completions","create","model","messages","role","content","temperature","aiSuggestion","JSON","parse","choices","message","console","log","services","options","Error","getServiceById","find","s","architecture","map","connections","question","text","missingServices","missingService","error","randomServices","sort","Math","random","slice","from","to"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { \n          role: \"system\", \n          content: \"You are an AWS architecture expert. Generate different architecture scenarios using only the allowed services.\"\n        },\n        { \n          role: \"user\", \n          content: `Create a ${difficulty} level AWS architecture scenario. \n          Return a JSON object with exactly this structure:\n          {\n            \"services\": [\"service1_id\", \"service2_id\"],\n            \"connections\": [{\"from\": \"service1_id\", \"to\": \"service2_id\"}],\n            \"missingService\": \"service_id\",\n            \"question\": \"What service would you use for...?\",\n            \"options\": [\"service1_id\", \"service2_id\", \"service3_id\"]\n          }\n          Use only these service IDs: lambda, s3, ec2, ecs, dynamodb, rds`\n        }\n      ],\n      temperature: 0.8\n    });\n\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('Raw AI Response:', aiSuggestion);\n\n    // Validate the AI response structure\n    if (!aiSuggestion || !aiSuggestion.services || !aiSuggestion.options) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    // Map service IDs to full service objects\n    const getServiceById = (id) => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    \n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{ from: randomServices[0].id, to: randomServices[1].id }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}