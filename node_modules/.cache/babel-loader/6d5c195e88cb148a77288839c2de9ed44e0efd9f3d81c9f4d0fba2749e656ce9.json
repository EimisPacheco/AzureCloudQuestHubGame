{"ast":null,"code":"import { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n/** @hidden */\nexport class OffsetLimitEndpointComponent {\n  constructor(executionContext, offset, limit) {\n    this.executionContext = executionContext;\n    this.offset = offset;\n    this.limit = limit;\n  }\n  hasMoreResults() {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n  async fetchMore(diagnosticNode) {\n    const aggregateHeaders = getInitialHeader();\n    const buffer = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n    if (response === undefined || response.result === undefined) {\n      return {\n        result: undefined,\n        headers: response.headers\n      };\n    }\n    for (const item of response.result) {\n      if (this.offset > 0) {\n        this.offset--;\n      } else if (this.limit > 0) {\n        buffer.push(item);\n        this.limit--;\n      }\n    }\n    return {\n      result: buffer,\n      headers: aggregateHeaders\n    };\n  }\n}","map":{"version":3,"names":["getInitialHeader","mergeHeaders","OffsetLimitEndpointComponent","constructor","executionContext","offset","limit","hasMoreResults","fetchMore","diagnosticNode","aggregateHeaders","buffer","response","headers","undefined","result","item","push"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number,\n  ) {}\n\n  public hasMoreResults(): boolean {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n\n    for (const item of response.result) {\n      if (this.offset > 0) {\n        this.offset--;\n      } else if (this.limit > 0) {\n        buffer.push(item);\n        this.limit--;\n      }\n    }\n    return { result: buffer, headers: aggregateHeaders };\n  }\n}\n"],"mappings":"AAKA,SAASA,gBAAgB,EAAEC,YAAY,QAAQ,gBAAgB;AAE/D;AACA,OAAM,MAAOC,4BAA4B;EACvCC,YACUC,gBAAkC,EAClCC,MAAc,EACdC,KAAa;IAFb,KAAAF,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,KAAK,GAALA,KAAK;EACZ;EAEIC,cAAcA,CAAA;IACnB,OAAO,CAAC,IAAI,CAACF,MAAM,GAAG,CAAC,IAAI,IAAI,CAACC,KAAK,GAAG,CAAC,KAAK,IAAI,CAACF,gBAAgB,CAACG,cAAc,EAAE;EACtF;EAEO,MAAMC,SAASA,CAACC,cAAuC;IAC5D,MAAMC,gBAAgB,GAAGV,gBAAgB,EAAE;IAC3C,MAAMW,MAAM,GAAU,EAAE;IACxB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,gBAAgB,CAACI,SAAS,CAACC,cAAc,CAAC;IACtER,YAAY,CAACS,gBAAgB,EAAEE,QAAQ,CAACC,OAAO,CAAC;IAChD,IAAID,QAAQ,KAAKE,SAAS,IAAIF,QAAQ,CAACG,MAAM,KAAKD,SAAS,EAAE;MAC3D,OAAO;QAAEC,MAAM,EAAED,SAAS;QAAED,OAAO,EAAED,QAAQ,CAACC;MAAO,CAAE;IACzD;IAEA,KAAK,MAAMG,IAAI,IAAIJ,QAAQ,CAACG,MAAM,EAAE;MAClC,IAAI,IAAI,CAACV,MAAM,GAAG,CAAC,EAAE;QACnB,IAAI,CAACA,MAAM,EAAE;MACf,CAAC,MAAM,IAAI,IAAI,CAACC,KAAK,GAAG,CAAC,EAAE;QACzBK,MAAM,CAACM,IAAI,CAACD,IAAI,CAAC;QACjB,IAAI,CAACV,KAAK,EAAE;MACd;IACF;IACA,OAAO;MAAES,MAAM,EAAEJ,MAAM;MAAEE,OAAO,EAAEH;IAAgB,CAAE;EACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}