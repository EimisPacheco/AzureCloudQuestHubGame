{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { KeyEncryptionKey } from \"../KeyEncryptionKey\";\n/**\n * The cache used to store the key encryption keys.\n * see {@link KeyEncryptionKey}\n * @hidden\n */\nexport class KeyEncryptionKeyCache {\n  constructor() {\n    this.cache = new Map();\n  }\n  getOrCreate(name, path, keyStoreProvider) {\n    const key = JSON.stringify([name, path]);\n    let keyEncryptionKey = this.get(key);\n    if (!keyEncryptionKey) {\n      keyEncryptionKey = new KeyEncryptionKey(name, path, keyStoreProvider);\n      this.set(key, keyEncryptionKey);\n    }\n    return keyEncryptionKey;\n  }\n  get(key) {\n    return this.cache.get(key);\n  }\n  set(key, keyEncryptionKey) {\n    this.cache.set(key, keyEncryptionKey);\n  }\n}","map":{"version":3,"names":["KeyEncryptionKey","KeyEncryptionKeyCache","constructor","cache","Map","getOrCreate","name","path","keyStoreProvider","key","JSON","stringify","keyEncryptionKey","get","set"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/Cache/KeyEncryptionKeyCache.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionKeyStoreProvider } from \"../EncryptionKeyStoreProvider\";\nimport { KeyEncryptionKey } from \"../KeyEncryptionKey\";\n\n/**\n * The cache used to store the key encryption keys.\n * see {@link KeyEncryptionKey}\n * @hidden\n */\nexport class KeyEncryptionKeyCache {\n  // key is JSON.stringify([name, path])\n  public cache: Map<string, KeyEncryptionKey>;\n\n  constructor() {\n    this.cache = new Map<string, KeyEncryptionKey>();\n  }\n\n  public getOrCreate(\n    name: string,\n    path: string,\n    keyStoreProvider: EncryptionKeyStoreProvider,\n  ): KeyEncryptionKey {\n    const key = JSON.stringify([name, path]);\n    let keyEncryptionKey = this.get(key);\n    if (!keyEncryptionKey) {\n      keyEncryptionKey = new KeyEncryptionKey(name, path, keyStoreProvider);\n      this.set(key, keyEncryptionKey);\n    }\n    return keyEncryptionKey;\n  }\n\n  private get(key: string): KeyEncryptionKey | undefined {\n    return this.cache.get(key);\n  }\n  private set(key: string, keyEncryptionKey: KeyEncryptionKey): void {\n    this.cache.set(key, keyEncryptionKey);\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,gBAAgB,QAAQ,qBAAqB;AAEtD;;;;;AAKA,OAAM,MAAOC,qBAAqB;EAIhCC,YAAA;IACE,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAA4B;EAClD;EAEOC,WAAWA,CAChBC,IAAY,EACZC,IAAY,EACZC,gBAA4C;IAE5C,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC,CAACL,IAAI,EAAEC,IAAI,CAAC,CAAC;IACxC,IAAIK,gBAAgB,GAAG,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC;IACpC,IAAI,CAACG,gBAAgB,EAAE;MACrBA,gBAAgB,GAAG,IAAIZ,gBAAgB,CAACM,IAAI,EAAEC,IAAI,EAAEC,gBAAgB,CAAC;MACrE,IAAI,CAACM,GAAG,CAACL,GAAG,EAAEG,gBAAgB,CAAC;IACjC;IACA,OAAOA,gBAAgB;EACzB;EAEQC,GAAGA,CAACJ,GAAW;IACrB,OAAO,IAAI,CAACN,KAAK,CAACU,GAAG,CAACJ,GAAG,CAAC;EAC5B;EACQK,GAAGA,CAACL,GAAW,EAAEG,gBAAkC;IACzD,IAAI,CAACT,KAAK,CAACW,GAAG,CAACL,GAAG,EAAEG,gBAAgB,CAAC;EACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}