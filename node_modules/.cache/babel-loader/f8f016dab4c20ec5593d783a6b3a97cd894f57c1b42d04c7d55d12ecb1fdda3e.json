{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureDisplay = ({\n  architecture,\n  missingServices\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const hasLoggedWarning = React.useRef(false);\n  React.useEffect(() => {\n    if (!(architecture !== null && architecture !== void 0 && architecture.services) && !hasLoggedWarning.current) {\n      hasLoggedWarning.current = true;\n      console.log('⚠️ Waiting for architecture data...');\n      return;\n    }\n    if (architecture !== null && architecture !== void 0 && architecture.services) {\n      var _architecture$connect;\n      console.log('📊 Rendering architecture:', {\n        servicesCount: architecture.services.length,\n        connectionsCount: (_architecture$connect = architecture.connections) === null || _architecture$connect === void 0 ? void 0 : _architecture$connect.length\n      });\n      const newNodes = [];\n      const newEdges = [];\n\n      // Track existing nodes\n      const existingNodes = new Set();\n      architecture.services.forEach(service => {\n        const serviceId = typeof service === 'string' ? createNodeId(service) : service.id;\n        const serviceName = typeof service === 'string' ? service : service.name;\n        const serviceIcon = typeof service === 'string' ? getCachedServiceIcon(service) : service.icon;\n        newNodes.push({\n          id: serviceId,\n          type: 'awsService',\n          position: {\n            x: newNodes.length * 200,\n            y: 200\n          },\n          data: {\n            label: serviceName,\n            icon: serviceIcon,\n            isMissing: serviceName.startsWith('missing_')\n          }\n        });\n        existingNodes.add(serviceId);\n      });\n      (architecture.connections || []).forEach(conn => {\n        const fromId = typeof conn.from === 'string' ? createNodeId(conn.from) : conn.from.id;\n        const toId = typeof conn.to === 'string' ? createNodeId(conn.to) : conn.to.id;\n        if (!existingNodes.has(fromId)) {\n          newNodes.push({\n            id: fromId,\n            type: 'awsService',\n            position: {\n              x: newNodes.length * 200,\n              y: 200\n            },\n            data: {\n              label: fromId,\n              isMissing: true\n            }\n          });\n          existingNodes.add(fromId);\n        }\n        if (!existingNodes.has(toId)) {\n          newNodes.push({\n            id: toId,\n            type: 'awsService',\n            position: {\n              x: newNodes.length * 200,\n              y: 200\n            },\n            data: {\n              label: toId,\n              isMissing: true\n            }\n          });\n          existingNodes.add(toId);\n        }\n        newEdges.push({\n          id: `${fromId}-${toId}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep',\n          animated: true,\n          style: {\n            stroke: '#4FD1C5',\n            strokeWidth: 2\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed\n          }\n        });\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n    return () => {\n      hasLoggedWarning.current = false;\n    };\n  }, [architecture, missingServices, setNodes, setEdges]);\n  if (!(architecture !== null && architecture !== void 0 && architecture.services)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-visualizer-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading architecture...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '500px'\n    },\n    className: \"architecture-visualizer\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      minZoom: 0.5,\n      maxZoom: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#4FD1C5\",\n        gap: 16,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => node.data.isMissing ? '#FF5656' : '#4FD1C5',\n        maskColor: \"rgba(13, 25, 35, 0.7)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"ymklbP+YFGCeuuTrnQcK0pTKhKc=\", true);\n_c = AWSArchitectureDisplay;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["AWSArchitectureDisplay","architecture","missingServices","_s","nodes","setNodes","onNodesChange","useNodesState","edges","setEdges","onEdgesChange","useEdgesState","hasLoggedWarning","React","useRef","useEffect","services","current","console","log","_architecture$connect","servicesCount","length","connectionsCount","connections","newNodes","newEdges","existingNodes","Set","forEach","service","serviceId","createNodeId","id","serviceName","name","serviceIcon","getCachedServiceIcon","icon","push","type","position","x","y","data","label","isMissing","startsWith","add","conn","fromId","from","toId","to","has","source","target","animated","style","stroke","strokeWidth","markerEnd","MarkerType","ArrowClosed","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","height","ReactFlow","nodeTypes","fitView","minZoom","maxZoom","Background","color","gap","size","Controls","MiniMap","nodeColor","node","maskColor","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["const AWSArchitectureDisplay = ({ architecture, missingServices }) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  \n  const hasLoggedWarning = React.useRef(false);\n\n  React.useEffect(() => {\n    if (!architecture?.services && !hasLoggedWarning.current) {\n      hasLoggedWarning.current = true;\n      console.log('⚠️ Waiting for architecture data...');\n      return;\n    }\n\n    if (architecture?.services) {\n      console.log('📊 Rendering architecture:', {\n        servicesCount: architecture.services.length,\n        connectionsCount: architecture.connections?.length\n      });\n      \n      const newNodes = [];\n      const newEdges = [];\n      \n      // Track existing nodes\n      const existingNodes = new Set();\n\n      architecture.services.forEach((service) => {\n        const serviceId = typeof service === 'string' ? createNodeId(service) : service.id;\n        const serviceName = typeof service === 'string' ? service : service.name;\n        const serviceIcon = typeof service === 'string' ? getCachedServiceIcon(service) : service.icon;\n\n        newNodes.push({\n          id: serviceId,\n          type: 'awsService',\n          position: { x: newNodes.length * 200, y: 200 },\n          data: {\n            label: serviceName,\n            icon: serviceIcon,\n            isMissing: serviceName.startsWith('missing_')\n          }\n        });\n        existingNodes.add(serviceId);\n      });\n\n      (architecture.connections || []).forEach((conn) => {\n        const fromId = typeof conn.from === 'string' ? createNodeId(conn.from) : conn.from.id;\n        const toId = typeof conn.to === 'string' ? createNodeId(conn.to) : conn.to.id;\n\n        if (!existingNodes.has(fromId)) {\n          newNodes.push({\n            id: fromId,\n            type: 'awsService',\n            position: { x: newNodes.length * 200, y: 200 },\n            data: { label: fromId, isMissing: true }\n          });\n          existingNodes.add(fromId);\n        }\n\n        if (!existingNodes.has(toId)) {\n          newNodes.push({\n            id: toId,\n            type: 'awsService',\n            position: { x: newNodes.length * 200, y: 200 },\n            data: { label: toId, isMissing: true }\n          });\n          existingNodes.add(toId);\n        }\n\n        newEdges.push({\n          id: `${fromId}-${toId}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep',\n          animated: true,\n          style: { stroke: '#4FD1C5', strokeWidth: 2 },\n          markerEnd: { type: MarkerType.ArrowClosed }\n        });\n      });\n\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n\n    return () => {\n      hasLoggedWarning.current = false;\n    };\n  }, [architecture, missingServices, setNodes, setEdges]);\n\n  if (!architecture?.services) {\n    return (\n      <div className=\"architecture-visualizer-loading\">\n        <span>Loading architecture...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '500px' }} className=\"architecture-visualizer\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n        minZoom={0.5}\n        maxZoom={1.5}\n      >\n        <Background color=\"#4FD1C5\" gap={16} size={1} />\n        <Controls />\n        <MiniMap \n          nodeColor={(node) => node.data.isMissing ? '#FF5656' : '#4FD1C5'}\n          maskColor=\"rgba(13, 25, 35, 0.7)\"\n        />\n      </ReactFlow>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}