{"ast":null,"code":"export const translateText = async (text, targetLanguage) => {\n  try {\n    var _data$, _data$$translations$;\n    // Make sure we have text to translate\n    if (!text) return '';\n\n    // Use the correct Azure Translator endpoint\n    const endpoint = process.env.REACT_APP_TRANSLATOR_ENDPOINT || 'https://api.cognitive.microsofttranslator.com';\n    const apiKey = process.env.REACT_APP_TRANSLATOR_KEY;\n\n    // If no API key is configured, return the original text\n    if (!apiKey) {\n      console.warn('Translation API key not configured');\n      return text;\n    }\n    const url = `${endpoint}/translate?api-version=3.0&to=${targetLanguage}`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Ocp-Apim-Subscription-Key': apiKey,\n        'Ocp-Apim-Subscription-Region': process.env.REACT_APP_TRANSLATOR_REGION || 'global'\n      },\n      body: JSON.stringify([{\n        text\n      }])\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : (_data$$translations$ = _data$.translations[0]) === null || _data$$translations$ === void 0 ? void 0 : _data$$translations$.text) || text;\n  } catch (error) {\n    console.error('Translation error:', error);\n    // Return original text if translation fails\n    return text;\n  }\n};","map":{"version":3,"names":["translateText","text","targetLanguage","_data$","_data$$translations$","endpoint","process","env","REACT_APP_TRANSLATOR_ENDPOINT","apiKey","REACT_APP_TRANSLATOR_KEY","console","warn","url","response","fetch","method","headers","REACT_APP_TRANSLATOR_REGION","body","JSON","stringify","ok","Error","status","data","json","translations","error"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/TranslationService.js"],"sourcesContent":["export const translateText = async (text, targetLanguage) => {\n  try {\n    // Make sure we have text to translate\n    if (!text) return '';\n    \n    // Use the correct Azure Translator endpoint\n    const endpoint = process.env.REACT_APP_TRANSLATOR_ENDPOINT || 'https://api.cognitive.microsofttranslator.com';\n    const apiKey = process.env.REACT_APP_TRANSLATOR_KEY;\n    \n    // If no API key is configured, return the original text\n    if (!apiKey) {\n      console.warn('Translation API key not configured');\n      return text;\n    }\n\n    const url = `${endpoint}/translate?api-version=3.0&to=${targetLanguage}`;\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Ocp-Apim-Subscription-Key': apiKey,\n        'Ocp-Apim-Subscription-Region': process.env.REACT_APP_TRANSLATOR_REGION || 'global'\n      },\n      body: JSON.stringify([{ text }])\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data[0]?.translations[0]?.text || text;\n  } catch (error) {\n    console.error('Translation error:', error);\n    // Return original text if translation fails\n    return text;\n  }\n}; "],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,MAAAA,CAAOC,IAAI,EAAEC,cAAc,KAAK;EAC3D,IAAI;IAAA,IAAAC,MAAA,EAAAC,oBAAA;IACF;IACA,IAAI,CAACH,IAAI,EAAE,OAAO,EAAE;;IAEpB;IACA,MAAMI,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B,IAAI,+CAA+C;IAC7G,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAG,CAACG,wBAAwB;;IAEnD;IACA,IAAI,CAACD,MAAM,EAAE;MACXE,OAAO,CAACC,IAAI,CAAC,oCAAoC,CAAC;MAClD,OAAOX,IAAI;IACb;IAEA,MAAMY,GAAG,GAAG,GAAGR,QAAQ,iCAAiCH,cAAc,EAAE;IAExE,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAChCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,2BAA2B,EAAER,MAAM;QACnC,8BAA8B,EAAEH,OAAO,CAACC,GAAG,CAACW,2BAA2B,IAAI;MAC7E,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC;QAAEpB;MAAK,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI,CAACa,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAO,EAAAvB,MAAA,GAAAsB,IAAI,CAAC,CAAC,CAAC,cAAAtB,MAAA,wBAAAC,oBAAA,GAAPD,MAAA,CAASwB,YAAY,CAAC,CAAC,CAAC,cAAAvB,oBAAA,uBAAxBA,oBAAA,CAA0BH,IAAI,KAAIA,IAAI;EAC/C,CAAC,CAAC,OAAO2B,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C;IACA,OAAO3B,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}