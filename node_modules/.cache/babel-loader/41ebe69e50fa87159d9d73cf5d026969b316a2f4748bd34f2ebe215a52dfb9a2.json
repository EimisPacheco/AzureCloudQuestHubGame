{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { KeyEncryptionAlgorithm } from \"./enums/KeyEncryptionAlgorithm\";\n/**\n * A wrapper class containing the info about the key-protecting key stored in an external key provider\n * and provides interface to wrap and unwrap the key.\n */\nexport class KeyEncryptionKey {\n  constructor(name, path, keyStoreProvider) {\n    this.name = name;\n    this.path = path;\n    this.keyStoreProvider = keyStoreProvider;\n    this.encryptionAlgorithm = KeyEncryptionAlgorithm.RSA_OAEP;\n  }\n  async wrapEncryptionKey(plainTextEncryptionKey) {\n    return this.keyStoreProvider.wrapKey(this.path, this.encryptionAlgorithm, plainTextEncryptionKey);\n  }\n  async unwrapEncryptionKey(wrappedEncryptionKey) {\n    return this.keyStoreProvider.unwrapKey(this.path, this.encryptionAlgorithm, wrappedEncryptionKey);\n  }\n}","map":{"version":3,"names":["KeyEncryptionAlgorithm","KeyEncryptionKey","constructor","name","path","keyStoreProvider","encryptionAlgorithm","RSA_OAEP","wrapEncryptionKey","plainTextEncryptionKey","wrapKey","unwrapEncryptionKey","wrappedEncryptionKey","unwrapKey"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/KeyEncryptionKey.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KeyEncryptionAlgorithm } from \"./enums/KeyEncryptionAlgorithm\";\nimport type { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider\";\n/**\n * A wrapper class containing the info about the key-protecting key stored in an external key provider\n * and provides interface to wrap and unwrap the key.\n */\nexport class KeyEncryptionKey {\n  private encryptionAlgorithm: KeyEncryptionAlgorithm;\n\n  public name: string;\n\n  public path: string;\n\n  public keyStoreProvider: EncryptionKeyStoreProvider;\n\n  constructor(name: string, path: string, keyStoreProvider: EncryptionKeyStoreProvider) {\n    this.name = name;\n    this.path = path;\n    this.keyStoreProvider = keyStoreProvider;\n    this.encryptionAlgorithm = KeyEncryptionAlgorithm.RSA_OAEP;\n  }\n\n  public async wrapEncryptionKey(plainTextEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.wrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      plainTextEncryptionKey,\n    );\n  }\n\n  public async unwrapEncryptionKey(wrappedEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.unwrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      wrappedEncryptionKey,\n    );\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,sBAAsB,QAAQ,gCAAgC;AAEvE;;;;AAIA,OAAM,MAAOC,gBAAgB;EAS3BC,YAAYC,IAAY,EAAEC,IAAY,EAAEC,gBAA4C;IAClF,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,mBAAmB,GAAGN,sBAAsB,CAACO,QAAQ;EAC5D;EAEO,MAAMC,iBAAiBA,CAACC,sBAA8B;IAC3D,OAAO,IAAI,CAACJ,gBAAgB,CAACK,OAAO,CAClC,IAAI,CAACN,IAAI,EACT,IAAI,CAACE,mBAAmB,EACxBG,sBAAsB,CACvB;EACH;EAEO,MAAME,mBAAmBA,CAACC,oBAA4B;IAC3D,OAAO,IAAI,CAACP,gBAAgB,CAACQ,SAAS,CACpC,IAAI,CAACT,IAAI,EACT,IAAI,CAACE,mBAAmB,EACxBM,oBAAoB,CACrB;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}