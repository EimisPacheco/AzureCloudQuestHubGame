{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/GameCanvas.css';\nimport { initializeGameState, formatTime, isGameComplete, getServiceIconUrl } from '../utils/memoryGameUtils';\nimport { soundManager } from '../services/SoundManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconsMemoryGame = () => {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState(() => initializeGameState());\n  const [timeLeft, setTimeLeft] = useState(1200);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Initialize or reset the game\n  const initGame = useCallback(() => {\n    const newGameState = initializeGameState();\n    setGameState(newGameState);\n    setTimeLeft(1200);\n    setGameStarted(true);\n    setGameOver(false);\n  }, []);\n\n  // Handle card click\n  const handleCardClick = index => {\n    // Don't allow clicks if the board is locked or the card is already flipped/matched\n    if (gameState.isLocked || gameState.flippedCards.length >= 2 || gameState.cards[index].isFlipped || gameState.cards[index].isMatched) {\n      return;\n    }\n\n    // Play select sound\n    soundManager.play('select');\n\n    // Flip the card\n    setGameState(prevState => {\n      // Create a new cards array with the clicked card flipped\n      const updatedCards = prevState.cards.map((card, i) => i === index ? {\n        ...card,\n        isFlipped: true\n      } : card);\n\n      // Add the card to flippedCards\n      const updatedFlippedCards = [...prevState.flippedCards, prevState.cards[index]];\n\n      // Check if we now have 2 flipped cards\n      const shouldCheckMatch = updatedFlippedCards.length === 2;\n      return {\n        ...prevState,\n        cards: updatedCards,\n        flippedCards: updatedFlippedCards,\n        isLocked: shouldCheckMatch // Lock the board if we need to check for a match\n      };\n    });\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (gameState.flippedCards.length === 2) {\n      const [firstCard, secondCard] = gameState.flippedCards;\n\n      // Check if the cards match (same service)\n      const isMatch = firstCard.service === secondCard.service;\n      if (isMatch) {\n        // Play correct sound\n        soundManager.play('correct');\n\n        // It's a match! Update the game state\n        setGameState(prevState => {\n          // Mark the matched cards\n          const updatedCards = prevState.cards.map(card => card.service === firstCard.service ? {\n            ...card,\n            isMatched: true\n          } : card);\n\n          // Add the service to matched pairs\n          const updatedMatchedPairs = [...prevState.matchedPairs, firstCard.service];\n\n          // Check if the game is complete\n          const complete = isGameComplete(updatedMatchedPairs, 12); // 12 pairs total\n\n          if (complete) {\n            // Play achievement sound when game is complete\n            soundManager.play('achievement');\n            setGameOver(true);\n          }\n          return {\n            ...prevState,\n            cards: updatedCards,\n            flippedCards: [],\n            matchedPairs: updatedMatchedPairs,\n            isLocked: false\n          };\n        });\n      } else {\n        // Play incorrect sound\n        soundManager.play('incorrect');\n\n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          setGameState(prevState => {\n            // Flip the cards back\n            const updatedCards = prevState.cards.map(card => card.index === firstCard.index || card.index === secondCard.index ? {\n              ...card,\n              isFlipped: false\n            } : card);\n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              isLocked: false\n            };\n          });\n        }, 1500); // 1.5 second delay before flipping back\n      }\n    }\n  }, [gameState.flippedCards]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n\n    for (let i = 0; i < totalCells; i++) {\n      if (i === 12) {\n        // Middle position (3rd row, 3rd column)\n        grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-reset\",\n          onClick: () => {\n            soundManager.play('select');\n            initGame();\n          },\n          children: \"Reset\"\n        }, \"reset\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this));\n      } else {\n        const cardIndex = i > 12 ? i - 1 : i; // Adjust index for cards after reset button\n        if (cardIndex < gameState.cards.length) {\n          const card = gameState.cards[cardIndex];\n          grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`,\n            onClick: () => handleCardClick(cardIndex),\n            onMouseEnter: () => soundManager.play('hover'),\n            children: card.isFlipped || card.isMatched ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"memory-card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: getServiceIconUrl(card.path),\n                alt: card.service,\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = `${process.env.PUBLIC_URL}/azure-icons/default.svg`;\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"memory-card-text\",\n                children: card.service\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this));\n        } else {\n          // Add empty cells to complete the grid if needed\n          grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"memory-game-card empty\"\n          }, `empty-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameCanvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"gameCanvas-game-title\",\n      children: \"Azure Icons Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameCanvas-game-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameCanvas-canvas-wrapper\",\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-timer\",\n          children: [\"TIMER: \", formatTime(timeLeft)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-grid\",\n          children: renderGrid()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameCanvas-game-over\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: gameState.matchedPairs.length === 12 ? 'Congratulations!' : 'Time\\'s Up!'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: gameState.matchedPairs.length === 12 ? `You found all matches with ${formatTime(timeLeft)} remaining!` : `You found ${gameState.matchedPairs.length} out of 12 matches.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              soundManager.play('select');\n              initGame();\n            },\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(IconsMemoryGame, \"MXlwZXpPIMtbY+DWZMcL2DJZDYg=\");\n_c = IconsMemoryGame;\nexport default IconsMemoryGame;\nvar _c;\n$RefreshReg$(_c, \"IconsMemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","initializeGameState","formatTime","isGameComplete","getServiceIconUrl","soundManager","jsxDEV","_jsxDEV","IconsMemoryGame","_s","gameState","setGameState","timeLeft","setTimeLeft","gameStarted","setGameStarted","gameOver","setGameOver","initGame","newGameState","handleCardClick","index","isLocked","flippedCards","length","cards","isFlipped","isMatched","play","prevState","updatedCards","map","card","i","updatedFlippedCards","shouldCheckMatch","firstCard","secondCard","isMatch","service","updatedMatchedPairs","matchedPairs","complete","setTimeout","timer","setInterval","prev","clearInterval","renderGrid","grid","totalCells","push","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","cardIndex","onMouseEnter","src","path","alt","onError","e","target","onerror","process","env","PUBLIC_URL","id","style","display","flexDirection","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/GameCanvas.css';\nimport { \n  initializeGameState, \n  formatTime, \n  isGameComplete,\n  getServiceIconUrl\n} from '../utils/memoryGameUtils';\nimport { soundManager } from '../services/SoundManager';\n\nconst IconsMemoryGame = () => {\n  // Game state\n  const [gameState, setGameState] = useState(() => initializeGameState());\n  const [timeLeft, setTimeLeft] = useState(1200);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Initialize or reset the game\n  const initGame = useCallback(() => {\n    const newGameState = initializeGameState();\n    setGameState(newGameState);\n    setTimeLeft(1200);\n    setGameStarted(true);\n    setGameOver(false);\n  }, []);\n\n  // Handle card click\n  const handleCardClick = (index) => {\n    // Don't allow clicks if the board is locked or the card is already flipped/matched\n    if (\n      gameState.isLocked || \n      gameState.flippedCards.length >= 2 || \n      gameState.cards[index].isFlipped || \n      gameState.cards[index].isMatched\n    ) {\n      return;\n    }\n\n    // Play select sound\n    soundManager.play('select');\n\n    // Flip the card\n    setGameState(prevState => {\n      // Create a new cards array with the clicked card flipped\n      const updatedCards = prevState.cards.map((card, i) => \n        i === index ? { ...card, isFlipped: true } : card\n      );\n      \n      // Add the card to flippedCards\n      const updatedFlippedCards = [...prevState.flippedCards, prevState.cards[index]];\n      \n      // Check if we now have 2 flipped cards\n      const shouldCheckMatch = updatedFlippedCards.length === 2;\n      \n      return {\n        ...prevState,\n        cards: updatedCards,\n        flippedCards: updatedFlippedCards,\n        isLocked: shouldCheckMatch // Lock the board if we need to check for a match\n      };\n    });\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (gameState.flippedCards.length === 2) {\n      const [firstCard, secondCard] = gameState.flippedCards;\n      \n      // Check if the cards match (same service)\n      const isMatch = firstCard.service === secondCard.service;\n      \n      if (isMatch) {\n        // Play correct sound\n        soundManager.play('correct');\n        \n        // It's a match! Update the game state\n        setGameState(prevState => {\n          // Mark the matched cards\n          const updatedCards = prevState.cards.map(card => \n            card.service === firstCard.service ? { ...card, isMatched: true } : card\n          );\n          \n          // Add the service to matched pairs\n          const updatedMatchedPairs = [...prevState.matchedPairs, firstCard.service];\n          \n          // Check if the game is complete\n          const complete = isGameComplete(updatedMatchedPairs, 12); // 12 pairs total\n          \n          if (complete) {\n            // Play achievement sound when game is complete\n            soundManager.play('achievement');\n            setGameOver(true);\n          }\n          \n          return {\n            ...prevState,\n            cards: updatedCards,\n            flippedCards: [],\n            matchedPairs: updatedMatchedPairs,\n            isLocked: false\n          };\n        });\n      } else {\n        // Play incorrect sound\n        soundManager.play('incorrect');\n        \n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          setGameState(prevState => {\n            // Flip the cards back\n            const updatedCards = prevState.cards.map(card => \n              card.index === firstCard.index || card.index === secondCard.index\n                ? { ...card, isFlipped: false }\n                : card\n            );\n            \n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              isLocked: false\n            };\n          });\n        }, 1500); // 1.5 second delay before flipping back\n      }\n    }\n  }, [gameState.flippedCards]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    \n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n    \n    for (let i = 0; i < totalCells; i++) {\n      if (i === 12) { // Middle position (3rd row, 3rd column)\n        grid.push(\n          <div \n            key=\"reset\" \n            className=\"memory-game-reset\"\n            onClick={() => {\n              soundManager.play('select');\n              initGame();\n            }}\n          >\n            Reset\n          </div>\n        );\n      } else {\n        const cardIndex = i > 12 ? i - 1 : i; // Adjust index for cards after reset button\n        if (cardIndex < gameState.cards.length) {\n          const card = gameState.cards[cardIndex];\n          grid.push(\n            <div\n              key={card.id}\n              className={`memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`}\n              onClick={() => handleCardClick(cardIndex)}\n              onMouseEnter={() => soundManager.play('hover')}\n            >\n              {card.isFlipped || card.isMatched ? (\n                <div className=\"memory-card-content\">\n                  <img \n                    src={getServiceIconUrl(card.path)} \n                    alt={card.service} \n                    onError={(e) => {\n                      e.target.onerror = null;\n                      e.target.src = `${process.env.PUBLIC_URL}/azure-icons/default.svg`;\n                    }}\n                  />\n                  <div className=\"memory-card-text\">{card.service}</div>\n                </div>\n              ) : (\n                <span>?</span>\n              )}\n            </div>\n          );\n        } else {\n          // Add empty cells to complete the grid if needed\n          grid.push(\n            <div key={`empty-${i}`} className=\"memory-game-card empty\"></div>\n          );\n        }\n      }\n    }\n    \n    return grid;\n  };\n\n  return (\n    <div className=\"gameCanvas-container\">\n      <h1 className=\"gameCanvas-game-title\">Azure Icons Memory</h1>\n      \n      <div className=\"gameCanvas-game-content\">\n        <div className=\"gameCanvas-canvas-wrapper\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n          <div className=\"memory-game-timer\">TIMER: {formatTime(timeLeft)}</div>\n          \n          <div className=\"memory-game-grid\">\n            {renderGrid()}\n          </div>\n          \n          {gameOver && (\n            <div className=\"gameCanvas-game-over\">\n              <h3>\n                {gameState.matchedPairs.length === 12 ? 'Congratulations!' : 'Time\\'s Up!'}\n              </h3>\n              <p>\n                {gameState.matchedPairs.length === 12 \n                  ? `You found all matches with ${formatTime(timeLeft)} remaining!` \n                  : `You found ${gameState.matchedPairs.length} out of 12 matches.`}\n              </p>\n              <button \n                onClick={() => {\n                  soundManager.play('select');\n                  initGame();\n                }}\n              >\n                Play Again\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IconsMemoryGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,0BAA0B;AACjC,SACEC,mBAAmB,EACnBC,UAAU,EACVC,cAAc,EACdC,iBAAiB,QACZ,0BAA0B;AACjC,SAASC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,MAAMG,mBAAmB,CAAC,CAAC,CAAC;EACvE,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMoB,QAAQ,GAAGlB,WAAW,CAAC,MAAM;IACjC,MAAMmB,YAAY,GAAGlB,mBAAmB,CAAC,CAAC;IAC1CU,YAAY,CAACQ,YAAY,CAAC;IAC1BN,WAAW,CAAC,IAAI,CAAC;IACjBE,cAAc,CAAC,IAAI,CAAC;IACpBE,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,eAAe,GAAIC,KAAK,IAAK;IACjC;IACA,IACEX,SAAS,CAACY,QAAQ,IAClBZ,SAAS,CAACa,YAAY,CAACC,MAAM,IAAI,CAAC,IAClCd,SAAS,CAACe,KAAK,CAACJ,KAAK,CAAC,CAACK,SAAS,IAChChB,SAAS,CAACe,KAAK,CAACJ,KAAK,CAAC,CAACM,SAAS,EAChC;MACA;IACF;;IAEA;IACAtB,YAAY,CAACuB,IAAI,CAAC,QAAQ,CAAC;;IAE3B;IACAjB,YAAY,CAACkB,SAAS,IAAI;MACxB;MACA,MAAMC,YAAY,GAAGD,SAAS,CAACJ,KAAK,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAC/CA,CAAC,KAAKZ,KAAK,GAAG;QAAE,GAAGW,IAAI;QAAEN,SAAS,EAAE;MAAK,CAAC,GAAGM,IAC/C,CAAC;;MAED;MACA,MAAME,mBAAmB,GAAG,CAAC,GAAGL,SAAS,CAACN,YAAY,EAAEM,SAAS,CAACJ,KAAK,CAACJ,KAAK,CAAC,CAAC;;MAE/E;MACA,MAAMc,gBAAgB,GAAGD,mBAAmB,CAACV,MAAM,KAAK,CAAC;MAEzD,OAAO;QACL,GAAGK,SAAS;QACZJ,KAAK,EAAEK,YAAY;QACnBP,YAAY,EAAEW,mBAAmB;QACjCZ,QAAQ,EAAEa,gBAAgB,CAAC;MAC7B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;;EAED;EACApC,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,CAACa,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;MACvC,MAAM,CAACY,SAAS,EAAEC,UAAU,CAAC,GAAG3B,SAAS,CAACa,YAAY;;MAEtD;MACA,MAAMe,OAAO,GAAGF,SAAS,CAACG,OAAO,KAAKF,UAAU,CAACE,OAAO;MAExD,IAAID,OAAO,EAAE;QACX;QACAjC,YAAY,CAACuB,IAAI,CAAC,SAAS,CAAC;;QAE5B;QACAjB,YAAY,CAACkB,SAAS,IAAI;UACxB;UACA,MAAMC,YAAY,GAAGD,SAAS,CAACJ,KAAK,CAACM,GAAG,CAACC,IAAI,IAC3CA,IAAI,CAACO,OAAO,KAAKH,SAAS,CAACG,OAAO,GAAG;YAAE,GAAGP,IAAI;YAAEL,SAAS,EAAE;UAAK,CAAC,GAAGK,IACtE,CAAC;;UAED;UACA,MAAMQ,mBAAmB,GAAG,CAAC,GAAGX,SAAS,CAACY,YAAY,EAAEL,SAAS,CAACG,OAAO,CAAC;;UAE1E;UACA,MAAMG,QAAQ,GAAGvC,cAAc,CAACqC,mBAAmB,EAAE,EAAE,CAAC,CAAC,CAAC;;UAE1D,IAAIE,QAAQ,EAAE;YACZ;YACArC,YAAY,CAACuB,IAAI,CAAC,aAAa,CAAC;YAChCX,WAAW,CAAC,IAAI,CAAC;UACnB;UAEA,OAAO;YACL,GAAGY,SAAS;YACZJ,KAAK,EAAEK,YAAY;YACnBP,YAAY,EAAE,EAAE;YAChBkB,YAAY,EAAED,mBAAmB;YACjClB,QAAQ,EAAE;UACZ,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAjB,YAAY,CAACuB,IAAI,CAAC,WAAW,CAAC;;QAE9B;QACAe,UAAU,CAAC,MAAM;UACfhC,YAAY,CAACkB,SAAS,IAAI;YACxB;YACA,MAAMC,YAAY,GAAGD,SAAS,CAACJ,KAAK,CAACM,GAAG,CAACC,IAAI,IAC3CA,IAAI,CAACX,KAAK,KAAKe,SAAS,CAACf,KAAK,IAAIW,IAAI,CAACX,KAAK,KAAKgB,UAAU,CAAChB,KAAK,GAC7D;cAAE,GAAGW,IAAI;cAAEN,SAAS,EAAE;YAAM,CAAC,GAC7BM,IACN,CAAC;YAED,OAAO;cACL,GAAGH,SAAS;cACZJ,KAAK,EAAEK,YAAY;cACnBP,YAAY,EAAE,EAAE;cAChBD,QAAQ,EAAE;YACZ,CAAC;UACH,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACF;EACF,CAAC,EAAE,CAACZ,SAAS,CAACa,YAAY,CAAC,CAAC;;EAE5B;EACAxB,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,WAAW,IAAIE,QAAQ,EAAE;IAE9B,MAAM4B,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9BhC,WAAW,CAACiC,IAAI,IAAI;QAClB,IAAIA,IAAI,IAAI,CAAC,EAAE;UACbC,aAAa,CAACH,KAAK,CAAC;UACpB3B,WAAW,CAAC,IAAI,CAAC;UACjB,OAAO,CAAC;QACV;QACA,OAAO6B,IAAI,GAAG,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACH,KAAK,CAAC;EACnC,CAAC,EAAE,CAAC9B,WAAW,EAAEE,QAAQ,CAAC,CAAC;;EAE3B;EACAjB,SAAS,CAAC,MAAM;IACdmB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM8B,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,IAAI,GAAG,EAAE;IACf,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiB,UAAU,EAAEjB,CAAC,EAAE,EAAE;MACnC,IAAIA,CAAC,KAAK,EAAE,EAAE;QAAE;QACdgB,IAAI,CAACE,IAAI,cACP5C,OAAA;UAEE6C,SAAS,EAAC,mBAAmB;UAC7BC,OAAO,EAAEA,CAAA,KAAM;YACbhD,YAAY,CAACuB,IAAI,CAAC,QAAQ,CAAC;YAC3BV,QAAQ,CAAC,CAAC;UACZ,CAAE;UAAAoC,QAAA,EACH;QAED,GARM,OAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQR,CACP,CAAC;MACH,CAAC,MAAM;QACL,MAAMC,SAAS,GAAG1B,CAAC,GAAG,EAAE,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,CAAC;QACtC,IAAI0B,SAAS,GAAGjD,SAAS,CAACe,KAAK,CAACD,MAAM,EAAE;UACtC,MAAMQ,IAAI,GAAGtB,SAAS,CAACe,KAAK,CAACkC,SAAS,CAAC;UACvCV,IAAI,CAACE,IAAI,cACP5C,OAAA;YAEE6C,SAAS,EAAE,oBAAoBpB,IAAI,CAACN,SAAS,IAAIM,IAAI,CAACL,SAAS,GAAG,SAAS,GAAG,EAAE,EAAG;YACnF0B,OAAO,EAAEA,CAAA,KAAMjC,eAAe,CAACuC,SAAS,CAAE;YAC1CC,YAAY,EAAEA,CAAA,KAAMvD,YAAY,CAACuB,IAAI,CAAC,OAAO,CAAE;YAAA0B,QAAA,EAE9CtB,IAAI,CAACN,SAAS,IAAIM,IAAI,CAACL,SAAS,gBAC/BpB,OAAA;cAAK6C,SAAS,EAAC,qBAAqB;cAAAE,QAAA,gBAClC/C,OAAA;gBACEsD,GAAG,EAAEzD,iBAAiB,CAAC4B,IAAI,CAAC8B,IAAI,CAAE;gBAClCC,GAAG,EAAE/B,IAAI,CAACO,OAAQ;gBAClByB,OAAO,EAAGC,CAAC,IAAK;kBACdA,CAAC,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI;kBACvBF,CAAC,CAACC,MAAM,CAACL,GAAG,GAAG,GAAGO,OAAO,CAACC,GAAG,CAACC,UAAU,0BAA0B;gBACpE;cAAE;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eACFnD,OAAA;gBAAK6C,SAAS,EAAC,kBAAkB;gBAAAE,QAAA,EAAEtB,IAAI,CAACO;cAAO;gBAAAgB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnD,CAAC,gBAENnD,OAAA;cAAA+C,QAAA,EAAM;YAAC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UACd,GAnBI1B,IAAI,CAACuC,EAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoBT,CACP,CAAC;QACH,CAAC,MAAM;UACL;UACAT,IAAI,CAACE,IAAI,cACP5C,OAAA;YAAwB6C,SAAS,EAAC;UAAwB,GAAhD,SAASnB,CAAC,EAAE;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA0C,CAClE,CAAC;QACH;MACF;IACF;IAEA,OAAOT,IAAI;EACb,CAAC;EAED,oBACE1C,OAAA;IAAK6C,SAAS,EAAC,sBAAsB;IAAAE,QAAA,gBACnC/C,OAAA;MAAI6C,SAAS,EAAC,uBAAuB;MAAAE,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7DnD,OAAA;MAAK6C,SAAS,EAAC,yBAAyB;MAAAE,QAAA,eACtC/C,OAAA;QAAK6C,SAAS,EAAC,2BAA2B;QAACoB,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,aAAa,EAAE,QAAQ;UAAEC,UAAU,EAAE,QAAQ;UAAEC,cAAc,EAAE;QAAS,CAAE;QAAAtB,QAAA,gBAC7I/C,OAAA;UAAK6C,SAAS,EAAC,mBAAmB;UAAAE,QAAA,GAAC,SAAO,EAACpD,UAAU,CAACU,QAAQ,CAAC;QAAA;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAEtEnD,OAAA;UAAK6C,SAAS,EAAC,kBAAkB;UAAAE,QAAA,EAC9BN,UAAU,CAAC;QAAC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC,EAEL1C,QAAQ,iBACPT,OAAA;UAAK6C,SAAS,EAAC,sBAAsB;UAAAE,QAAA,gBACnC/C,OAAA;YAAA+C,QAAA,EACG5C,SAAS,CAAC+B,YAAY,CAACjB,MAAM,KAAK,EAAE,GAAG,kBAAkB,GAAG;UAAa;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxE,CAAC,eACLnD,OAAA;YAAA+C,QAAA,EACG5C,SAAS,CAAC+B,YAAY,CAACjB,MAAM,KAAK,EAAE,GACjC,8BAA8BtB,UAAU,CAACU,QAAQ,CAAC,aAAa,GAC/D,aAAaF,SAAS,CAAC+B,YAAY,CAACjB,MAAM;UAAqB;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClE,CAAC,eACJnD,OAAA;YACE8C,OAAO,EAAEA,CAAA,KAAM;cACbhD,YAAY,CAACuB,IAAI,CAAC,QAAQ,CAAC;cAC3BV,QAAQ,CAAC,CAAC;YACZ,CAAE;YAAAoC,QAAA,EACH;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjD,EAAA,CA5OID,eAAe;AAAAqE,EAAA,GAAfrE,eAAe;AA8OrB,eAAeA,eAAe;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}