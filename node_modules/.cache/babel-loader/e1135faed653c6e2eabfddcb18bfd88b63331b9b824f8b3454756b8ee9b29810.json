{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, MarkerType, Handle } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSServiceNode = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(motion.div, {\n  className: `aws-service-node ${data.isMissing ? 'missing' : ''}`,\n  initial: {\n    scale: 0,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1\n  },\n  exit: {\n    scale: 0,\n    opacity: 0\n  },\n  whileHover: {\n    scale: 1.1\n  },\n  transition: {\n    type: \"spring\",\n    stiffness: 300\n  },\n  children: [/*#__PURE__*/_jsxDEV(Handle, {\n    type: \"target\",\n    position: \"top\",\n    id: `${data.id}-target`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-content\",\n    children: [data.isMissing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missing-service-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.icon,\n      alt: data.label,\n      className: \"service-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"service-label\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Handle, {\n    type: \"source\",\n    position: \"bottom\",\n    id: `${data.id}-source`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = AWSServiceNode;\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\nconst createNodeId = serviceName => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\nconst AWSArchitectureDisplay = ({\n  architecture,\n  currentQuestion\n}) => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  useEffect(() => {\n    if (!architecture) return;\n    const newNodes = [];\n    const newEdges = [];\n    const nodePositions = {};\n    let xPosition = 0;\n\n    // First, create all nodes\n    architecture.services.forEach((service, index) => {\n      const nodeId = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      const node = {\n        id: nodeId,\n        type: 'awsService',\n        position: {\n          x: xPosition,\n          y: 100\n        },\n        data: {\n          label: service.name,\n          icon: service.icon,\n          isMissing: service.name.toLowerCase().includes('missing')\n        }\n      };\n      newNodes.push(node);\n      nodePositions[nodeId] = node.position;\n      xPosition += 150; // Increment x position for next node\n    });\n\n    // Then create all edges from the connections\n    if (architecture.connections) {\n      architecture.connections.forEach(conn => {\n        const fromId = typeof conn.from === 'string' ? conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n        const toId = typeof conn.to === 'string' ? conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n\n        // Only create edge if both nodes exist\n        if (nodePositions[fromId] && nodePositions[toId]) {\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'smoothstep',\n            animated: true,\n            style: {\n              stroke: '#4FD1C5',\n              strokeWidth: 2\n            },\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            }\n          });\n        } else {\n          console.warn(`Cannot create edge: ${fromId} -> ${toId}, one or both nodes missing`);\n        }\n      });\n    }\n    console.log('Nodes:', newNodes);\n    console.log('Edges:', newEdges);\n    console.log('Connections:', architecture.connections);\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      attributionPosition: \"bottom-left\",\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"qOdGaiImnCja3mNU5uxxCrNYw9I=\");\n_c2 = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"AWSServiceNode\");\n$RefreshReg$(_c2, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","MarkerType","Handle","motion","getCachedServiceIcon","jsxDEV","_jsxDEV","AWSServiceNode","data","div","className","isMissing","initial","scale","opacity","animate","exit","whileHover","transition","type","stiffness","children","position","id","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","label","_c","nodeTypes","awsService","createNodeId","serviceName","console","error","toLowerCase","replace","AWSArchitectureDisplay","architecture","currentQuestion","_s","nodes","setNodes","edges","setEdges","newNodes","newEdges","nodePositions","xPosition","services","forEach","service","index","nodeId","name","node","x","y","includes","push","connections","conn","fromId","from","toId","to","source","target","animated","style","stroke","strokeWidth","markerEnd","ArrowClosed","warn","log","height","width","fitView","attributionPosition","_c2","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactFlow, { \n  Background, \n  Controls, \n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  MarkerType,\n  Handle\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst AWSServiceNode = ({ data }) => (\n  <motion.div\n    className={`aws-service-node ${data.isMissing ? 'missing' : ''}`}\n    initial={{ scale: 0, opacity: 0 }}\n    animate={{ scale: 1, opacity: 1 }}\n    exit={{ scale: 0, opacity: 0 }}\n    whileHover={{ scale: 1.1 }}\n    transition={{ type: \"spring\", stiffness: 300 }}\n  >\n    <Handle \n      type=\"target\" \n      position=\"top\" \n      id={`${data.id}-target`}\n      className=\"handle\"\n    />\n    <div className=\"node-content\">\n      {data.isMissing ? (\n        <div className=\"missing-service-placeholder\">\n          <span>?</span>\n        </div>\n      ) : (\n        <img src={data.icon} alt={data.label} className=\"service-icon\" />\n      )}\n      <span className=\"service-label\">{data.label}</span>\n    </div>\n    <Handle \n      type=\"source\" \n      position=\"bottom\" \n      id={`${data.id}-source`}\n      className=\"handle\"\n    />\n  </motion.div>\n);\n\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\n\nconst createNodeId = (serviceName) => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\n\nconst AWSArchitectureDisplay = ({ architecture, currentQuestion }) => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  useEffect(() => {\n    if (!architecture) return;\n\n    const newNodes = [];\n    const newEdges = [];\n    const nodePositions = {};\n    let xPosition = 0;\n\n    // First, create all nodes\n    architecture.services.forEach((service, index) => {\n      const nodeId = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      const node = {\n        id: nodeId,\n        type: 'awsService',\n        position: { x: xPosition, y: 100 },\n        data: {\n          label: service.name,\n          icon: service.icon,\n          isMissing: service.name.toLowerCase().includes('missing')\n        }\n      };\n      newNodes.push(node);\n      nodePositions[nodeId] = node.position;\n      xPosition += 150; // Increment x position for next node\n    });\n\n    // Then create all edges from the connections\n    if (architecture.connections) {\n      architecture.connections.forEach((conn) => {\n        const fromId = typeof conn.from === 'string' ? \n          conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : \n          conn.from.id;\n        const toId = typeof conn.to === 'string' ? \n          conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : \n          conn.to.id;\n\n        // Only create edge if both nodes exist\n        if (nodePositions[fromId] && nodePositions[toId]) {\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'smoothstep',\n            animated: true,\n            style: { stroke: '#4FD1C5', strokeWidth: 2 },\n            markerEnd: { type: MarkerType.ArrowClosed }\n          });\n        } else {\n          console.warn(`Cannot create edge: ${fromId} -> ${toId}, one or both nodes missing`);\n        }\n      });\n    }\n\n    console.log('Nodes:', newNodes);\n    console.log('Edges:', newEdges);\n    console.log('Connections:', architecture.connections);\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture]);\n\n  return (\n    <div style={{ height: '400px', width: '100%' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        nodeTypes={nodeTypes}\n        fitView\n        attributionPosition=\"bottom-left\"\n      >\n        <Background />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}