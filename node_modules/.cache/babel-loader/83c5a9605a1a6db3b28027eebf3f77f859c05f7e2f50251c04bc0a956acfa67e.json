{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\n/**\n * Provides the ParallelQueryExecutionContext.\n * This class is capable of handling parallelized queries and derives from ParallelQueryExecutionContextBase.\n * @hidden\n */\nexport class ParallelQueryExecutionContext extends ParallelQueryExecutionContextBase {\n  // Instance members are inherited\n  // Overriding documentProducerComparator for ParallelQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers using the min value of the corresponding target partition.\n   * @returns Comparator Function\n   * @hidden\n   */\n  documentProducerComparator(docProd1, docProd2) {\n    return docProd1.generation - docProd2.generation;\n  }\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  async fetchMore(diagnosticNode) {\n    try {\n      // Buffer document producers and fill buffer from the queue\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue();\n      // Drain buffered items\n      return this.drainBufferedItems();\n    } catch (error) {\n      // Handle any errors that occur during fetching\n      console.error(\"Error fetching more documents:\", error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["ParallelQueryExecutionContextBase","ParallelQueryExecutionContext","documentProducerComparator","docProd1","docProd2","generation","fetchMore","diagnosticNode","bufferDocumentProducers","fillBufferFromBufferQueue","drainBufferedItems","error","console"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/queryExecutionContext/parallelQueryExecutionContext.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DocumentProducer } from \"./documentProducer\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\nimport { Response } from \"../request\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/**\n * Provides the ParallelQueryExecutionContext.\n * This class is capable of handling parallelized queries and derives from ParallelQueryExecutionContextBase.\n * @hidden\n */\nexport class ParallelQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for ParallelQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers using the min value of the corresponding target partition.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer,\n  ): number {\n    return docProd1.generation - docProd2.generation;\n  }\n\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    try {\n      // Buffer document producers and fill buffer from the queue\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue();\n\n      // Drain buffered items\n      return this.drainBufferedItems();\n    } catch (error) {\n      // Handle any errors that occur during fetching\n      console.error(\"Error fetching more documents:\", error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,iCAAiC,QAAQ,qCAAqC;AAIvF;;;;;AAKA,OAAM,MAAOC,6BACX,SAAQD,iCAAiC;EAGzC;EAEA;EACA;;;;;EAKOE,0BAA0BA,CAC/BC,QAA0B,EAC1BC,QAA0B;IAE1B,OAAOD,QAAQ,CAACE,UAAU,GAAGD,QAAQ,CAACC,UAAU;EAClD;EAEA;;;;;;EAMO,MAAMC,SAASA,CAACC,cAAuC;IAC5D,IAAI;MACF;MACA,MAAM,IAAI,CAACC,uBAAuB,CAACD,cAAc,CAAC;MAClD,MAAM,IAAI,CAACE,yBAAyB,EAAE;MAEtC;MACA,OAAO,IAAI,CAACC,kBAAkB,EAAE;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}