{"ast":null,"code":"import { CosmosClient } from \"@azure/cosmos\";\nclass CosmosDBService {\n  constructor() {\n    this.endpoint = process.env.REACT_APP_COSMOS_ENDPOINT;\n    this.key = process.env.REACT_APP_COSMOS_KEY;\n    this.databaseId = process.env.REACT_APP_COSMOS_DATABASE_ID || \"azure_learning_games\";\n    this.containerId = process.env.REACT_APP_COSMOS_CONTAINER_ID || \"game_scores\";\n    this.isConfigured = this.validateConfig();\n    if (this.isConfigured) {\n      try {\n        this.client = new CosmosClient({\n          endpoint: this.endpoint,\n          key: this.key\n        });\n        this.database = this.client.database(this.databaseId);\n        this.container = this.database.container(this.containerId);\n        console.log(\"CosmosDB service initialized successfully\");\n      } catch (error) {\n        console.error(\"Failed to initialize CosmosDB client:\", error);\n        this.isConfigured = false;\n      }\n    } else {\n      console.warn(\"CosmosDB service not properly configured - saving scores will be disabled\");\n    }\n  }\n  validateConfig() {\n    // Check if we have valid configuration\n    if (!this.endpoint || this.endpoint === \"your_cosmos_db_endpoint\" || !this.endpoint.startsWith(\"https://\") || !this.key || this.key === \"your_cosmos_db_key\") {\n      return false;\n    }\n    return true;\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    if (!this.isConfigured) {\n      console.log(`[Mock CosmosDB] Would save score: ${nickname}, ${gameType}, ${score}`);\n      return {\n        id: \"mock-id\",\n        success: false,\n        message: \"CosmosDB not configured\"\n      };\n    }\n    try {\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        id: `${nickname}_${gameType}_${timestamp}`,\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata\n      };\n      const {\n        resource: createdItem\n      } = await this.container.items.create(scoreData);\n      console.log(`Successfully saved score for ${nickname} in ${gameType}`);\n      return createdItem;\n    } catch (error) {\n      console.error(\"Error saving score to CosmosDB:\", error);\n      // Return a mock response so the game continues\n      return {\n        id: \"error-id\",\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getLeaderboard(gameType, limit = 10) {\n    if (!this.isConfigured) {\n      console.log(`[Mock CosmosDB] Would get leaderboard for: ${gameType}`);\n      return [{\n        nickname: \"Example\",\n        score: 100,\n        timestamp: new Date().toISOString()\n      }];\n    }\n    try {\n      const querySpec = {\n        query: \"SELECT * FROM c WHERE c.gameType = @gameType ORDER BY c.score DESC OFFSET 0 LIMIT @limit\",\n        parameters: [{\n          name: \"@gameType\",\n          value: gameType\n        }, {\n          name: \"@limit\",\n          value: limit\n        }]\n      };\n      const {\n        resources\n      } = await this.container.items.query(querySpec).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error(\"Error retrieving leaderboard from CosmosDB:\", error);\n      // Return an empty array so the game can continue\n      return [];\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosClient","CosmosDBService","constructor","endpoint","process","env","REACT_APP_COSMOS_ENDPOINT","key","REACT_APP_COSMOS_KEY","databaseId","REACT_APP_COSMOS_DATABASE_ID","containerId","REACT_APP_COSMOS_CONTAINER_ID","isConfigured","validateConfig","client","database","container","console","log","error","warn","startsWith","saveGameScore","nickname","gameType","score","metadata","id","success","message","timestamp","Date","toISOString","scoreData","resource","createdItem","items","create","getLeaderboard","limit","querySpec","query","parameters","name","value","resources","fetchAll"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["import { CosmosClient } from \"@azure/cosmos\";\n\nclass CosmosDBService {\n    constructor() {\n        this.endpoint = process.env.REACT_APP_COSMOS_ENDPOINT;\n        this.key = process.env.REACT_APP_COSMOS_KEY;\n        this.databaseId = process.env.REACT_APP_COSMOS_DATABASE_ID || \"azure_learning_games\";\n        this.containerId = process.env.REACT_APP_COSMOS_CONTAINER_ID || \"game_scores\";\n        \n        this.isConfigured = this.validateConfig();\n        \n        if (this.isConfigured) {\n            try {\n                this.client = new CosmosClient({ endpoint: this.endpoint, key: this.key });\n                this.database = this.client.database(this.databaseId);\n                this.container = this.database.container(this.containerId);\n                console.log(\"CosmosDB service initialized successfully\");\n            } catch (error) {\n                console.error(\"Failed to initialize CosmosDB client:\", error);\n                this.isConfigured = false;\n            }\n        } else {\n            console.warn(\"CosmosDB service not properly configured - saving scores will be disabled\");\n        }\n    }\n    \n    validateConfig() {\n        // Check if we have valid configuration\n        if (!this.endpoint || this.endpoint === \"your_cosmos_db_endpoint\" || \n            !this.endpoint.startsWith(\"https://\") || \n            !this.key || this.key === \"your_cosmos_db_key\") {\n            return false;\n        }\n        return true;\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        if (!this.isConfigured) {\n            console.log(`[Mock CosmosDB] Would save score: ${nickname}, ${gameType}, ${score}`);\n            return { id: \"mock-id\", success: false, message: \"CosmosDB not configured\" };\n        }\n        \n        try {\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                id: `${nickname}_${gameType}_${timestamp}`,\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata\n            };\n            \n            const { resource: createdItem } = await this.container.items.create(scoreData);\n            console.log(`Successfully saved score for ${nickname} in ${gameType}`);\n            return createdItem;\n        } catch (error) {\n            console.error(\"Error saving score to CosmosDB:\", error);\n            // Return a mock response so the game continues\n            return { id: \"error-id\", success: false, error: error.message };\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 10) {\n        if (!this.isConfigured) {\n            console.log(`[Mock CosmosDB] Would get leaderboard for: ${gameType}`);\n            return [{ nickname: \"Example\", score: 100, timestamp: new Date().toISOString() }];\n        }\n        \n        try {\n            const querySpec = {\n                query: \"SELECT * FROM c WHERE c.gameType = @gameType ORDER BY c.score DESC OFFSET 0 LIMIT @limit\",\n                parameters: [\n                    { name: \"@gameType\", value: gameType },\n                    { name: \"@limit\", value: limit }\n                ]\n            };\n            \n            const { resources } = await this.container.items.query(querySpec).fetchAll();\n            return resources;\n        } catch (error) {\n            console.error(\"Error retrieving leaderboard from CosmosDB:\", error);\n            // Return an empty array so the game can continue\n            return [];\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAE5C,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;IACrD,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB;IAC3C,IAAI,CAACC,UAAU,GAAGL,OAAO,CAACC,GAAG,CAACK,4BAA4B,IAAI,sBAAsB;IACpF,IAAI,CAACC,WAAW,GAAGP,OAAO,CAACC,GAAG,CAACO,6BAA6B,IAAI,aAAa;IAE7E,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IAEzC,IAAI,IAAI,CAACD,YAAY,EAAE;MACnB,IAAI;QACA,IAAI,CAACE,MAAM,GAAG,IAAIf,YAAY,CAAC;UAAEG,QAAQ,EAAE,IAAI,CAACA,QAAQ;UAAEI,GAAG,EAAE,IAAI,CAACA;QAAI,CAAC,CAAC;QAC1E,IAAI,CAACS,QAAQ,GAAG,IAAI,CAACD,MAAM,CAACC,QAAQ,CAAC,IAAI,CAACP,UAAU,CAAC;QACrD,IAAI,CAACQ,SAAS,GAAG,IAAI,CAACD,QAAQ,CAACC,SAAS,CAAC,IAAI,CAACN,WAAW,CAAC;QAC1DO,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC7D,IAAI,CAACP,YAAY,GAAG,KAAK;MAC7B;IACJ,CAAC,MAAM;MACHK,OAAO,CAACG,IAAI,CAAC,2EAA2E,CAAC;IAC7F;EACJ;EAEAP,cAAcA,CAAA,EAAG;IACb;IACA,IAAI,CAAC,IAAI,CAACX,QAAQ,IAAI,IAAI,CAACA,QAAQ,KAAK,yBAAyB,IAC7D,CAAC,IAAI,CAACA,QAAQ,CAACmB,UAAU,CAAC,UAAU,CAAC,IACrC,CAAC,IAAI,CAACf,GAAG,IAAI,IAAI,CAACA,GAAG,KAAK,oBAAoB,EAAE;MAChD,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf;EAEA,MAAMgB,aAAaA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC1D,IAAI,CAAC,IAAI,CAACd,YAAY,EAAE;MACpBK,OAAO,CAACC,GAAG,CAAC,qCAAqCK,QAAQ,KAAKC,QAAQ,KAAKC,KAAK,EAAE,CAAC;MACnF,OAAO;QAAEE,EAAE,EAAE,SAAS;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA0B,CAAC;IAChF;IAEA,IAAI;MACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1C,MAAMC,SAAS,GAAG;QACdN,EAAE,EAAE,GAAGJ,QAAQ,IAAIC,QAAQ,IAAIM,SAAS,EAAE;QAC1CP,QAAQ;QACRC,QAAQ;QACRC,KAAK;QACLK,SAAS;QACT,GAAGJ;MACP,CAAC;MAED,MAAM;QAAEQ,QAAQ,EAAEC;MAAY,CAAC,GAAG,MAAM,IAAI,CAACnB,SAAS,CAACoB,KAAK,CAACC,MAAM,CAACJ,SAAS,CAAC;MAC9EhB,OAAO,CAACC,GAAG,CAAC,gCAAgCK,QAAQ,OAAOC,QAAQ,EAAE,CAAC;MACtE,OAAOW,WAAW;IACtB,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD;MACA,OAAO;QAAEQ,EAAE,EAAE,UAAU;QAAEC,OAAO,EAAE,KAAK;QAAET,KAAK,EAAEA,KAAK,CAACU;MAAQ,CAAC;IACnE;EACJ;EAEA,MAAMS,cAAcA,CAACd,QAAQ,EAAEe,KAAK,GAAG,EAAE,EAAE;IACvC,IAAI,CAAC,IAAI,CAAC3B,YAAY,EAAE;MACpBK,OAAO,CAACC,GAAG,CAAC,8CAA8CM,QAAQ,EAAE,CAAC;MACrE,OAAO,CAAC;QAAED,QAAQ,EAAE,SAAS;QAAEE,KAAK,EAAE,GAAG;QAAEK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAAE,CAAC,CAAC;IACrF;IAEA,IAAI;MACA,MAAMQ,SAAS,GAAG;QACdC,KAAK,EAAE,0FAA0F;QACjGC,UAAU,EAAE,CACR;UAAEC,IAAI,EAAE,WAAW;UAAEC,KAAK,EAAEpB;QAAS,CAAC,EACtC;UAAEmB,IAAI,EAAE,QAAQ;UAAEC,KAAK,EAAEL;QAAM,CAAC;MAExC,CAAC;MAED,MAAM;QAAEM;MAAU,CAAC,GAAG,MAAM,IAAI,CAAC7B,SAAS,CAACoB,KAAK,CAACK,KAAK,CAACD,SAAS,CAAC,CAACM,QAAQ,CAAC,CAAC;MAC5E,OAAOD,SAAS;IACpB,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE;MACA,OAAO,EAAE;IACb;EACJ;AACJ;AAEA,eAAe,IAAInB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}