{"ast":null,"code":"// No need to import CosmosClient anymore\nclass CosmosDBService {\n  constructor() {\n    // Define the function URLs - update with your actual URLs\n    this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n    this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n\n    // Use localStorage in development\n    this.useLocalStorage = process.env.NODE_ENV === 'development' && (!this.saveScoreUrl || !this.getLeaderboardUrl);\n    if (this.useLocalStorage) {\n      console.warn(\"Using localStorage for score storage during development\");\n    } else if (!this.saveScoreUrl || !this.getLeaderboardUrl) {\n      console.warn(\"Azure Functions URLs not configured - using mock data\");\n    } else {\n      console.log(\"Azure Functions API initialized successfully\");\n    }\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log(`[LocalStorage] Saving score: ${nickname}, ${gameType}, ${score}`);\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        id: `${nickname}_${gameType}_${timestamp}`,\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata\n      };\n      const existingScores = JSON.parse(localStorage.getItem('game_scores') || '[]');\n      existingScores.push(scoreData);\n      localStorage.setItem('game_scores', JSON.stringify(existingScores));\n      console.log(\"Score saved to localStorage:\", scoreData);\n      return scoreData;\n    }\n\n    // Use function API in production\n    if (!this.saveScoreUrl) {\n      console.log(`[Mock API] Would save score: ${nickname}, ${gameType}, ${score}`);\n      return {\n        id: \"mock-id\",\n        success: false,\n        message: \"Function API not configured\"\n      };\n    }\n    try {\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        metadata\n      };\n      const response = await fetch(this.saveScoreUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(scoreData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      console.log(`Successfully saved score for ${nickname} in ${gameType}:`, result);\n      return result;\n    } catch (error) {\n      console.error(\"Error saving score to Function API:\", error);\n      return {\n        id: \"error-id\",\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getLeaderboard(gameType, limit = 5) {\n    console.log('getLeaderboard called with:', {\n      gameType,\n      limit\n    });\n    console.log('useLocalStorage:', this.useLocalStorage);\n    console.log('getLeaderboardUrl:', this.getLeaderboardUrl);\n\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log('[LocalStorage] Getting leaderboard for:', gameType);\n      const allScores = JSON.parse(localStorage.getItem('game_scores') || '[]');\n      console.log('All scores from localStorage:', allScores);\n      const leaderboard = allScores.filter(score => score.gameType === gameType).sort((a, b) => b.score - a.score).slice(0, limit);\n      console.log(\"Leaderboard from localStorage:\", leaderboard);\n      return leaderboard;\n    }\n\n    // Use function API in production\n    if (!this.getLeaderboardUrl) {\n      console.warn('Leaderboard URL is not configured:', this.getLeaderboardUrl);\n      return [{\n        nickname: \"Example\",\n        score: 100,\n        timestamp: new Date().toISOString()\n      }];\n    }\n    try {\n      const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n      console.log('Attempting to fetch leaderboard with URL:', url);\n      const response = await fetch(url);\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const text = await response.text();\n      console.log('Raw response:', text);\n      let data;\n      try {\n        data = JSON.parse(text);\n        console.log('Parsed leaderboard data:', data);\n      } catch (parseError) {\n        console.error('Error parsing JSON:', parseError);\n        console.log('Invalid JSON received:', text);\n        throw parseError;\n      }\n      return data;\n    } catch (error) {\n      console.error(\"Error retrieving leaderboard from Function API:\", error);\n      console.error(\"Error details:\", {\n        message: error.message,\n        stack: error.stack\n      });\n      return [];\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosDBService","constructor","saveScoreUrl","process","env","REACT_APP_FUNCTION_SAVE_SCORE_URL","getLeaderboardUrl","REACT_APP_FUNCTION_LEADERBOARD_URL","useLocalStorage","NODE_ENV","console","warn","log","saveGameScore","nickname","gameType","score","metadata","timestamp","Date","toISOString","scoreData","id","existingScores","JSON","parse","localStorage","getItem","push","setItem","stringify","success","message","response","fetch","method","headers","body","ok","Error","status","result","json","error","getLeaderboard","limit","allScores","leaderboard","filter","sort","a","b","slice","url","encodeURIComponent","Object","fromEntries","entries","text","data","parseError","stack"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["// No need to import CosmosClient anymore\nclass CosmosDBService {\n    constructor() {\n        // Define the function URLs - update with your actual URLs\n        this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n        this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n        \n        // Use localStorage in development\n        this.useLocalStorage = process.env.NODE_ENV === 'development' && \n                               (!this.saveScoreUrl || !this.getLeaderboardUrl);\n        \n        if (this.useLocalStorage) {\n            console.warn(\"Using localStorage for score storage during development\");\n        } else if (!this.saveScoreUrl || !this.getLeaderboardUrl) {\n            console.warn(\"Azure Functions URLs not configured - using mock data\");\n        } else {\n            console.log(\"Azure Functions API initialized successfully\");\n        }\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log(`[LocalStorage] Saving score: ${nickname}, ${gameType}, ${score}`);\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                id: `${nickname}_${gameType}_${timestamp}`,\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata\n            };\n            \n            const existingScores = JSON.parse(localStorage.getItem('game_scores') || '[]');\n            existingScores.push(scoreData);\n            localStorage.setItem('game_scores', JSON.stringify(existingScores));\n            \n            console.log(\"Score saved to localStorage:\", scoreData);\n            return scoreData;\n        }\n        \n        // Use function API in production\n        if (!this.saveScoreUrl) {\n            console.log(`[Mock API] Would save score: ${nickname}, ${gameType}, ${score}`);\n            return { id: \"mock-id\", success: false, message: \"Function API not configured\" };\n        }\n        \n        try {\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                metadata\n            };\n            \n            const response = await fetch(this.saveScoreUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(scoreData)\n            });\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const result = await response.json();\n            console.log(`Successfully saved score for ${nickname} in ${gameType}:`, result);\n            return result;\n        } catch (error) {\n            console.error(\"Error saving score to Function API:\", error);\n            return { id: \"error-id\", success: false, error: error.message };\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 5) {\n        console.log('getLeaderboard called with:', { gameType, limit });\n        console.log('useLocalStorage:', this.useLocalStorage);\n        console.log('getLeaderboardUrl:', this.getLeaderboardUrl);\n\n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log('[LocalStorage] Getting leaderboard for:', gameType);\n            const allScores = JSON.parse(localStorage.getItem('game_scores') || '[]');\n            console.log('All scores from localStorage:', allScores);\n            const leaderboard = allScores\n                .filter(score => score.gameType === gameType)\n                .sort((a, b) => b.score - a.score)\n                .slice(0, limit);\n            \n            console.log(\"Leaderboard from localStorage:\", leaderboard);\n            return leaderboard;\n        }\n        \n        // Use function API in production\n        if (!this.getLeaderboardUrl) {\n            console.warn('Leaderboard URL is not configured:', this.getLeaderboardUrl);\n            return [{ nickname: \"Example\", score: 100, timestamp: new Date().toISOString() }];\n        }\n        \n        try {\n            const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n            console.log('Attempting to fetch leaderboard with URL:', url);\n            \n            const response = await fetch(url);\n            console.log('Response status:', response.status);\n            console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const text = await response.text();\n            console.log('Raw response:', text);\n            \n            let data;\n            try {\n                data = JSON.parse(text);\n                console.log('Parsed leaderboard data:', data);\n            } catch (parseError) {\n                console.error('Error parsing JSON:', parseError);\n                console.log('Invalid JSON received:', text);\n                throw parseError;\n            }\n            \n            return data;\n        } catch (error) {\n            console.error(\"Error retrieving leaderboard from Function API:\", error);\n            console.error(\"Error details:\", {\n                message: error.message,\n                stack: error.stack\n            });\n            return [];\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}