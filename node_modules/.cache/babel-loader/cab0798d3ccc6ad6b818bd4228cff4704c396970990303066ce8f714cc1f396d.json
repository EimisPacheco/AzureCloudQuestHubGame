{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureGame = () => {\n  _s();\n  const [architecture, setArchitecture] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    try {\n      const data = await generateArchitecture(difficulty);\n      setArchitecture(data.architecture);\n      setCurrentQuestion(data.question);\n      setServiceOptions(data.options);\n    } catch (error) {\n      console.error('Failed to load architecture:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleServiceSelection = async selectedService => {\n    if (currentQuestion !== null && currentQuestion !== void 0 && currentQuestion.missingServices.includes(selectedService)) {\n      setScore(prev => prev + 1);\n      await loadNextArchitecture();\n    }\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-display\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"level-display\",\n        children: [\"Level: \", difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n        architecture: architecture,\n        missingServices: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.missingServices) || [],\n        onServiceClick: handleServiceSelection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ServiceOptionsPanel, {\n        options: serviceOptions,\n        onSelect: handleServiceSelection,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"HQoHihyXqu22RwqWKZh9WMFIZdU=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","AWSArchitectureDisplay","ServiceOptionsPanel","generateArchitecture","jsxDEV","_jsxDEV","AWSArchitectureGame","_s","architecture","setArchitecture","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","score","setScore","difficulty","setDifficulty","isLoading","setIsLoading","sensors","activationConstraint","distance","loadNextArchitecture","data","question","options","error","console","handleServiceSelection","selectedService","missingServices","includes","prev","handleDragEnd","event","active","over","id","onDragEnd","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onServiceClick","onSelect","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\n\nconst AWSArchitectureGame = () => {\n  const [architecture, setArchitecture] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(TouchSensor)\n  );\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    try {\n      const data = await generateArchitecture(difficulty);\n      setArchitecture(data.architecture);\n      setCurrentQuestion(data.question);\n      setServiceOptions(data.options);\n    } catch (error) {\n      console.error('Failed to load architecture:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleServiceSelection = async (selectedService) => {\n    if (currentQuestion?.missingServices.includes(selectedService)) {\n      setScore(prev => prev + 1);\n      await loadNextArchitecture();\n    }\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n\n  return (\n    <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\n      <div className=\"game-container\">\n        <div className=\"score-display\">Score: {score}</div>\n        <div className=\"level-display\">Level: {difficulty}</div>\n        \n        <AWSArchitectureDisplay \n          architecture={architecture}\n          missingServices={currentQuestion?.missingServices || []}\n          onServiceClick={handleServiceSelection}\n        />\n        \n        <ServiceOptionsPanel \n          options={serviceOptions}\n          onSelect={handleServiceSelection}\n          isLoading={isLoading}\n        />\n      </div>\n    </DndContext>\n  );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}