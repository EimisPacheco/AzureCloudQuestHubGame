{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\nconst generateArchitecture = async difficulty => {\n  const prompt = `Generate an AWS architecture scenario for ${difficulty} level with:\n  - List of AWS services and their connections\n  - A question about missing service\n  - 3 service options including the correct answer\n  - Educational explanation for the correct choice`;\n  const completion = await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: [{\n      role: \"system\",\n      content: \"You are an AWS architecture expert creating educational scenarios.\"\n    }, {\n      role: \"user\",\n      content: prompt\n    }],\n    response_format: {\n      type: \"json_object\"\n    }\n  });\n\n  // Parse and format the AI response\n  const aiResponse = JSON.parse(completion.choices[0].message.content);\n  return {\n    architecture: aiResponse.architecture,\n    question: aiResponse.question,\n    options: aiResponse.options,\n    explanation: aiResponse.explanation\n  };\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","generateArchitecture","difficulty","prompt","completion","chat","completions","create","model","messages","role","content","response_format","type","aiResponse","JSON","parse","choices","message","architecture","question","options","explanation"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\n\nconst generateArchitecture = async (difficulty) => {\n  const prompt = `Generate an AWS architecture scenario for ${difficulty} level with:\n  - List of AWS services and their connections\n  - A question about missing service\n  - 3 service options including the correct answer\n  - Educational explanation for the correct choice`;\n\n  const completion = await openai.chat.completions.create({\n    model: \"gpt-4\",\n    messages: [\n      { \n        role: \"system\", \n        content: \"You are an AWS architecture expert creating educational scenarios.\"\n      },\n      { \n        role: \"user\", \n        content: prompt \n      }\n    ],\n    response_format: { type: \"json_object\" }\n  });\n\n  // Parse and format the AI response\n  const aiResponse = JSON.parse(completion.choices[0].message.content);\n  \n  return {\n    architecture: aiResponse.architecture,\n    question: aiResponse.question,\n    options: aiResponse.options,\n    explanation: aiResponse.explanation\n  };\n};\n\nexport { generateArchitecture }; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AAEF,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,MAAMC,MAAM,GAAG,6CAA6CD,UAAU;AACxE;AACA;AACA;AACA,mDAAmD;EAEjD,MAAME,UAAU,GAAG,MAAMR,MAAM,CAACS,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;IACtDC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,CACR;MACEC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACX,CAAC,EACD;MACED,IAAI,EAAE,MAAM;MACZC,OAAO,EAAER;IACX,CAAC,CACF;IACDS,eAAe,EAAE;MAAEC,IAAI,EAAE;IAAc;EACzC,CAAC,CAAC;;EAEF;EACA,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACZ,UAAU,CAACa,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACP,OAAO,CAAC;EAEpE,OAAO;IACLQ,YAAY,EAAEL,UAAU,CAACK,YAAY;IACrCC,QAAQ,EAAEN,UAAU,CAACM,QAAQ;IAC7BC,OAAO,EAAEP,UAAU,CAACO,OAAO;IAC3BC,WAAW,EAAER,UAAU,CAACQ;EAC1B,CAAC;AACH,CAAC;AAED,SAASrB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}