{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ProtectedDataEncryptionKeyCache } from \"./Cache/ProtectedDataEncryptionKeyCache\";\nimport { KeyEncryptionKeyCache } from \"./Cache/KeyEncryptionKeyCache\";\nimport { EncryptionSettingsCache } from \"./Cache/EncryptionSettingsCache\";\nimport { ClientEncryptionKeyPropertiesCache } from \"./Cache/ClientEncryptionKeyPropertiesCache\";\nimport { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider\";\nimport { Constants } from \"../common/constants\";\n/**\n * Cache manager for encryption related caches.\n * @hidden\n */\nexport class EncryptionManager {\n  constructor(encryptionKeyResolver, cacheTimeToLive) {\n    this.cacheTimeToLive = cacheTimeToLive !== undefined ? cacheTimeToLive : Constants.DefaultEncryptionCacheTimeToLiveInSeconds;\n    const cacheTtlInMs = this.getCacheTTlInMs();\n    this.encryptionKeyStoreProvider = new EncryptionKeyStoreProvider(encryptionKeyResolver, cacheTtlInMs);\n    this.protectedDataEncryptionKeyCache = new ProtectedDataEncryptionKeyCache(cacheTtlInMs);\n    this.keyEncryptionKeyCache = new KeyEncryptionKeyCache();\n    this.encryptionSettingsCache = new EncryptionSettingsCache();\n    this.clientEncryptionKeyPropertiesCache = new ClientEncryptionKeyPropertiesCache();\n  }\n  /**\n   * Converts the EncryptionTimeToLive instance to a number (milliseconds).\n   */\n  getCacheTTlInMs() {\n    const millisecondsPerSecond = 1000;\n    return Number(this.cacheTimeToLive * millisecondsPerSecond);\n  }\n}","map":{"version":3,"names":["ProtectedDataEncryptionKeyCache","KeyEncryptionKeyCache","EncryptionSettingsCache","ClientEncryptionKeyPropertiesCache","EncryptionKeyStoreProvider","Constants","EncryptionManager","constructor","encryptionKeyResolver","cacheTimeToLive","undefined","DefaultEncryptionCacheTimeToLiveInSeconds","cacheTtlInMs","getCacheTTlInMs","encryptionKeyStoreProvider","protectedDataEncryptionKeyCache","keyEncryptionKeyCache","encryptionSettingsCache","clientEncryptionKeyPropertiesCache","millisecondsPerSecond","Number"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/EncryptionManager.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProtectedDataEncryptionKeyCache } from \"./Cache/ProtectedDataEncryptionKeyCache\";\nimport { KeyEncryptionKeyCache } from \"./Cache/KeyEncryptionKeyCache\";\nimport { EncryptionSettingsCache } from \"./Cache/EncryptionSettingsCache\";\nimport { ClientEncryptionKeyPropertiesCache } from \"./Cache/ClientEncryptionKeyPropertiesCache\";\nimport { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider\";\nimport { Constants } from \"../common/constants\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver\";\n/**\n * Cache manager for encryption related caches.\n * @hidden\n */\nexport class EncryptionManager {\n  public cacheTimeToLive: number;\n  public encryptionKeyStoreProvider: EncryptionKeyStoreProvider;\n  public protectedDataEncryptionKeyCache: ProtectedDataEncryptionKeyCache;\n  public keyEncryptionKeyCache: KeyEncryptionKeyCache;\n  public encryptionSettingsCache: EncryptionSettingsCache;\n  public clientEncryptionKeyPropertiesCache: ClientEncryptionKeyPropertiesCache;\n\n  constructor(encryptionKeyResolver: EncryptionKeyResolver, cacheTimeToLive?: number) {\n    this.cacheTimeToLive =\n      cacheTimeToLive !== undefined\n        ? cacheTimeToLive\n        : Constants.DefaultEncryptionCacheTimeToLiveInSeconds;\n    const cacheTtlInMs = this.getCacheTTlInMs();\n    this.encryptionKeyStoreProvider = new EncryptionKeyStoreProvider(\n      encryptionKeyResolver,\n      cacheTtlInMs,\n    );\n    this.protectedDataEncryptionKeyCache = new ProtectedDataEncryptionKeyCache(cacheTtlInMs);\n    this.keyEncryptionKeyCache = new KeyEncryptionKeyCache();\n    this.encryptionSettingsCache = new EncryptionSettingsCache();\n    this.clientEncryptionKeyPropertiesCache = new ClientEncryptionKeyPropertiesCache();\n  }\n\n  /**\n   * Converts the EncryptionTimeToLive instance to a number (milliseconds).\n   */\n  private getCacheTTlInMs(): number {\n    const millisecondsPerSecond = 1000;\n    return Number(this.cacheTimeToLive * millisecondsPerSecond);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,+BAA+B,QAAQ,yCAAyC;AACzF,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,kCAAkC,QAAQ,4CAA4C;AAC/F,SAASC,0BAA0B,QAAQ,8BAA8B;AACzE,SAASC,SAAS,QAAQ,qBAAqB;AAE/C;;;;AAIA,OAAM,MAAOC,iBAAiB;EAQ5BC,YAAYC,qBAA4C,EAAEC,eAAwB;IAChF,IAAI,CAACA,eAAe,GAClBA,eAAe,KAAKC,SAAS,GACzBD,eAAe,GACfJ,SAAS,CAACM,yCAAyC;IACzD,MAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,EAAE;IAC3C,IAAI,CAACC,0BAA0B,GAAG,IAAIV,0BAA0B,CAC9DI,qBAAqB,EACrBI,YAAY,CACb;IACD,IAAI,CAACG,+BAA+B,GAAG,IAAIf,+BAA+B,CAACY,YAAY,CAAC;IACxF,IAAI,CAACI,qBAAqB,GAAG,IAAIf,qBAAqB,EAAE;IACxD,IAAI,CAACgB,uBAAuB,GAAG,IAAIf,uBAAuB,EAAE;IAC5D,IAAI,CAACgB,kCAAkC,GAAG,IAAIf,kCAAkC,EAAE;EACpF;EAEA;;;EAGQU,eAAeA,CAAA;IACrB,MAAMM,qBAAqB,GAAG,IAAI;IAClC,OAAOC,MAAM,CAAC,IAAI,CAACX,eAAe,GAAGU,qBAAqB,CAAC;EAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}