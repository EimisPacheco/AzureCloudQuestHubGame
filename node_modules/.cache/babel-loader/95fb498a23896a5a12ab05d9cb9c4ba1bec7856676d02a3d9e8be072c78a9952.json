{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\";\nimport React from 'react';\nimport { useDroppable } from '@dnd-kit/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureDisplay = ({\n  architecture\n}) => {\n  if (!architecture || !architecture.services) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-container\",\n      children: \"No architecture to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Calculate positions for services\n  const calculateServicePositions = () => {\n    const positions = {};\n    const levels = {};\n\n    // First, determine levels based on connections\n    architecture.connections.forEach(({\n      from,\n      to\n    }) => {\n      if (!levels[from]) levels[from] = 0;\n      levels[to] = (levels[from] || 0) + 1;\n    });\n\n    // Calculate x,y coordinates\n    const levelWidth = 200;\n    const serviceHeight = 100;\n    const maxLevel = Math.max(...Object.values(levels));\n    architecture.services.forEach(service => {\n      const level = levels[service] || 0;\n      const servicesAtLevel = Object.values(levels).filter(l => l === level).length;\n      const index = Object.keys(levels).filter(s => levels[s] === level).indexOf(service);\n      positions[service] = {\n        x: level * levelWidth + 100,\n        y: (index + 1) * serviceHeight\n      };\n    });\n    return positions;\n  };\n  const positions = calculateServicePositions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"architecture-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connections\",\n      width: \"100%\",\n      height: \"100%\",\n      children: architecture.connections.map(({\n        from,\n        to\n      }, index) => {\n        const fromPos = positions[from];\n        const toPos = positions[to];\n        if (fromPos && toPos) {\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromPos.x + 50,\n            y1: fromPos.y + 25,\n            x2: toPos.x + 50,\n            y2: toPos.y + 25,\n            stroke: \"#4FD1C5\",\n            strokeWidth: \"2\"\n          }, `${from}-${to}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), architecture.services.map(service => {\n      const position = positions[service];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"service-node\",\n        style: {\n          position: 'absolute',\n          left: `${position.x}px`,\n          top: `${position.y}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"service-icon\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/aws-icons/${service.toLowerCase().replace(/\\s+/g, '-')}.png`,\n            alt: service,\n            onError: e => {\n              e.target.src = '/aws-icons/default.png'; // Fallback icon\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"service-name\",\n          children: service\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, service, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useDroppable","jsxDEV","_jsxDEV","AWSArchitectureDisplay","architecture","services","className","children","fileName","_jsxFileName","lineNumber","columnNumber","calculateServicePositions","positions","levels","connections","forEach","from","to","levelWidth","serviceHeight","maxLevel","Math","max","Object","values","service","level","servicesAtLevel","filter","l","length","index","keys","s","indexOf","x","y","width","height","map","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","position","style","left","top","src","toLowerCase","replace","alt","onError","e","target","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React from 'react';\nimport { useDroppable } from '@dnd-kit/core';\n\nconst AWSArchitectureDisplay = ({ architecture }) => {\n  if (!architecture || !architecture.services) {\n    return <div className=\"architecture-container\">No architecture to display</div>;\n  }\n\n  // Calculate positions for services\n  const calculateServicePositions = () => {\n    const positions = {};\n    const levels = {};\n    \n    // First, determine levels based on connections\n    architecture.connections.forEach(({ from, to }) => {\n      if (!levels[from]) levels[from] = 0;\n      levels[to] = (levels[from] || 0) + 1;\n    });\n\n    // Calculate x,y coordinates\n    const levelWidth = 200;\n    const serviceHeight = 100;\n    const maxLevel = Math.max(...Object.values(levels));\n    \n    architecture.services.forEach(service => {\n      const level = levels[service] || 0;\n      const servicesAtLevel = Object.values(levels).filter(l => l === level).length;\n      const index = Object.keys(levels).filter(s => levels[s] === level).indexOf(service);\n      \n      positions[service] = {\n        x: level * levelWidth + 100,\n        y: (index + 1) * serviceHeight\n      };\n    });\n\n    return positions;\n  };\n\n  const positions = calculateServicePositions();\n\n  return (\n    <div className=\"architecture-display\">\n      <svg className=\"connections\" width=\"100%\" height=\"100%\">\n        {architecture.connections.map(({ from, to }, index) => {\n          const fromPos = positions[from];\n          const toPos = positions[to];\n          if (fromPos && toPos) {\n            return (\n              <line\n                key={`${from}-${to}-${index}`}\n                x1={fromPos.x + 50}\n                y1={fromPos.y + 25}\n                x2={toPos.x + 50}\n                y2={toPos.y + 25}\n                stroke=\"#4FD1C5\"\n                strokeWidth=\"2\"\n              />\n            );\n          }\n          return null;\n        })}\n      </svg>\n      \n      {architecture.services.map(service => {\n        const position = positions[service];\n        return (\n          <div\n            key={service}\n            className=\"service-node\"\n            style={{\n              position: 'absolute',\n              left: `${position.x}px`,\n              top: `${position.y}px`,\n            }}\n          >\n            <div className=\"service-icon\">\n              <img\n                src={`/aws-icons/${service.toLowerCase().replace(/\\s+/g, '-')}.png`}\n                alt={service}\n                onError={(e) => {\n                  e.target.src = '/aws-icons/default.png'; // Fallback icon\n                }}\n              />\n            </div>\n            <div className=\"service-name\">{service}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}