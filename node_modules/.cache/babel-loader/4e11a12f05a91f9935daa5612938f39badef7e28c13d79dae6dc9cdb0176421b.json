{"ast":null,"code":"import { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variables for the Azure function URL and key\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\nconst FUNCTION_KEY = process.env.REACT_APP_SERVICES_AZURE_FUNCTION_KEY;\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\n\n// Helper function to find the best matching icon for a service\nconst findBestMatchingIcon = serviceName => {\n  // Direct match - check if the exact service name exists in mappings\n  if (SERVICE_MAPPINGS[serviceName]) {\n    return SERVICE_MAPPINGS[serviceName];\n  }\n\n  // Normalize the service name for better matching\n  const normalizedName = serviceName.toLowerCase().replace(/\\s+/g, '');\n\n  // Find closest match by comparing normalized names\n  const closestMatch = Object.keys(SERVICE_MAPPINGS).find(key => {\n    return key.toLowerCase().replace(/\\s+/g, '') === normalizedName;\n  });\n  if (closestMatch) {\n    return SERVICE_MAPPINGS[closestMatch];\n  }\n\n  // If no match found, use a generic path based on service name\n  return `/azure-icons/services/${serviceName.toLowerCase().replace(/\\s+/g, '-')}.svg`;\n};\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n\n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n  try {\n    if (!SERVICES_FUNCTION_URL || !FUNCTION_KEY) {\n      throw new Error('Azure Function URL or key is not configured');\n    }\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await fetch(SERVICES_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-functions-key': FUNCTION_KEY\n      },\n      body: JSON.stringify({/* Add any necessary payload here */})\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('📊 Raw Azure Function response:', data);\n    console.log('📊 Response type:', typeof data);\n    console.log('📊 Response is array:', Array.isArray(data));\n    if (Array.isArray(data)) {\n      console.log('📊 First few items:', data.slice(0, 3));\n    }\n\n    // Format the data to match your expected structure\n    const formattedData = data.map(item => {\n      const iconPath = findBestMatchingIcon(item.service);\n      console.log(`Service: ${item.service} -> Path: ${iconPath}`);\n      return {\n        name: item.service,\n        definition: item.description,\n        path: iconPath\n      };\n    });\n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    console.log('✅ Total service definitions:', formattedData.length);\n\n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    console.error('❌ Error details:', {\n      message: error.message,\n      response: error.response ? {\n        status: error.response.status,\n        data: error.response.data\n      } : 'No response',\n      request: error.request ? 'Request was made but no response received' : 'No request was made'\n    });\n\n    // Fallback to hardcoded data in case of error\n    console.log('⚠️ Using fallback data instead');\n    return [{\n      name: \"Kubernetes Services\",\n      definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n      path: SERVICE_MAPPINGS[\"Kubernetes Services\"] || \"/azure-icons/services/kubernetes-services.svg\"\n    }, {\n      name: \"Cognitive Services\",\n      definition: \"Adds AI capabilities to applications through pre-built APIs\",\n      path: SERVICE_MAPPINGS[\"Cognitive Services\"] || \"/azure-icons/services/cognitive-services.svg\"\n    }, {\n      name: \"Azure Functions\",\n      definition: \"Event-driven, serverless compute service\",\n      path: SERVICE_MAPPINGS[\"Azure Functions\"] || \"/azure-icons/services/azure-functions.svg\"\n    }];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n};\n\n// Remove time bonus logic from score calculation\n// Update the handleServiceSelection function to only use correct/wrong match points\n\nexport const calculateScore = isCorrect => {\n  if (isCorrect) {\n    return 20; // Points for correct match\n  } else {\n    return -5; // Points for wrong match\n  }\n};","map":{"version":3,"names":["SERVICE_MAPPINGS","SERVICES_FUNCTION_URL","process","env","REACT_APP_SERVICES_FUNCTION_URL","FUNCTION_KEY","REACT_APP_SERVICES_AZURE_FUNCTION_KEY","cachedDefinitions","findBestMatchingIcon","serviceName","normalizedName","toLowerCase","replace","closestMatch","Object","keys","find","key","getServiceDefinitions","console","log","length","Error","response","fetch","method","headers","body","JSON","stringify","ok","status","data","json","Array","isArray","slice","formattedData","map","item","iconPath","service","name","definition","description","path","error","message","request","getRandomServices","count","allServices","shuffled","sort","Math","random","getRandomDefinition","services","randomIndex","floor","isGameComplete","matchedServices","totalServices","formatTime","seconds","mins","secs","calculateScore","isCorrect"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/utils/definitionMatchingUtils.js"],"sourcesContent":["import { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variables for the Azure function URL and key\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\nconst FUNCTION_KEY = process.env.REACT_APP_SERVICES_AZURE_FUNCTION_KEY;\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\n\n// Helper function to find the best matching icon for a service\nconst findBestMatchingIcon = (serviceName) => {\n  // Direct match - check if the exact service name exists in mappings\n  if (SERVICE_MAPPINGS[serviceName]) {\n    return SERVICE_MAPPINGS[serviceName];\n  }\n  \n  // Normalize the service name for better matching\n  const normalizedName = serviceName.toLowerCase().replace(/\\s+/g, '');\n  \n  // Find closest match by comparing normalized names\n  const closestMatch = Object.keys(SERVICE_MAPPINGS).find(key => {\n    return key.toLowerCase().replace(/\\s+/g, '') === normalizedName;\n  });\n  \n  if (closestMatch) {\n    return SERVICE_MAPPINGS[closestMatch];\n  }\n  \n  // If no match found, use a generic path based on service name\n  return `/azure-icons/services/${serviceName.toLowerCase().replace(/\\s+/g, '-')}.svg`;\n};\n\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n  \n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n\n  try {\n    if (!SERVICES_FUNCTION_URL || !FUNCTION_KEY) {\n      throw new Error('Azure Function URL or key is not configured');\n    }\n\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await fetch(SERVICES_FUNCTION_URL, {\n      method: 'POST',\n      headers: { \n        'Content-Type': 'application/json',\n        'x-functions-key': FUNCTION_KEY\n      },\n      body: JSON.stringify({ /* Add any necessary payload here */ })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    console.log('📊 Raw Azure Function response:', data);\n    console.log('📊 Response type:', typeof data);\n    console.log('📊 Response is array:', Array.isArray(data));\n    \n    if (Array.isArray(data)) {\n      console.log('📊 First few items:', data.slice(0, 3));\n    }\n    \n    // Format the data to match your expected structure\n    const formattedData = data.map(item => {\n      const iconPath = findBestMatchingIcon(item.service);\n      console.log(`Service: ${item.service} -> Path: ${iconPath}`);\n      \n      return {\n        name: item.service,\n        definition: item.description,\n        path: iconPath\n      };\n    });\n    \n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    console.log('✅ Total service definitions:', formattedData.length);\n    \n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    console.error('❌ Error details:', {\n      message: error.message,\n      response: error.response ? {\n        status: error.response.status,\n        data: error.response.data\n      } : 'No response',\n      request: error.request ? 'Request was made but no response received' : 'No request was made'\n    });\n    \n    // Fallback to hardcoded data in case of error\n    console.log('⚠️ Using fallback data instead');\n    return [\n      {\n        name: \"Kubernetes Services\",\n        definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n        path: SERVICE_MAPPINGS[\"Kubernetes Services\"] || \"/azure-icons/services/kubernetes-services.svg\"\n      },\n      {\n        name: \"Cognitive Services\",\n        definition: \"Adds AI capabilities to applications through pre-built APIs\",\n        path: SERVICE_MAPPINGS[\"Cognitive Services\"] || \"/azure-icons/services/cognitive-services.svg\"\n      },\n      {\n        name: \"Azure Functions\",\n        definition: \"Event-driven, serverless compute service\",\n        path: SERVICE_MAPPINGS[\"Azure Functions\"] || \"/azure-icons/services/azure-functions.svg\"\n      }\n    ];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n};\n\n// Remove time bonus logic from score calculation\n// Update the handleServiceSelection function to only use correct/wrong match points\n\nexport const calculateScore = (isCorrect) => {\n  if (isCorrect) {\n    return 20; // Points for correct match\n  } else {\n    return -5; // Points for wrong match\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}