{"ast":null,"code":"const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App-Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n  BLOCKCHAIN: 'Arch_Blockchain',\n  BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n  MANAGEMENT: 'Arch_Management-Governance',\n  NETWORKING: 'Arch_Networking-Content-Delivery',\n  SECURITY: 'Arch_Security-Identity-Compliance',\n  STORAGE: 'Arch_Storage'\n};\nconst SERVICE_MAPPINGS = {\n  \"Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n  \"S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n  \"CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n  \"Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n  \"RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n  \"EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n  \"DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n  \"Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n  \"VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n  \"ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n  \"ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n  \"CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n  \"API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n  \"Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\"\n};\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Cache for resolved icons\nconst iconCache = new Map();\nconst getServiceIcon = serviceName => {\n  if (!serviceName) {\n    console.error('❌ No service name provided to getServiceIcon');\n    return null;\n  }\n\n  // Remove \"Amazon\" or \"AWS\" prefix if present\n  const cleanedName = serviceName.replace(/^(Amazon|AWS)\\s+/, '').replace(/\\s+/g, ' ').trim();\n  console.log(`🔍 Looking for icon mapping for service: \"${cleanedName}\"`);\n\n  // Find the mapping for this service\n  const iconPath = SERVICE_MAPPINGS[cleanedName];\n\n  // Always construct and log the full URL attempt, even if mapping not found\n  const attemptedUrl = iconPath ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}` : `${S3_BUCKET_URL}${ICONS_BASE_PATH}/[No mapping found for ${cleanedName}]`;\n  console.log(`🔗 Attempted S3 URL:`, attemptedUrl);\n  if (!iconPath) {\n    console.error(`❌ No icon mapping found for service: ${cleanedName}`);\n    return null;\n  }\n  return attemptedUrl;\n};\nconst getCachedServiceIcon = serviceName => {\n  if (iconCache.has(serviceName)) {\n    console.log(`🎯 Cache hit for ${serviceName}:`, iconCache.get(serviceName));\n    return iconCache.get(serviceName);\n  }\n  const iconUrl = getServiceIcon(serviceName);\n  if (iconUrl) {\n    console.log(`💾 Caching icon URL for ${serviceName}:`, iconUrl);\n    iconCache.set(serviceName, iconUrl);\n  }\n  return iconUrl;\n};\n\n// Single export statement for all needed functions and constants\nexport { getCachedServiceIcon, AWS_ICON_CATEGORIES, SERVICE_MAPPINGS };","map":{"version":3,"names":["AWS_ICON_CATEGORIES","ANALYTICS","APP_INTEGRATION","ARTIFICIAL_INTELLIGENCE","BLOCKCHAIN","BUSINESS_APPLICATIONS","COMPUTE","CONTAINERS","DATABASE","DEVELOPER_TOOLS","MANAGEMENT","NETWORKING","SECURITY","STORAGE","SERVICE_MAPPINGS","S3_BUCKET_URL","ICONS_BASE_PATH","iconCache","Map","getServiceIcon","serviceName","console","error","cleanedName","replace","trim","log","iconPath","attemptedUrl","getCachedServiceIcon","has","get","iconUrl","set"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/IconResolver.js"],"sourcesContent":["const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App-Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n  BLOCKCHAIN: 'Arch_Blockchain',\n  BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n  MANAGEMENT: 'Arch_Management-Governance',\n  NETWORKING: 'Arch_Networking-Content-Delivery',\n  SECURITY: 'Arch_Security-Identity-Compliance',\n  STORAGE: 'Arch_Storage'\n};\n\nconst SERVICE_MAPPINGS = {\n  \"Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n  \"S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n  \"CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n  \"Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n  \"RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n  \"EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n  \"DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n  \"Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n  \"VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n  \"ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n  \"ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n  \"CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n  \"API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n  \"Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\"\n};\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Cache for resolved icons\nconst iconCache = new Map();\n\nconst getServiceIcon = (serviceName) => {\n  if (!serviceName) {\n    console.error('❌ No service name provided to getServiceIcon');\n    return null;\n  }\n\n  // Remove \"Amazon\" or \"AWS\" prefix if present\n  const cleanedName = serviceName\n    .replace(/^(Amazon|AWS)\\s+/, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n\n  console.log(`🔍 Looking for icon mapping for service: \"${cleanedName}\"`);\n\n  // Find the mapping for this service\n  const iconPath = SERVICE_MAPPINGS[cleanedName];\n  \n  // Always construct and log the full URL attempt, even if mapping not found\n  const attemptedUrl = iconPath \n    ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`\n    : `${S3_BUCKET_URL}${ICONS_BASE_PATH}/[No mapping found for ${cleanedName}]`;\n    \n  console.log(`🔗 Attempted S3 URL:`, attemptedUrl);\n\n  if (!iconPath) {\n    console.error(`❌ No icon mapping found for service: ${cleanedName}`);\n    return null;\n  }\n\n  return attemptedUrl;\n};\n\nconst getCachedServiceIcon = (serviceName) => {\n  if (iconCache.has(serviceName)) {\n    console.log(`🎯 Cache hit for ${serviceName}:`, iconCache.get(serviceName));\n    return iconCache.get(serviceName);\n  }\n\n  const iconUrl = getServiceIcon(serviceName);\n  if (iconUrl) {\n    console.log(`💾 Caching icon URL for ${serviceName}:`, iconUrl);\n    iconCache.set(serviceName, iconUrl);\n  }\n\n  return iconUrl;\n};\n\n// Single export statement for all needed functions and constants\nexport {\n  getCachedServiceIcon,\n  AWS_ICON_CATEGORIES,\n  SERVICE_MAPPINGS\n}; "],"mappings":"AAAA,MAAMA,mBAAmB,GAAG;EAC1BC,SAAS,EAAE,gBAAgB;EAC3BC,eAAe,EAAE,sBAAsB;EACvCC,uBAAuB,EAAE,8BAA8B;EACvDC,UAAU,EAAE,iBAAiB;EAC7BC,qBAAqB,EAAE,4BAA4B;EACnDC,OAAO,EAAE,cAAc;EACvBC,UAAU,EAAE,iBAAiB;EAC7BC,QAAQ,EAAE,eAAe;EACzBC,eAAe,EAAE,sBAAsB;EACvCC,UAAU,EAAE,4BAA4B;EACxCC,UAAU,EAAE,kCAAkC;EAC9CC,QAAQ,EAAE,mCAAmC;EAC7CC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvB,UAAU,EAAE,iEAAiE;EAC7E,IAAI,EAAE,2DAA2D;EACjE,YAAY,EAAE,mEAAmE;EACjF,qBAAqB,EAAE,0EAA0E;EACjG,KAAK,EAAE,yCAAyC;EAChD,KAAK,EAAE,wCAAwC;EAC/C,UAAU,EAAE,8CAA8C;EAC1D,QAAQ,EAAE,wCAAwC;EAClD,KAAK,EAAE,8EAA8E;EACrF,KAAK,EAAE,iEAAiE;EACxE,aAAa,EAAE,iDAAiD;EAChE,YAAY,EAAE,6DAA6D;EAC3E,aAAa,EAAE,oEAAoE;EACnF,mBAAmB,EAAE;AACvB,CAAC;AAED,MAAMC,aAAa,GAAG,yDAAyD;AAC/E,MAAMC,eAAe,GAAG,uDAAuD;;AAE/E;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE3B,MAAMC,cAAc,GAAIC,WAAW,IAAK;EACtC,IAAI,CAACA,WAAW,EAAE;IAChBC,OAAO,CAACC,KAAK,CAAC,8CAA8C,CAAC;IAC7D,OAAO,IAAI;EACb;;EAEA;EACA,MAAMC,WAAW,GAAGH,WAAW,CAC5BI,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAC/BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBC,IAAI,CAAC,CAAC;EAETJ,OAAO,CAACK,GAAG,CAAC,6CAA6CH,WAAW,GAAG,CAAC;;EAExE;EACA,MAAMI,QAAQ,GAAGb,gBAAgB,CAACS,WAAW,CAAC;;EAE9C;EACA,MAAMK,YAAY,GAAGD,QAAQ,GACzB,GAAGZ,aAAa,GAAGC,eAAe,IAAIW,QAAQ,EAAE,GAChD,GAAGZ,aAAa,GAAGC,eAAe,0BAA0BO,WAAW,GAAG;EAE9EF,OAAO,CAACK,GAAG,CAAC,sBAAsB,EAAEE,YAAY,CAAC;EAEjD,IAAI,CAACD,QAAQ,EAAE;IACbN,OAAO,CAACC,KAAK,CAAC,wCAAwCC,WAAW,EAAE,CAAC;IACpE,OAAO,IAAI;EACb;EAEA,OAAOK,YAAY;AACrB,CAAC;AAED,MAAMC,oBAAoB,GAAIT,WAAW,IAAK;EAC5C,IAAIH,SAAS,CAACa,GAAG,CAACV,WAAW,CAAC,EAAE;IAC9BC,OAAO,CAACK,GAAG,CAAC,oBAAoBN,WAAW,GAAG,EAAEH,SAAS,CAACc,GAAG,CAACX,WAAW,CAAC,CAAC;IAC3E,OAAOH,SAAS,CAACc,GAAG,CAACX,WAAW,CAAC;EACnC;EAEA,MAAMY,OAAO,GAAGb,cAAc,CAACC,WAAW,CAAC;EAC3C,IAAIY,OAAO,EAAE;IACXX,OAAO,CAACK,GAAG,CAAC,2BAA2BN,WAAW,GAAG,EAAEY,OAAO,CAAC;IAC/Df,SAAS,CAACgB,GAAG,CAACb,WAAW,EAAEY,OAAO,CAAC;EACrC;EAEA,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA,SACEH,oBAAoB,EACpB7B,mBAAmB,EACnBc,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}