{"ast":null,"code":"// No need to import CosmosClient anymore\nclass CosmosDBService {\n  constructor() {\n    // Define the function URLs\n    this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n    this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n\n    // Debug log the actual URLs\n    console.log('üîç Azure Function URLs:');\n    console.log('Save Score URL:', this.saveScoreUrl);\n    console.log('Leaderboard URL:', this.getLeaderboardUrl);\n\n    // Check if the function URLs are configured\n    const functionsConfigured = Boolean(this.saveScoreUrl) && Boolean(this.getLeaderboardUrl);\n\n    // Set localStorage usage based on configuration\n    this.useLocalStorage = !functionsConfigured;\n    if (this.useLocalStorage) {\n      console.warn(\"‚ö†Ô∏è Using localStorage because one or both function URLs are missing:\");\n      console.warn(\"Save Score URL exists:\", Boolean(this.saveScoreUrl));\n      console.warn(\"Leaderboard URL exists:\", Boolean(this.getLeaderboardUrl));\n    } else {\n      console.log(\"‚úÖ Azure Functions API initialized with URLs:\");\n      console.log(\"Save Score:\", this.saveScoreUrl);\n      console.log(\"Leaderboard:\", this.getLeaderboardUrl);\n    }\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    console.log('üì° =====================================');\n    console.log('üì° AZURE FUNCTION CALL DETAILS:');\n    console.log('üì° Function URL:', this.saveScoreUrl);\n    console.log('üì° Method: POST');\n    console.log('üì° =====================================');\n    try {\n      const response = await fetch(this.saveScoreUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          nickname,\n          gameType,\n          score,\n          metadata\n        })\n      });\n      console.log('üì° Azure Function Response Status:', response.status);\n      const result = await response.json();\n      console.log('üì° Azure Function Response Data:', result);\n      return result;\n    } catch (error) {\n      console.error('üì° Azure Function Error:', error);\n      throw error;\n    }\n  }\n  async getLeaderboard(gameType, limit = 10) {\n    console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n      const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n      const leaderboard = allScores.filter(score => score.gameType === gameType).sort((a, b) => b.score - a.score).slice(0, limit);\n      console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n      return leaderboard;\n    }\n\n    // Use function API in production\n    if (!this.getLeaderboardUrl) {\n      console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n      return [{\n        nickname: \"Example\",\n        score: 100,\n        timestamp: new Date().toISOString()\n      }];\n    }\n    try {\n      const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n      console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n      return data;\n    } catch (error) {\n      console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n      return [];\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosDBService","constructor","saveScoreUrl","process","env","REACT_APP_FUNCTION_SAVE_SCORE_URL","getLeaderboardUrl","REACT_APP_FUNCTION_LEADERBOARD_URL","console","log","functionsConfigured","Boolean","useLocalStorage","warn","saveGameScore","nickname","gameType","score","metadata","response","fetch","method","headers","body","JSON","stringify","status","result","json","error","getLeaderboard","limit","allScores","parse","localStorage","getItem","leaderboard","filter","sort","a","b","slice","length","timestamp","Date","toISOString","url","encodeURIComponent","split","ok","Error","data"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["// No need to import CosmosClient anymore\nclass CosmosDBService {\n    constructor() {\n        // Define the function URLs\n        this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n        this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n        \n        // Debug log the actual URLs\n        console.log('üîç Azure Function URLs:');\n        console.log('Save Score URL:', this.saveScoreUrl);\n        console.log('Leaderboard URL:', this.getLeaderboardUrl);\n        \n        // Check if the function URLs are configured\n        const functionsConfigured = Boolean(this.saveScoreUrl) && Boolean(this.getLeaderboardUrl);\n        \n        // Set localStorage usage based on configuration\n        this.useLocalStorage = !functionsConfigured;\n        \n        if (this.useLocalStorage) {\n            console.warn(\"‚ö†Ô∏è Using localStorage because one or both function URLs are missing:\");\n            console.warn(\"Save Score URL exists:\", Boolean(this.saveScoreUrl));\n            console.warn(\"Leaderboard URL exists:\", Boolean(this.getLeaderboardUrl));\n        } else {\n            console.log(\"‚úÖ Azure Functions API initialized with URLs:\");\n            console.log(\"Save Score:\", this.saveScoreUrl);\n            console.log(\"Leaderboard:\", this.getLeaderboardUrl);\n        }\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        console.log('üì° =====================================');\n        console.log('üì° AZURE FUNCTION CALL DETAILS:');\n        console.log('üì° Function URL:', this.saveScoreUrl);\n        console.log('üì° Method: POST');\n        console.log('üì° =====================================');\n\n        try {\n            const response = await fetch(this.saveScoreUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    nickname,\n                    gameType,\n                    score,\n                    metadata\n                })\n            });\n\n            console.log('üì° Azure Function Response Status:', response.status);\n            const result = await response.json();\n            console.log('üì° Azure Function Response Data:', result);\n\n            return result;\n        } catch (error) {\n            console.error('üì° Azure Function Error:', error);\n            throw error;\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 10) {\n        console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n        \n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n            const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n            const leaderboard = allScores\n                .filter(score => score.gameType === gameType)\n                .sort((a, b) => b.score - a.score)\n                .slice(0, limit);\n                \n            console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n            return leaderboard;\n        }\n        \n        // Use function API in production\n        if (!this.getLeaderboardUrl) {\n            console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n            return [{ nickname: \"Example\", score: 100, timestamp: new Date().toISOString() }];\n        }\n        \n        try {\n            const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n            console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n            \n            const response = await fetch(url);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n            return data;\n        } catch (error) {\n            console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n            return [];\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}