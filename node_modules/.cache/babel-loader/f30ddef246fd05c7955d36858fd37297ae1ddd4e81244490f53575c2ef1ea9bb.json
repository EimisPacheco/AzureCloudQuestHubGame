{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  const complexityByDifficulty = {\n    'BEGINNER': {\n      minServices: 3,\n      maxServices: 4\n    },\n    'INTERMEDIATE': {\n      minServices: 4,\n      maxServices: 6\n    },\n    'ADVANCED': {\n      minServices: 6,\n      maxServices: 8\n    }\n  };\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: `You are an AWS architecture expert. Generate complex, realistic architectures as JSON using only these services: ${AVAILABLE_SERVICES.map(s => s.name).join(', ')}.\n          \n          Required JSON format:\n          {\n            \"services\": [\"service1_id\", \"service2_id\"],\n            \"connections\": [{\"from\": \"service1_id\", \"to\": \"service2_id\"}],\n            \"missingService\": \"service_id\",\n            \"question\": \"Question about the missing service\",\n            \"options\": [\"service1_id\", \"service2_id\", \"service3_id\", \"service4_id\"]\n          }\n          \n          For ${difficulty}:\n          - Services: ${complexityByDifficulty[difficulty].minServices}-${complexityByDifficulty[difficulty].maxServices}\n          - Focus on realistic service interactions\n          - Create meaningful data flow patterns`\n      }],\n      temperature: 0.7\n    });\n    const responseText = completion.choices[0].message.content;\n    const aiSuggestion = JSON.parse(responseText);\n    console.log('AI Response:', aiSuggestion);\n\n    // Map service IDs to full service objects\n    const getServiceById = id => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with more complex randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 4);\n    return {\n      architecture: {\n        services: randomServices.slice(0, 3),\n        connections: [{\n          from: randomServices[0].id,\n          to: randomServices[1].id\n        }, {\n          from: randomServices[1].id,\n          to: randomServices[2].id\n        }]\n      },\n      question: {\n        text: `Which AWS service would you use to enhance this architecture?`,\n        missingServices: [randomServices[3].id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 4)\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","complexityByDifficulty","minServices","maxServices","completion","chat","completions","create","model","messages","role","content","map","s","join","temperature","responseText","choices","message","aiSuggestion","JSON","parse","console","log","getServiceById","find","architecture","services","connections","question","text","missingServices","missingService","options","error","randomServices","sort","Math","random","slice","from","to"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  const complexityByDifficulty = {\n    'BEGINNER': { minServices: 3, maxServices: 4 },\n    'INTERMEDIATE': { minServices: 4, maxServices: 6 },\n    'ADVANCED': { minServices: 6, maxServices: 8 }\n  };\n\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        { \n          role: \"system\", \n          content: `You are an AWS architecture expert. Generate complex, realistic architectures as JSON using only these services: ${AVAILABLE_SERVICES.map(s => s.name).join(', ')}.\n          \n          Required JSON format:\n          {\n            \"services\": [\"service1_id\", \"service2_id\"],\n            \"connections\": [{\"from\": \"service1_id\", \"to\": \"service2_id\"}],\n            \"missingService\": \"service_id\",\n            \"question\": \"Question about the missing service\",\n            \"options\": [\"service1_id\", \"service2_id\", \"service3_id\", \"service4_id\"]\n          }\n          \n          For ${difficulty}:\n          - Services: ${complexityByDifficulty[difficulty].minServices}-${complexityByDifficulty[difficulty].maxServices}\n          - Focus on realistic service interactions\n          - Create meaningful data flow patterns`\n        }\n      ],\n      temperature: 0.7\n    });\n\n    const responseText = completion.choices[0].message.content;\n    const aiSuggestion = JSON.parse(responseText);\n    console.log('AI Response:', aiSuggestion);\n\n    // Map service IDs to full service objects\n    const getServiceById = (id) => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections || []\n      },\n      question: {\n        text: aiSuggestion.question || 'Which service would you add?',\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: aiSuggestion.options.map(id => getServiceById(id))\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with more complex randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 4);\n    \n    return {\n      architecture: {\n        services: randomServices.slice(0, 3),\n        connections: [\n          { from: randomServices[0].id, to: randomServices[1].id },\n          { from: randomServices[1].id, to: randomServices[2].id }\n        ]\n      },\n      question: {\n        text: `Which AWS service would you use to enhance this architecture?`,\n        missingServices: [randomServices[3].id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 4)\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}