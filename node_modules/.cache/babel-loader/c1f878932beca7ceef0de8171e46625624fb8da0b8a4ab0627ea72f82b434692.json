{"ast":null,"code":"import axios from 'axios';\n\n// Assuming you have an API endpoint that interfaces with CosmosDB\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\nclass CosmosDBService {\n  /**\n   * Save a game score to CosmosDB\n   * @param {string} gameType - Type of game (e.g., 'matchDefinition', 'iconsSelect', 'architecture')\n   * @param {string} nickname - Player nickname\n   * @param {number} score - Player score\n   * @param {string} difficulty - Game difficulty level\n   * @returns {Promise} - Promise resolving to the saved score object\n   */\n  static async saveScore(gameType, nickname, score, difficulty) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/scores`, {\n        gameType,\n        nickname,\n        score,\n        difficulty,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error saving score:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get leaderboard for a specific game type\n   * @param {string} gameType - Type of game\n   * @param {string} difficulty - Optional difficulty filter\n   * @param {number} limit - Optional limit of results\n   * @returns {Promise} - Promise resolving to array of score objects\n   */\n  static async getLeaderboard(gameType, difficulty = null, limit = 10) {\n    try {\n      let url = `${API_BASE_URL}/scores?gameType=${gameType}&limit=${limit}`;\n      if (difficulty) {\n        url += `&difficulty=${difficulty}`;\n      }\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      throw error;\n    }\n  }\n}\nexport default CosmosDBService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","CosmosDBService","saveScore","gameType","nickname","score","difficulty","response","post","timestamp","Date","toISOString","data","error","console","getLeaderboard","limit","url","get"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["import axios from 'axios';\n\n// Assuming you have an API endpoint that interfaces with CosmosDB\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';\n\nclass CosmosDBService {\n  /**\n   * Save a game score to CosmosDB\n   * @param {string} gameType - Type of game (e.g., 'matchDefinition', 'iconsSelect', 'architecture')\n   * @param {string} nickname - Player nickname\n   * @param {number} score - Player score\n   * @param {string} difficulty - Game difficulty level\n   * @returns {Promise} - Promise resolving to the saved score object\n   */\n  static async saveScore(gameType, nickname, score, difficulty) {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/scores`, {\n        gameType,\n        nickname,\n        score,\n        difficulty,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error saving score:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get leaderboard for a specific game type\n   * @param {string} gameType - Type of game\n   * @param {string} difficulty - Optional difficulty filter\n   * @param {number} limit - Optional limit of results\n   * @returns {Promise} - Promise resolving to array of score objects\n   */\n  static async getLeaderboard(gameType, difficulty = null, limit = 10) {\n    try {\n      let url = `${API_BASE_URL}/scores?gameType=${gameType}&limit=${limit}`;\n      if (difficulty) {\n        url += `&difficulty=${difficulty}`;\n      }\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      throw error;\n    }\n  }\n}\n\nexport default CosmosDBService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,2BAA2B;AAEtF,MAAMC,eAAe,CAAC;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,aAAaC,SAASA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,UAAU,EAAE;IAC5D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGX,YAAY,SAAS,EAAE;QAC1DM,QAAQ;QACRC,QAAQ;QACRC,KAAK;QACLC,UAAU;QACVG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;MACF,OAAOJ,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,aAAaE,cAAcA,CAACZ,QAAQ,EAAEG,UAAU,GAAG,IAAI,EAAEU,KAAK,GAAG,EAAE,EAAE;IACnE,IAAI;MACF,IAAIC,GAAG,GAAG,GAAGpB,YAAY,oBAAoBM,QAAQ,UAAUa,KAAK,EAAE;MACtE,IAAIV,UAAU,EAAE;QACdW,GAAG,IAAI,eAAeX,UAAU,EAAE;MACpC;MACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACsB,GAAG,CAACD,GAAG,CAAC;MACrC,OAAOV,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAeZ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}