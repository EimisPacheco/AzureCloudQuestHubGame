{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDroppable } from '@dnd-kit/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureDisplay = ({\n  architecture,\n  missingServices,\n  onServiceClick\n}) => {\n  _s();\n  const {\n    setNodeRef\n  } = useDroppable({\n    id: 'architecture-drop-zone'\n  });\n  if (!architecture || !architecture.services) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-container\",\n      children: \"No architecture to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Calculate positions for a cleaner layout\n  const calculateServicePositions = (services, connections) => {\n    const levels = {};\n    const processed = new Set();\n\n    // Find root nodes (services that are only source in connections)\n    const roots = services.filter(service => !connections.some(conn => conn.to === service.id));\n\n    // Assign levels through BFS\n    let currentLevel = [roots];\n    let levelNum = 0;\n    while (currentLevel.length > 0) {\n      levels[levelNum] = currentLevel;\n      const nextLevel = [];\n      currentLevel.forEach(service => {\n        processed.add(service.id);\n        // Find children\n        connections.filter(conn => conn.from === service.id).forEach(conn => {\n          const childService = services.find(s => s.id === conn.to);\n          if (childService && !processed.has(childService.id)) {\n            nextLevel.push(childService);\n          }\n        });\n      });\n      currentLevel = nextLevel;\n      levelNum++;\n    }\n\n    // Calculate positions\n    const positions = {};\n    Object.entries(levels).forEach(([level, levelServices]) => {\n      const levelWidth = 100 / Object.keys(levels).length;\n      const serviceSpacing = 100 / (levelServices.length + 1);\n      levelServices.forEach((service, index) => {\n        positions[service.id] = {\n          x: levelWidth * parseInt(level) + levelWidth / 2,\n          y: serviceSpacing * (index + 1)\n        };\n      });\n    });\n    return positions;\n  };\n  const positions = calculateServicePositions(architecture.services, architecture.connections);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    className: \"architecture-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connections-layer\",\n      children: architecture.connections.map((conn, index) => {\n        const fromPos = positions[conn.from];\n        const toPos = positions[conn.to];\n        if (!fromPos || !toPos) return null;\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: `${fromPos.x}%`,\n          y1: `${fromPos.y}%`,\n          x2: `${toPos.x}%`,\n          y2: `${toPos.y}%`,\n          stroke: \"#4FD1C5\",\n          strokeWidth: \"2\"\n        }, `${conn.from}-${conn.to}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"services-layer\",\n      children: architecture.services.map((service, index) => {\n        const pos = positions[service.id];\n        if (!pos) return null;\n        const isMissing = missingServices === null || missingServices === void 0 ? void 0 : missingServices.includes(service.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `service-node ${isMissing ? 'missing' : ''}`,\n          style: {\n            left: `${pos.x}%`,\n            top: `${pos.y}%`,\n            transform: 'translate(-50%, -50%)'\n          },\n          onClick: () => isMissing && onServiceClick(service.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: service.icon,\n            alt: service.name,\n            className: \"service-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"service-label\",\n            children: service.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, `${service.id}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"cRxoCnej0Qm2GWGzi2a2LoWImLI=\", false, function () {\n  return [useDroppable];\n});\n_c = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useDroppable","jsxDEV","_jsxDEV","AWSArchitectureDisplay","architecture","missingServices","onServiceClick","_s","setNodeRef","id","services","className","children","fileName","_jsxFileName","lineNumber","columnNumber","calculateServicePositions","connections","levels","processed","Set","roots","filter","service","some","conn","to","currentLevel","levelNum","length","nextLevel","forEach","add","from","childService","find","s","has","push","positions","Object","entries","level","levelServices","levelWidth","keys","serviceSpacing","index","x","parseInt","y","ref","map","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","pos","isMissing","includes","style","left","top","transform","onClick","src","icon","alt","name","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React from 'react';\nimport { useDroppable } from '@dnd-kit/core';\n\nconst AWSArchitectureDisplay = ({ architecture, missingServices, onServiceClick }) => {\n  const { setNodeRef } = useDroppable({\n    id: 'architecture-drop-zone'\n  });\n\n  if (!architecture || !architecture.services) {\n    return <div className=\"architecture-container\">No architecture to display</div>;\n  }\n\n  // Calculate positions for a cleaner layout\n  const calculateServicePositions = (services, connections) => {\n    const levels = {};\n    const processed = new Set();\n\n    // Find root nodes (services that are only source in connections)\n    const roots = services.filter(service => \n      !connections.some(conn => conn.to === service.id)\n    );\n\n    // Assign levels through BFS\n    let currentLevel = [roots];\n    let levelNum = 0;\n\n    while (currentLevel.length > 0) {\n      levels[levelNum] = currentLevel;\n      const nextLevel = [];\n\n      currentLevel.forEach(service => {\n        processed.add(service.id);\n        // Find children\n        connections\n          .filter(conn => conn.from === service.id)\n          .forEach(conn => {\n            const childService = services.find(s => s.id === conn.to);\n            if (childService && !processed.has(childService.id)) {\n              nextLevel.push(childService);\n            }\n          });\n      });\n\n      currentLevel = nextLevel;\n      levelNum++;\n    }\n\n    // Calculate positions\n    const positions = {};\n    Object.entries(levels).forEach(([level, levelServices]) => {\n      const levelWidth = 100 / (Object.keys(levels).length);\n      const serviceSpacing = 100 / (levelServices.length + 1);\n      \n      levelServices.forEach((service, index) => {\n        positions[service.id] = {\n          x: levelWidth * parseInt(level) + levelWidth / 2,\n          y: serviceSpacing * (index + 1)\n        };\n      });\n    });\n\n    return positions;\n  };\n\n  const positions = calculateServicePositions(architecture.services, architecture.connections);\n\n  return (\n    <div ref={setNodeRef} className=\"architecture-container\">\n      <svg className=\"connections-layer\">\n        {architecture.connections.map((conn, index) => {\n          const fromPos = positions[conn.from];\n          const toPos = positions[conn.to];\n          if (!fromPos || !toPos) return null;\n\n          return (\n            <line\n              key={`${conn.from}-${conn.to}-${index}`}\n              x1={`${fromPos.x}%`}\n              y1={`${fromPos.y}%`}\n              x2={`${toPos.x}%`}\n              y2={`${toPos.y}%`}\n              stroke=\"#4FD1C5\"\n              strokeWidth=\"2\"\n            />\n          );\n        })}\n      </svg>\n\n      <div className=\"services-layer\">\n        {architecture.services.map((service, index) => {\n          const pos = positions[service.id];\n          if (!pos) return null;\n\n          const isMissing = missingServices?.includes(service.id);\n\n          return (\n            <div\n              key={`${service.id}-${index}`}\n              className={`service-node ${isMissing ? 'missing' : ''}`}\n              style={{\n                left: `${pos.x}%`,\n                top: `${pos.y}%`,\n                transform: 'translate(-50%, -50%)'\n              }}\n              onClick={() => isMissing && onServiceClick(service.id)}\n            >\n              <img\n                src={service.icon}\n                alt={service.name}\n                className=\"service-icon\"\n              />\n              <div className=\"service-label\">{service.name}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}