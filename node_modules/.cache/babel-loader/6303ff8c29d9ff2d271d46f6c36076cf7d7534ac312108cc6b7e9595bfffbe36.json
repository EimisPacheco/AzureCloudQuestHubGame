{"ast":null,"code":"import { AZURE_ICON_CATEGORIES, SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Constants\nconst AZURE_BUCKET_URL = process.env.REACT_APP_AZURE_BUCKET_URL;\nconst ICONS_BASE_PATH = process.env.REACT_APP_ICONS_BASE_PATH;\n\n// Use environment variable for the Azure function URL\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\n\n/**\n * Get a random category and its icons\n * @returns {Object} Object containing category name, display name, and icons\n */\nexport const getRandomCategory = () => {\n  // Get all categories\n  const categories = Object.keys(AZURE_ICON_CATEGORIES);\n\n  // Keep trying until we find a category with enough icons\n  let attempts = 0;\n  let categoryIcons = [];\n  let randomCategory = '';\n  let categoryPath = '';\n\n  // Try to find a category with at least 5 icons (3 attempts max)\n  while (categoryIcons.length < 5 && attempts < 3) {\n    randomCategory = categories[Math.floor(Math.random() * categories.length)];\n\n    // Format display name\n    const displayName = randomCategory.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n\n    // Get the category path\n    categoryPath = AZURE_ICON_CATEGORIES[randomCategory];\n\n    // Get all icons for this category\n    categoryIcons = getCategoryIcons(categoryPath);\n    attempts++;\n  }\n\n  // If we couldn't find a good category, use the last one tried anyway\n\n  // Get some random icons from other categories as distractors\n  const distractorIcons = getDistractorIcons(categoryPath, 25 - categoryIcons.length);\n\n  // Combine and shuffle all icons\n  const allIcons = [...categoryIcons, ...distractorIcons].sort(() => 0.5 - Math.random());\n\n  // Get the display name\n  const displayName = randomCategory.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n  console.log(`Selected category: ${displayName} with ${categoryIcons.length} icons`);\n  console.log(`Target icons:`, categoryIcons.map(icon => icon.name));\n  return {\n    category: categoryPath,\n    displayName: displayName,\n    icons: allIcons,\n    targetIcons: categoryIcons.map(icon => icon.name)\n  };\n};\n\n/**\n * Get all icons for a specific category\n * @param {String} categoryPath The category path\n * @returns {Array} Array of icon objects\n */\nexport const getCategoryIcons = categoryPath => {\n  return Object.entries(SERVICE_MAPPINGS).filter(([_, path]) => path.includes(categoryPath)).slice(0, 10) // Get up to 10 icons from the category\n  .map(([name, path]) => ({\n    name: name,\n    path: path,\n    isTarget: true\n  }));\n};\n\n/**\n * Get random icons from other categories as distractors\n * @param {String} excludeCategoryPath The category path to exclude\n * @param {Number} count Number of distractor icons to get\n * @returns {Array} Array of icon objects\n */\nexport const getDistractorIcons = (excludeCategoryPath, count) => {\n  // Get icons from other categories\n  const otherIcons = Object.entries(SERVICE_MAPPINGS).filter(([_, path]) => !path.includes(excludeCategoryPath)).map(([name, path]) => ({\n    name: name,\n    path: path,\n    isTarget: false\n  }));\n\n  // Shuffle and take the requested number\n  return otherIcons.sort(() => 0.5 - Math.random()).slice(0, count);\n};\n\n/**\n * Check if the selected icons match the target icons\n * @param {Array} selectedIcons Array of selected icon names\n * @param {Array} targetIcons Array of target icon names\n * @returns {Boolean} True if selections match targets\n */\nexport const checkSelectionComplete = (selectedIcons, targetIcons) => {\n  // Check if all target icons are selected (and no extras)\n  return targetIcons.every(icon => selectedIcons.includes(icon)) && selectedIcons.every(icon => targetIcons.includes(icon));\n};\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n  if (!SERVICES_FUNCTION_URL) {\n    console.error('❌ Azure Function URL is not configured');\n    return [];\n  }\n  try {\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await fetch(SERVICES_FUNCTION_URL);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('📊 Raw Azure Function response:', data);\n    const formattedData = data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["AZURE_ICON_CATEGORIES","SERVICE_MAPPINGS","AZURE_BUCKET_URL","process","env","REACT_APP_AZURE_BUCKET_URL","ICONS_BASE_PATH","REACT_APP_ICONS_BASE_PATH","SERVICES_FUNCTION_URL","REACT_APP_SERVICES_FUNCTION_URL","getRandomCategory","categories","Object","keys","attempts","categoryIcons","randomCategory","categoryPath","length","Math","floor","random","displayName","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","getCategoryIcons","distractorIcons","getDistractorIcons","allIcons","sort","console","log","icon","name","category","icons","targetIcons","entries","filter","_","path","includes","isTarget","excludeCategoryPath","count","otherIcons","checkSelectionComplete","selectedIcons","every","getServiceDefinitions","error","response","fetch","ok","Error","status","data","json","formattedData","item","service","definition","description","replace"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/utils/categorySelectionUtils.js"],"sourcesContent":["import { AZURE_ICON_CATEGORIES, SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Constants\nconst AZURE_BUCKET_URL = process.env.REACT_APP_AZURE_BUCKET_URL;\nconst ICONS_BASE_PATH = process.env.REACT_APP_ICONS_BASE_PATH;\n\n// Use environment variable for the Azure function URL\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\n\n/**\n * Get a random category and its icons\n * @returns {Object} Object containing category name, display name, and icons\n */\nexport const getRandomCategory = () => {\n  // Get all categories\n  const categories = Object.keys(AZURE_ICON_CATEGORIES);\n  \n  // Keep trying until we find a category with enough icons\n  let attempts = 0;\n  let categoryIcons = [];\n  let randomCategory = '';\n  let categoryPath = '';\n  \n  // Try to find a category with at least 5 icons (3 attempts max)\n  while (categoryIcons.length < 5 && attempts < 3) {\n    randomCategory = categories[Math.floor(Math.random() * categories.length)];\n    \n    // Format display name\n    const displayName = randomCategory.split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n    \n    // Get the category path\n    categoryPath = AZURE_ICON_CATEGORIES[randomCategory];\n    \n    // Get all icons for this category\n    categoryIcons = getCategoryIcons(categoryPath);\n    attempts++;\n  }\n  \n  // If we couldn't find a good category, use the last one tried anyway\n  \n  // Get some random icons from other categories as distractors\n  const distractorIcons = getDistractorIcons(categoryPath, 25 - categoryIcons.length);\n  \n  // Combine and shuffle all icons\n  const allIcons = [...categoryIcons, ...distractorIcons].sort(() => 0.5 - Math.random());\n  \n  // Get the display name\n  const displayName = randomCategory.split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n  \n  console.log(`Selected category: ${displayName} with ${categoryIcons.length} icons`);\n  console.log(`Target icons:`, categoryIcons.map(icon => icon.name));\n  \n  return {\n    category: categoryPath,\n    displayName: displayName,\n    icons: allIcons,\n    targetIcons: categoryIcons.map(icon => icon.name)\n  };\n};\n\n/**\n * Get all icons for a specific category\n * @param {String} categoryPath The category path\n * @returns {Array} Array of icon objects\n */\nexport const getCategoryIcons = (categoryPath) => {\n  return Object.entries(SERVICE_MAPPINGS)\n    .filter(([_, path]) => path.includes(categoryPath))\n    .slice(0, 10) // Get up to 10 icons from the category\n    .map(([name, path]) => ({\n      name: name,\n      path: path,\n      isTarget: true\n    }));\n};\n\n/**\n * Get random icons from other categories as distractors\n * @param {String} excludeCategoryPath The category path to exclude\n * @param {Number} count Number of distractor icons to get\n * @returns {Array} Array of icon objects\n */\nexport const getDistractorIcons = (excludeCategoryPath, count) => {\n  // Get icons from other categories\n  const otherIcons = Object.entries(SERVICE_MAPPINGS)\n    .filter(([_, path]) => !path.includes(excludeCategoryPath))\n    .map(([name, path]) => ({\n      name: name,\n      path: path,\n      isTarget: false\n    }));\n  \n  // Shuffle and take the requested number\n  return otherIcons\n    .sort(() => 0.5 - Math.random())\n    .slice(0, count);\n};\n\n/**\n * Check if the selected icons match the target icons\n * @param {Array} selectedIcons Array of selected icon names\n * @param {Array} targetIcons Array of target icon names\n * @returns {Boolean} True if selections match targets\n */\nexport const checkSelectionComplete = (selectedIcons, targetIcons) => {\n  // Check if all target icons are selected (and no extras)\n  return (\n    targetIcons.every(icon => selectedIcons.includes(icon)) && \n    selectedIcons.every(icon => targetIcons.includes(icon))\n  );\n};\n\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n\n  if (!SERVICES_FUNCTION_URL) {\n    console.error('❌ Azure Function URL is not configured');\n    return [];\n  }\n\n  try {\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await fetch(SERVICES_FUNCTION_URL);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('📊 Raw Azure Function response:', data);\n\n    const formattedData = data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n\n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}