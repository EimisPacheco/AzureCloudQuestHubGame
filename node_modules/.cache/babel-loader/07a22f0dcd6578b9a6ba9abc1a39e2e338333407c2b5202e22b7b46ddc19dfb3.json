{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport class NumberSerializer {\n  deserialize(bytes) {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const num = Number(bytes.readBigInt64LE(0));\n    return num;\n  }\n  serialize(value) {\n    const newValue = BigInt(value);\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(newValue, 0);\n    return buffer;\n  }\n}","map":{"version":3,"names":["NumberSerializer","deserialize","bytes","length","Error","num","Number","readBigInt64LE","serialize","value","newValue","BigInt","buffer","Buffer","alloc","writeBigInt64LE"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/Serializers/NumberSerializer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Serializer } from \"./Serializer\";\n\nexport class NumberSerializer implements Serializer {\n  deserialize(bytes: Buffer): number {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const num = Number(bytes.readBigInt64LE(0));\n    return num;\n  }\n\n  serialize(value: number): Buffer {\n    const newValue = BigInt(value);\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(newValue, 0);\n    return buffer;\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA,OAAM,MAAOA,gBAAgB;EAC3BC,WAAWA,CAACC,KAAa;IACvB,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IACA,MAAMC,GAAG,GAAGC,MAAM,CAACJ,KAAK,CAACK,cAAc,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOF,GAAG;EACZ;EAEAG,SAASA,CAACC,KAAa;IACrB,MAAMC,QAAQ,GAAGC,MAAM,CAACF,KAAK,CAAC;IAC9B,MAAMG,MAAM,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BF,MAAM,CAACG,eAAe,CAACL,QAAQ,EAAE,CAAC,CAAC;IACnC,OAAOE,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}