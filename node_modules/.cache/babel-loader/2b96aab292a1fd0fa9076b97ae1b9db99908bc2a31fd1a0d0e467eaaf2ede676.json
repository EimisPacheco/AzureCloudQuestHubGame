{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nexport class KeyVaultClient extends coreHttpCompat.ExtendedServiceClient {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(apiVersion, options) {\n    var _a, _b;\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n    const packageDetails = `azsdk-js-keyvault-keys/4.9.0`;\n    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;\n    const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), {\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{vaultBaseUrl}\"\n    });\n    super(optionsWithDefaults);\n    if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies = options.pipeline.getOrderedPolicies();\n      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(pipelinePolicy => pipelinePolicy.name === coreRestPipeline.bearerTokenAuthenticationPolicyName);\n      if (!bearerTokenAuthenticationPolicyFound) {\n        this.pipeline.removePolicy({\n          name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n        });\n        this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({\n          scopes: `${optionsWithDefaults.baseUri}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge\n          }\n        }));\n      }\n    }\n    // Parameter assignments\n    this.apiVersion = apiVersion;\n  }\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new key.\n   *                The value you provide may be copied globally for the purpose of running the service. The value\n   *                provided should not include personally identifiable or sensitive information.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType.\n   * @param options The options parameters.\n   */\n  createKey(vaultBaseUrl, keyName, kty, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      kty,\n      options\n    }, createKeyOperationSpec);\n  }\n  /**\n   * The operation will rotate the key based on the key policy. It requires the keys/rotate permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to be rotated. The system will generate a new version in the\n   *                specified key.\n   * @param options The options parameters.\n   */\n  rotateKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, rotateKeyOperationSpec);\n  }\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the named\n   * key already exists, Azure Key Vault creates a new version of the key. This operation requires the\n   * keys/import permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key. The value you provide may be copied globally for the\n   *                purpose of running the service. The value provided should not include personally identifiable or\n   *                sensitive information.\n   * @param key The Json web key\n   * @param options The options parameters.\n   */\n  importKey(vaultBaseUrl, keyName, key, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      key,\n      options\n    }, importKeyOperationSpec);\n  }\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable for\n   * Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The options parameters.\n   */\n  deleteKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, deleteKeyOperationSpec);\n  }\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the keys/update\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The options parameters.\n   */\n  updateKey(vaultBaseUrl, keyName, keyVersion, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      options\n    }, updateKeyOperationSpec);\n  }\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no key\n   * material is released in the response. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI\n   *                   fragment is optional. If not specified, the latest version of the key is returned.\n   * @param options The options parameters.\n   */\n  getKey(vaultBaseUrl, keyName, keyVersion, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      options\n    }, getKeyOperationSpec);\n  }\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation requires\n   * the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getKeyVersions(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, getKeyVersionsOperationSpec);\n  }\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base key\n   * identifier, attributes, and tags are provided in the response. Individual versions of a key are not\n   * listed in the response. This operation requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getKeys(vaultBaseUrl, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      options\n    }, getKeysOperationSpec);\n  }\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault\n   * itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault\n   * instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP\n   * operation may be used to export, in protected form, any key type from Azure Key Vault. Individual\n   * versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical\n   * boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another\n   * geographical area. For example, a backup from the US geographical area cannot be restored in an EU\n   * geographical area. This operation requires the key/backup permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  backupKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, backupKeyOperationSpec);\n  }\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety\n   * with the same key name as it had when it was backed up. If the key name is not available in the\n   * target Key Vault, the RESTORE operation will be rejected. While the key name is retained during\n   * restore, the final key identifier will change if the key is restored to a different vault. Restore\n   * will restore all versions and preserve version identifiers. The RESTORE operation is subject to\n   * security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as\n   * the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation\n   * requires the keys/restore permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The options parameters.\n   */\n  restoreKey(vaultBaseUrl, keyBundleBackup, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyBundleBackup,\n      options\n    }, restoreKeyOperationSpec);\n  }\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored\n   * in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size\n   * of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT\n   * operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection\n   * with an asymmetric key can be performed using public portion of the key. This operation is supported\n   * for asymmetric keys as a convenience for callers that have a key-reference but do not have access to\n   * the public key material. This operation requires the keys/encrypt permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  encrypt(vaultBaseUrl, keyName, keyVersion, algorithm, value, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options\n    }, encryptOperationSpec);\n  }\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and\n   * specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of\n   * data may be decrypted, the size of this block is dependent on the target key and the algorithm to be\n   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since\n   * it uses the private portion of the key. This operation requires the keys/decrypt permission.\n   * Microsoft recommends not to use CBC algorithms for decryption without first ensuring the integrity\n   * of the ciphertext using an HMAC, for example. See\n   * https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  decrypt(vaultBaseUrl, keyName, keyVersion, algorithm, value, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options\n    }, decryptOperationSpec);\n  }\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since\n   * this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   *                  algorithm types, see JsonWebKeySignatureAlgorithm.\n   * @param value\n   * @param options The options parameters.\n   */\n  sign(vaultBaseUrl, keyName, keyVersion, algorithm, value, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options\n    }, signOperationSpec);\n  }\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be\n   * performed using the public portion of the key but this operation is supported as a convenience for\n   * callers that only have a key-reference and not the public portion of the key. This operation\n   * requires the keys/verify permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   *                  types, see JsonWebKeySignatureAlgorithm.\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The options parameters.\n   */\n  verify(vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      digest,\n      signature,\n      options\n    }, verifyOperationSpec);\n  }\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed\n   * using the public portion of the key. This operation is supported for asymmetric keys as a\n   * convenience for callers that have a key-reference but do not have access to the public key material.\n   * This operation requires the keys/wrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  wrapKey(vaultBaseUrl, keyName, keyVersion, algorithm, value, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options\n    }, wrapKeyOperationSpec);\n  }\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and\n   * symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  unwrapKey(vaultBaseUrl, keyName, keyVersion, algorithm, value, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      algorithm,\n      value,\n      options\n    }, unwrapKeyOperationSpec);\n  }\n  /**\n   * The release key operation is applicable to all key types. The target key must be marked exportable.\n   * This operation requires the keys/release permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param targetAttestationToken The attestation assertion for the target of the key release.\n   * @param options The options parameters.\n   */\n  release(vaultBaseUrl, keyName, keyVersion, targetAttestationToken, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyVersion,\n      targetAttestationToken,\n      options\n    }, releaseOperationSpec);\n  }\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys\n   * operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on\n   * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation\n   * requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getDeletedKeys(vaultBaseUrl, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      options\n    }, getDeletedKeysOperationSpec);\n  }\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can\n   * be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This\n   * operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getDeletedKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, getDeletedKeyOperationSpec);\n  }\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/purge permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The options parameters.\n   */\n  purgeDeletedKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, purgeDeletedKeyOperationSpec);\n  }\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It\n   * recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The options parameters.\n   */\n  recoverDeletedKey(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, recoverDeletedKeyOperationSpec);\n  }\n  /**\n   * The GetKeyRotationPolicy operation returns the specified key policy resources in the specified key\n   * vault. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in a given key vault.\n   * @param options The options parameters.\n   */\n  getKeyRotationPolicy(vaultBaseUrl, keyName, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      options\n    }, getKeyRotationPolicyOperationSpec);\n  }\n  /**\n   * Set specified members in the key policy. Leave others as undefined. This operation requires the\n   * keys/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in the given vault.\n   * @param keyRotationPolicy The policy for the key.\n   * @param options The options parameters.\n   */\n  updateKeyRotationPolicy(vaultBaseUrl, keyName, keyRotationPolicy, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      keyRotationPolicy,\n      options\n    }, updateKeyRotationPolicyOperationSpec);\n  }\n  /**\n   * Get the requested number of bytes containing random values from a managed HSM.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param count The requested number of random bytes.\n   * @param options The options parameters.\n   */\n  getRandomBytes(vaultBaseUrl, count, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      count,\n      options\n    }, getRandomBytesOperationSpec);\n  }\n  /**\n   * GetKeyVersionsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param nextLink The nextLink from the previous successful call to the GetKeyVersions method.\n   * @param options The options parameters.\n   */\n  getKeyVersionsNext(vaultBaseUrl, keyName, nextLink, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      keyName,\n      nextLink,\n      options\n    }, getKeyVersionsNextOperationSpec);\n  }\n  /**\n   * GetKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetKeys method.\n   * @param options The options parameters.\n   */\n  getKeysNext(vaultBaseUrl, nextLink, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      nextLink,\n      options\n    }, getKeysNextOperationSpec);\n  }\n  /**\n   * GetDeletedKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetDeletedKeys method.\n   * @param options The options parameters.\n   */\n  getDeletedKeysNext(vaultBaseUrl, nextLink, options) {\n    return this.sendOperationRequest({\n      vaultBaseUrl,\n      nextLink,\n      options\n    }, getDeletedKeysNextOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst createKeyOperationSpec = {\n  path: \"/keys/{key-name}/create\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      kty: [\"kty\"],\n      keySize: [\"options\", \"keySize\"],\n      publicExponent: [\"options\", \"publicExponent\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyCreateParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst rotateKeyOperationSpec = {\n  path: \"/keys/{key-name}/rotate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst importKeyOperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: [\"key\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyImportParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteKeyOperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyUpdateParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyVersionsOperationSpec = {\n  path: \"/keys/{key-name}/versions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysOperationSpec = {\n  path: \"/keys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst backupKeyOperationSpec = {\n  path: \"/keys/{key-name}/backup\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst restoreKeyOperationSpec = {\n  path: \"/keys/restore\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      keyBundleBackup: [\"keyBundleBackup\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyRestoreParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encryptOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/encrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyOperationsParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decryptOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/decrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyOperationsParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst signOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/sign\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeySignParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst verifyOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/verify\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      digest: [\"digest\"],\n      signature: [\"signature\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyVerifyParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst wrapKeyOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/wrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyOperationsParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst unwrapKeyOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/unwrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyOperationsParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst releaseOperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/release\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyReleaseResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      targetAttestationToken: [\"targetAttestationToken\"],\n      nonce: [\"options\", \"nonce\"],\n      enc: [\"options\", \"enc\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.KeyReleaseParameters), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.keyVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDeletedKeysOperationSpec = {\n  path: \"/deletedkeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeyOperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst purgeDeletedKeyOperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst recoverDeletedKeyOperationSpec = {\n  path: \"/deletedkeys/{key-name}/recover\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyRotationPolicyOperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyRotationPolicyOperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: Parameters.keyRotationPolicy,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getRandomBytesOperationSpec = {\n  path: \"/rng\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RandomBytes\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      count: [\"count\"]\n    },\n    mapper: Object.assign(Object.assign({}, Mappers.GetRandomBytesRequest), {\n      required: true\n    })\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyVersionsNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeysNextOperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};","map":{"version":3,"names":["coreClient","coreHttpCompat","coreRestPipeline","Parameters","Mappers","KeyVaultClient","ExtendedServiceClient","constructor","apiVersion","options","undefined","Error","defaults","requestContentType","packageDetails","userAgentPrefix","userAgentOptions","optionsWithDefaults","Object","assign","baseUri","_b","_a","endpoint","pipeline","getOrderedPolicies","length","pipelinePolicies","bearerTokenAuthenticationPolicyFound","some","pipelinePolicy","name","bearerTokenAuthenticationPolicyName","removePolicy","addPolicy","bearerTokenAuthenticationPolicy","scopes","challengeCallbacks","authorizeRequestOnChallenge","authorizeRequestOnClaimChallenge","createKey","vaultBaseUrl","keyName","kty","sendOperationRequest","createKeyOperationSpec","rotateKey","rotateKeyOperationSpec","importKey","key","importKeyOperationSpec","deleteKey","deleteKeyOperationSpec","updateKey","keyVersion","updateKeyOperationSpec","getKey","getKeyOperationSpec","getKeyVersions","getKeyVersionsOperationSpec","getKeys","getKeysOperationSpec","backupKey","backupKeyOperationSpec","restoreKey","keyBundleBackup","restoreKeyOperationSpec","encrypt","algorithm","value","encryptOperationSpec","decrypt","decryptOperationSpec","sign","signOperationSpec","verify","digest","signature","verifyOperationSpec","wrapKey","wrapKeyOperationSpec","unwrapKey","unwrapKeyOperationSpec","release","targetAttestationToken","releaseOperationSpec","getDeletedKeys","getDeletedKeysOperationSpec","getDeletedKey","getDeletedKeyOperationSpec","purgeDeletedKey","purgeDeletedKeyOperationSpec","recoverDeletedKey","recoverDeletedKeyOperationSpec","getKeyRotationPolicy","getKeyRotationPolicyOperationSpec","updateKeyRotationPolicy","keyRotationPolicy","updateKeyRotationPolicyOperationSpec","getRandomBytes","count","getRandomBytesOperationSpec","getKeyVersionsNext","nextLink","getKeyVersionsNextOperationSpec","getKeysNext","getKeysNextOperationSpec","getDeletedKeysNext","getDeletedKeysNextOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","KeyBundle","default","KeyVaultError","requestBody","parameterPath","keySize","publicExponent","keyOps","keyAttributes","tags","curve","releasePolicy","mapper","KeyCreateParameters","required","queryParameters","urlParameters","headerParameters","contentType","accept","mediaType","hsm","KeyImportParameters","DeletedKeyBundle","keyName1","KeyUpdateParameters","KeyListResult","maxresults","BackupKeyResult","KeyRestoreParameters","KeyOperationResult","iv","additionalAuthenticatedData","authenticationTag","KeyOperationsParameters","KeySignParameters","KeyVerifyResult","KeyVerifyParameters","KeyReleaseResult","nonce","enc","KeyReleaseParameters","DeletedKeyListResult","KeyRotationPolicy","RandomBytes","GetRandomBytesRequest"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/keyvault-keys/src/generated/keyVaultClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Parameters from \"./models/parameters.js\";\nimport * as Mappers from \"./models/mappers.js\";\nimport {\n  ApiVersion75,\n  KeyVaultClientOptionalParams,\n  JsonWebKeyType,\n  CreateKeyOptionalParams,\n  CreateKeyResponse,\n  RotateKeyOptionalParams,\n  RotateKeyResponse,\n  JsonWebKey,\n  ImportKeyOptionalParams,\n  ImportKeyResponse,\n  DeleteKeyOptionalParams,\n  DeleteKeyResponse,\n  UpdateKeyOptionalParams,\n  UpdateKeyResponse,\n  GetKeyOptionalParams,\n  GetKeyResponse,\n  GetKeyVersionsOptionalParams,\n  GetKeyVersionsResponse,\n  GetKeysOptionalParams,\n  GetKeysResponse,\n  BackupKeyOptionalParams,\n  BackupKeyResponse,\n  RestoreKeyOptionalParams,\n  RestoreKeyResponse,\n  JsonWebKeyEncryptionAlgorithm,\n  EncryptOptionalParams,\n  EncryptResponse,\n  DecryptOptionalParams,\n  DecryptResponse,\n  JsonWebKeySignatureAlgorithm,\n  SignOptionalParams,\n  SignResponse,\n  VerifyOptionalParams,\n  VerifyResponse,\n  WrapKeyOptionalParams,\n  WrapKeyResponse,\n  UnwrapKeyOptionalParams,\n  UnwrapKeyResponse,\n  ReleaseOptionalParams,\n  ReleaseResponse,\n  GetDeletedKeysOptionalParams,\n  GetDeletedKeysResponse,\n  GetDeletedKeyOptionalParams,\n  GetDeletedKeyResponse,\n  PurgeDeletedKeyOptionalParams,\n  RecoverDeletedKeyOptionalParams,\n  RecoverDeletedKeyResponse,\n  GetKeyRotationPolicyOptionalParams,\n  GetKeyRotationPolicyResponse,\n  KeyRotationPolicy,\n  UpdateKeyRotationPolicyOptionalParams,\n  UpdateKeyRotationPolicyResponse,\n  GetRandomBytesOptionalParams,\n  GetRandomBytesResponse,\n  GetKeyVersionsNextOptionalParams,\n  GetKeyVersionsNextResponse,\n  GetKeysNextOptionalParams,\n  GetKeysNextResponse,\n  GetDeletedKeysNextOptionalParams,\n  GetDeletedKeysNextResponse\n} from \"./models/index.js\";\n\nexport class KeyVaultClient extends coreHttpCompat.ExtendedServiceClient {\n  apiVersion: ApiVersion75;\n\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Api Version\n   * @param options The parameter options\n   */\n  constructor(\n    apiVersion: ApiVersion75,\n    options?: KeyVaultClientOptionalParams\n  ) {\n    if (apiVersion === undefined) {\n      throw new Error(\"'apiVersion' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: KeyVaultClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-keyvault-keys/4.9.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint ?? options.baseUri ?? \"{vaultBaseUrl}\"\n    };\n    super(optionsWithDefaults);\n\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n      if (!bearerTokenAuthenticationPolicyFound) {\n        this.pipeline.removePolicy({\n          name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n        });\n        this.pipeline.addPolicy(\n          coreRestPipeline.bearerTokenAuthenticationPolicy({\n            scopes: `${optionsWithDefaults.baseUri}/.default`,\n            challengeCallbacks: {\n              authorizeRequestOnChallenge:\n                coreClient.authorizeRequestOnClaimChallenge\n            }\n          })\n        );\n      }\n    }\n    // Parameter assignments\n    this.apiVersion = apiVersion;\n  }\n\n  /**\n   * The create key operation can be used to create any key type in Azure Key Vault. If the named key\n   * already exists, Azure Key Vault creates a new version of the key. It requires the keys/create\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name for the new key. The system will generate the version name for the new key.\n   *                The value you provide may be copied globally for the purpose of running the service. The value\n   *                provided should not include personally identifiable or sensitive information.\n   * @param kty The type of key to create. For valid values, see JsonWebKeyType.\n   * @param options The options parameters.\n   */\n  createKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    kty: JsonWebKeyType,\n    options?: CreateKeyOptionalParams\n  ): Promise<CreateKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, kty, options },\n      createKeyOperationSpec\n    );\n  }\n\n  /**\n   * The operation will rotate the key based on the key policy. It requires the keys/rotate permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to be rotated. The system will generate a new version in the\n   *                specified key.\n   * @param options The options parameters.\n   */\n  rotateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: RotateKeyOptionalParams\n  ): Promise<RotateKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      rotateKeyOperationSpec\n    );\n  }\n\n  /**\n   * The import key operation may be used to import any key type into an Azure Key Vault. If the named\n   * key already exists, Azure Key Vault creates a new version of the key. This operation requires the\n   * keys/import permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName Name for the imported key. The value you provide may be copied globally for the\n   *                purpose of running the service. The value provided should not include personally identifiable or\n   *                sensitive information.\n   * @param key The Json web key\n   * @param options The options parameters.\n   */\n  importKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    key: JsonWebKey,\n    options?: ImportKeyOptionalParams\n  ): Promise<ImportKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, key, options },\n      importKeyOperationSpec\n    );\n  }\n\n  /**\n   * The delete key operation cannot be used to remove individual versions of a key. This operation\n   * removes the cryptographic material associated with the key, which means the key is not usable for\n   * Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to delete.\n   * @param options The options parameters.\n   */\n  deleteKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: DeleteKeyOptionalParams\n  ): Promise<DeleteKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      deleteKeyOperationSpec\n    );\n  }\n\n  /**\n   * In order to perform this operation, the key must already exist in the Key Vault. Note: The\n   * cryptographic material of a key itself cannot be changed. This operation requires the keys/update\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of key to update.\n   * @param keyVersion The version of the key to update.\n   * @param options The options parameters.\n   */\n  updateKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: UpdateKeyOptionalParams\n  ): Promise<UpdateKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, options },\n      updateKeyOperationSpec\n    );\n  }\n\n  /**\n   * The get key operation is applicable to all key types. If the requested key is symmetric, then no key\n   * material is released in the response. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key. This URI\n   *                   fragment is optional. If not specified, the latest version of the key is returned.\n   * @param options The options parameters.\n   */\n  getKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    options?: GetKeyOptionalParams\n  ): Promise<GetKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, options },\n      getKeyOperationSpec\n    );\n  }\n\n  /**\n   * The full key identifier, attributes, and tags are provided in the response. This operation requires\n   * the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getKeyVersions(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetKeyVersionsOptionalParams\n  ): Promise<GetKeyVersionsResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      getKeyVersionsOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a stored key. The LIST operation is applicable to all key types, however only the base key\n   * identifier, attributes, and tags are provided in the response. Individual versions of a key are not\n   * listed in the response. This operation requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getKeys(\n    vaultBaseUrl: string,\n    options?: GetKeysOptionalParams\n  ): Promise<GetKeysResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, options },\n      getKeysOperationSpec\n    );\n  }\n\n  /**\n   * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\n   * operation does NOT return key material in a form that can be used outside the Azure Key Vault\n   * system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault\n   * itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault\n   * instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP\n   * operation may be used to export, in protected form, any key type from Azure Key Vault. Individual\n   * versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical\n   * boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another\n   * geographical area. For example, a backup from the US geographical area cannot be restored in an EU\n   * geographical area. This operation requires the key/backup permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  backupKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: BackupKeyOptionalParams\n  ): Promise<BackupKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      backupKeyOperationSpec\n    );\n  }\n\n  /**\n   * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\n   * attributes and access control policies. The RESTORE operation may be used to import a previously\n   * backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety\n   * with the same key name as it had when it was backed up. If the key name is not available in the\n   * target Key Vault, the RESTORE operation will be rejected. While the key name is retained during\n   * restore, the final key identifier will change if the key is restored to a different vault. Restore\n   * will restore all versions and preserve version identifiers. The RESTORE operation is subject to\n   * security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as\n   * the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation\n   * requires the keys/restore permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyBundleBackup The backup blob associated with a key bundle.\n   * @param options The options parameters.\n   */\n  restoreKey(\n    vaultBaseUrl: string,\n    keyBundleBackup: Uint8Array,\n    options?: RestoreKeyOptionalParams\n  ): Promise<RestoreKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyBundleBackup, options },\n      restoreKeyOperationSpec\n    );\n  }\n\n  /**\n   * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored\n   * in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size\n   * of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT\n   * operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection\n   * with an asymmetric key can be performed using public portion of the key. This operation is supported\n   * for asymmetric keys as a convenience for callers that have a key-reference but do not have access to\n   * the public key material. This operation requires the keys/encrypt permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  encrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: EncryptOptionalParams\n  ): Promise<EncryptResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, algorithm, value, options },\n      encryptOperationSpec\n    );\n  }\n\n  /**\n   * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and\n   * specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of\n   * data may be decrypted, the size of this block is dependent on the target key and the algorithm to be\n   * used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since\n   * it uses the private portion of the key. This operation requires the keys/decrypt permission.\n   * Microsoft recommends not to use CBC algorithms for decryption without first ensuring the integrity\n   * of the ciphertext using an HMAC, for example. See\n   * https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode for more information.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  decrypt(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: DecryptOptionalParams\n  ): Promise<DecryptResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, algorithm, value, options },\n      decryptOperationSpec\n    );\n  }\n\n  /**\n   * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since\n   * this operation uses the private portion of the key. This operation requires the keys/sign\n   * permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm identifier. For more information on possible\n   *                  algorithm types, see JsonWebKeySignatureAlgorithm.\n   * @param value\n   * @param options The options parameters.\n   */\n  sign(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeySignatureAlgorithm,\n    value: Uint8Array,\n    options?: SignOptionalParams\n  ): Promise<SignResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, algorithm, value, options },\n      signOperationSpec\n    );\n  }\n\n  /**\n   * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\n   * strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be\n   * performed using the public portion of the key but this operation is supported as a convenience for\n   * callers that only have a key-reference and not the public portion of the key. This operation\n   * requires the keys/verify permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm The signing/verification algorithm. For more information on possible algorithm\n   *                  types, see JsonWebKeySignatureAlgorithm.\n   * @param digest The digest used for signing.\n   * @param signature The signature to be verified.\n   * @param options The options parameters.\n   */\n  verify(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeySignatureAlgorithm,\n    digest: Uint8Array,\n    signature: Uint8Array,\n    options?: VerifyOptionalParams\n  ): Promise<VerifyResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        keyName,\n        keyVersion,\n        algorithm,\n        digest,\n        signature,\n        options\n      },\n      verifyOperationSpec\n    );\n  }\n\n  /**\n   * The WRAP operation supports encryption of a symmetric key using a key encryption key that has\n   * previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\n   * symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed\n   * using the public portion of the key. This operation is supported for asymmetric keys as a\n   * convenience for callers that have a key-reference but do not have access to the public key material.\n   * This operation requires the keys/wrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  wrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: WrapKeyOptionalParams\n  ): Promise<WrapKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, algorithm, value, options },\n      wrapKeyOperationSpec\n    );\n  }\n\n  /**\n   * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key.\n   * This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and\n   * symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This\n   * operation requires the keys/unwrapKey permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param keyVersion The version of the key.\n   * @param algorithm algorithm identifier\n   * @param value\n   * @param options The options parameters.\n   */\n  unwrapKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    algorithm: JsonWebKeyEncryptionAlgorithm,\n    value: Uint8Array,\n    options?: UnwrapKeyOptionalParams\n  ): Promise<UnwrapKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, algorithm, value, options },\n      unwrapKeyOperationSpec\n    );\n  }\n\n  /**\n   * The release key operation is applicable to all key types. The target key must be marked exportable.\n   * This operation requires the keys/release permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key to get.\n   * @param keyVersion Adding the version parameter retrieves a specific version of a key.\n   * @param targetAttestationToken The attestation assertion for the target of the key release.\n   * @param options The options parameters.\n   */\n  release(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyVersion: string,\n    targetAttestationToken: string,\n    options?: ReleaseOptionalParams\n  ): Promise<ReleaseResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyVersion, targetAttestationToken, options },\n      releaseOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public\n   * part of a deleted key. This operation includes deletion-specific information. The Get Deleted Keys\n   * operation is applicable for vaults enabled for soft-delete. While the operation can be invoked on\n   * any vault, it will return an error if invoked on a non soft-delete enabled vault. This operation\n   * requires the keys/list permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The options parameters.\n   */\n  getDeletedKeys(\n    vaultBaseUrl: string,\n    options?: GetDeletedKeysOptionalParams\n  ): Promise<GetDeletedKeysResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, options },\n      getDeletedKeysOperationSpec\n    );\n  }\n\n  /**\n   * The Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation can\n   * be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault. This\n   * operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param options The options parameters.\n   */\n  getDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetDeletedKeyOptionalParams\n  ): Promise<GetDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      getDeletedKeyOperationSpec\n    );\n  }\n\n  /**\n   * The Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\n   * can be invoked on any vault, it will return an error if invoked on a non soft-delete enabled vault.\n   * This operation requires the keys/purge permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key\n   * @param options The options parameters.\n   */\n  purgeDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: PurgeDeletedKeyOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      purgeDeletedKeyOperationSpec\n    );\n  }\n\n  /**\n   * The Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults. It\n   * recovers the deleted key back to its latest version under /keys. An attempt to recover an\n   * non-deleted key will return an error. Consider this the inverse of the delete operation on\n   * soft-delete enabled vaults. This operation requires the keys/recover permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the deleted key.\n   * @param options The options parameters.\n   */\n  recoverDeletedKey(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: RecoverDeletedKeyOptionalParams\n  ): Promise<RecoverDeletedKeyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      recoverDeletedKeyOperationSpec\n    );\n  }\n\n  /**\n   * The GetKeyRotationPolicy operation returns the specified key policy resources in the specified key\n   * vault. This operation requires the keys/get permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in a given key vault.\n   * @param options The options parameters.\n   */\n  getKeyRotationPolicy(\n    vaultBaseUrl: string,\n    keyName: string,\n    options?: GetKeyRotationPolicyOptionalParams\n  ): Promise<GetKeyRotationPolicyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, options },\n      getKeyRotationPolicyOperationSpec\n    );\n  }\n\n  /**\n   * Set specified members in the key policy. Leave others as undefined. This operation requires the\n   * keys/update permission.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key in the given vault.\n   * @param keyRotationPolicy The policy for the key.\n   * @param options The options parameters.\n   */\n  updateKeyRotationPolicy(\n    vaultBaseUrl: string,\n    keyName: string,\n    keyRotationPolicy: KeyRotationPolicy,\n    options?: UpdateKeyRotationPolicyOptionalParams\n  ): Promise<UpdateKeyRotationPolicyResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, keyRotationPolicy, options },\n      updateKeyRotationPolicyOperationSpec\n    );\n  }\n\n  /**\n   * Get the requested number of bytes containing random values from a managed HSM.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param count The requested number of random bytes.\n   * @param options The options parameters.\n   */\n  getRandomBytes(\n    vaultBaseUrl: string,\n    count: number,\n    options?: GetRandomBytesOptionalParams\n  ): Promise<GetRandomBytesResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, count, options },\n      getRandomBytesOperationSpec\n    );\n  }\n\n  /**\n   * GetKeyVersionsNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param keyName The name of the key.\n   * @param nextLink The nextLink from the previous successful call to the GetKeyVersions method.\n   * @param options The options parameters.\n   */\n  getKeyVersionsNext(\n    vaultBaseUrl: string,\n    keyName: string,\n    nextLink: string,\n    options?: GetKeyVersionsNextOptionalParams\n  ): Promise<GetKeyVersionsNextResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, keyName, nextLink, options },\n      getKeyVersionsNextOperationSpec\n    );\n  }\n\n  /**\n   * GetKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetKeys method.\n   * @param options The options parameters.\n   */\n  getKeysNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetKeysNextOptionalParams\n  ): Promise<GetKeysNextResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, nextLink, options },\n      getKeysNextOperationSpec\n    );\n  }\n\n  /**\n   * GetDeletedKeysNext\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param nextLink The nextLink from the previous successful call to the GetDeletedKeys method.\n   * @param options The options parameters.\n   */\n  getDeletedKeysNext(\n    vaultBaseUrl: string,\n    nextLink: string,\n    options?: GetDeletedKeysNextOptionalParams\n  ): Promise<GetDeletedKeysNextResponse> {\n    return this.sendOperationRequest(\n      { vaultBaseUrl, nextLink, options },\n      getDeletedKeysNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/create\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      kty: [\"kty\"],\n      keySize: [\"options\", \"keySize\"],\n      publicExponent: [\"options\", \"publicExponent\"],\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      curve: [\"options\", \"curve\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyCreateParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst rotateKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/rotate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst importKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      hsm: [\"options\", \"hsm\"],\n      key: [\"key\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyImportParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      keyOps: [\"options\", \"keyOps\"],\n      keyAttributes: [\"options\", \"keyAttributes\"],\n      tags: [\"options\", \"tags\"],\n      releasePolicy: [\"options\", \"releasePolicy\"]\n    },\n    mapper: { ...Mappers.KeyUpdateParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyVersionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/versions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst backupKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/backup\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupKeyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst restoreKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/restore\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { keyBundleBackup: [\"keyBundleBackup\"] },\n    mapper: { ...Mappers.KeyRestoreParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst encryptOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/encrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst decryptOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/decrypt\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst signOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/sign\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { algorithm: [\"algorithm\"], value: [\"value\"] },\n    mapper: { ...Mappers.KeySignParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst verifyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/verify\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyVerifyResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      digest: [\"digest\"],\n      signature: [\"signature\"]\n    },\n    mapper: { ...Mappers.KeyVerifyParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst wrapKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/wrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst unwrapKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/unwrapkey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      algorithm: [\"algorithm\"],\n      value: [\"value\"],\n      iv: [\"options\", \"iv\"],\n      additionalAuthenticatedData: [\"options\", \"additionalAuthenticatedData\"],\n      authenticationTag: [\"options\", \"authenticationTag\"]\n    },\n    mapper: { ...Mappers.KeyOperationsParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst releaseOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/{key-version}/release\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyReleaseResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: {\n      targetAttestationToken: [\"targetAttestationToken\"],\n      nonce: [\"options\", \"nonce\"],\n      enc: [\"options\", \"enc\"]\n    },\n    mapper: { ...Mappers.KeyReleaseParameters, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.keyVersion\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDeletedKeysOperationSpec: coreClient.OperationSpec = {\n  path: \"/deletedkeys\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst purgeDeletedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/deletedkeys/{key-name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst recoverDeletedKeyOperationSpec: coreClient.OperationSpec = {\n  path: \"/deletedkeys/{key-name}/recover\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeyRotationPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateKeyRotationPolicyOperationSpec: coreClient.OperationSpec = {\n  path: \"/keys/{key-name}/rotationpolicy\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyRotationPolicy\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: Parameters.keyRotationPolicy,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.keyName1],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getRandomBytesOperationSpec: coreClient.OperationSpec = {\n  path: \"/rng\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RandomBytes\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  requestBody: {\n    parameterPath: { count: [\"count\"] },\n    mapper: { ...Mappers.GetRandomBytesRequest, required: true }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.vaultBaseUrl],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getKeyVersionsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.keyName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getKeysNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeletedKeysNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedKeyListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.maxresults],\n  urlParameters: [Parameters.vaultBaseUrl, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}