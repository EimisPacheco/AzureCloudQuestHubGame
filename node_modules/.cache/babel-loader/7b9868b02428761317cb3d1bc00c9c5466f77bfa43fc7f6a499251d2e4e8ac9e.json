{"ast":null,"code":"import axios from 'axios';\nimport { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variable for the Azure function URL\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n\n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n  try {\n    if (!SERVICES_FUNCTION_URL) {\n      throw new Error('Azure Function URL is not configured');\n    }\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await axios.get(SERVICES_FUNCTION_URL);\n    console.log('📊 Raw Azure Function response:', response.data);\n    console.log('📊 Response type:', typeof response.data);\n    console.log('📊 Response is array:', Array.isArray(response.data));\n    if (Array.isArray(response.data)) {\n      console.log('📊 First few items:', response.data.slice(0, 3));\n    }\n\n    // Format the data to match your expected structure\n    const formattedData = response.data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    console.log('✅ Total service definitions:', formattedData.length);\n\n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    console.error('❌ Error details:', {\n      message: error.message,\n      response: error.response ? {\n        status: error.response.status,\n        data: error.response.data\n      } : 'No response',\n      request: error.request ? 'Request was made but no response received' : 'No request was made'\n    });\n\n    // Fallback to hardcoded data in case of error\n    console.log('⚠️ Using fallback data instead');\n    return [{\n      name: \"Kubernetes Services\",\n      definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n      path: \"/azure-icons/services/kubernetes-services.svg\"\n    }, {\n      name: \"Cognitive Services\",\n      definition: \"Adds AI capabilities to applications through pre-built APIs\",\n      path: \"/azure-icons/services/cognitive-services.svg\"\n    },\n    // Add a few more fallback items...\n    {\n      name: \"Azure Functions\",\n      definition: \"Event-driven, serverless compute service\",\n      path: \"/azure-icons/services/azure-functions.svg\"\n    }];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n};","map":{"version":3,"names":["axios","SERVICE_MAPPINGS","SERVICES_FUNCTION_URL","process","env","REACT_APP_SERVICES_FUNCTION_URL","cachedDefinitions","getServiceDefinitions","console","log","length","Error","response","get","data","Array","isArray","slice","formattedData","map","item","name","service","definition","description","path","toLowerCase","replace","error","message","status","request","getRandomServices","count","allServices","shuffled","sort","Math","random","getRandomDefinition","services","randomIndex","floor","isGameComplete","matchedServices","totalServices","formatTime","seconds","mins","secs"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/utils/definitionMatchingUtils.js"],"sourcesContent":["import axios from 'axios';\nimport { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variable for the Azure function URL\nconst SERVICES_FUNCTION_URL = process.env.REACT_APP_SERVICES_FUNCTION_URL;\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\n\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n  \n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n\n  try {\n    if (!SERVICES_FUNCTION_URL) {\n      throw new Error('Azure Function URL is not configured');\n    }\n\n    console.log('🌐 Calling Azure Function:', SERVICES_FUNCTION_URL);\n    const response = await axios.get(SERVICES_FUNCTION_URL);\n    \n    console.log('📊 Raw Azure Function response:', response.data);\n    console.log('📊 Response type:', typeof response.data);\n    console.log('📊 Response is array:', Array.isArray(response.data));\n    \n    if (Array.isArray(response.data)) {\n      console.log('📊 First few items:', response.data.slice(0, 3));\n    }\n    \n    // Format the data to match your expected structure\n    const formattedData = response.data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n    \n    console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n    console.log('✅ Total service definitions:', formattedData.length);\n    \n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('❌ Error fetching service definitions:', error);\n    console.error('❌ Error details:', {\n      message: error.message,\n      response: error.response ? {\n        status: error.response.status,\n        data: error.response.data\n      } : 'No response',\n      request: error.request ? 'Request was made but no response received' : 'No request was made'\n    });\n    \n    // Fallback to hardcoded data in case of error\n    console.log('⚠️ Using fallback data instead');\n    return [\n      {\n        name: \"Kubernetes Services\",\n        definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n        path: \"/azure-icons/services/kubernetes-services.svg\"\n      },\n      {\n        name: \"Cognitive Services\",\n        definition: \"Adds AI capabilities to applications through pre-built APIs\",\n        path: \"/azure-icons/services/cognitive-services.svg\"\n      },\n      // Add a few more fallback items...\n      {\n        name: \"Azure Functions\",\n        definition: \"Event-driven, serverless compute service\",\n        path: \"/azure-icons/services/azure-functions.svg\"\n      }\n    ];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}