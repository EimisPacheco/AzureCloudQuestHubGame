{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4-1106-preview\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AWS architecture expert. Generate random architectures with multiple missing services and rank possible solutions by cost-efficiency.\"\n      }, {\n        role: \"user\",\n        content: `Generate a random ${difficulty} AWS architecture with 3 missing services and rank the possible answers based on cost-efficiency. Use only these services: ${AVAILABLE_SERVICES.map(s => s.id).join(', ')}`\n      }],\n      response_format: {\n        type: \"json_schema\",\n        schema: {\n          type: \"object\",\n          required: [\"services\", \"connections\", \"missingServices\"],\n          properties: {\n            services: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              }\n            },\n            connections: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                required: [\"from\", \"to\"],\n                properties: {\n                  from: {\n                    type: \"string\"\n                  },\n                  to: {\n                    type: \"string\"\n                  }\n                }\n              }\n            },\n            missingServices: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                required: [\"position\", \"options\"],\n                properties: {\n                  position: {\n                    type: \"string\"\n                  },\n                  options: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      required: [\"service\", \"costEfficiency\", \"explanation\"],\n                      properties: {\n                        service: {\n                          type: \"string\"\n                        },\n                        costEfficiency: {\n                          type: \"number\"\n                        },\n                        explanation: {\n                          type: \"string\"\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n\n    // Map service IDs to full service objects\n    const getServiceById = id => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections\n      },\n      questions: aiSuggestion.missingServices.map(ms => ({\n        text: `Which service would be most cost-efficient for ${ms.position}?`,\n        position: ms.position,\n        missingServices: ms.options.map(opt => opt.service),\n        options: ms.options.map(opt => ({\n          ...getServiceById(opt.service),\n          costEfficiency: opt.costEfficiency,\n          explanation: opt.explanation\n        }))\n      }))\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with multiple missing services\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random());\n    const baseServices = randomServices.slice(0, 4);\n    const missingServices = randomServices.slice(4, 7);\n    return {\n      architecture: {\n        services: baseServices,\n        connections: [{\n          from: baseServices[0].id,\n          to: baseServices[1].id\n        }, {\n          from: baseServices[1].id,\n          to: baseServices[2].id\n        }, {\n          from: baseServices[2].id,\n          to: baseServices[3].id\n        }]\n      },\n      questions: missingServices.map((service, index) => ({\n        text: `Which service would you add for position ${index + 1}?`,\n        position: `Position ${index + 1}`,\n        missingServices: [service.id],\n        options: randomServices.slice(0, 4).map(s => ({\n          ...s,\n          costEfficiency: Math.random() * 10,\n          explanation: `${s.name} could be used here`\n        }))\n      }))\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","completion","chat","completions","create","model","messages","role","content","map","s","join","response_format","type","schema","required","properties","services","items","connections","from","to","missingServices","position","options","service","costEfficiency","explanation","aiSuggestion","JSON","parse","choices","message","getServiceById","find","architecture","questions","ms","text","opt","error","console","randomServices","sort","Math","random","baseServices","slice","index"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4-1106-preview\",\n      messages: [\n        { \n          role: \"system\", \n          content: \"You are an AWS architecture expert. Generate random architectures with multiple missing services and rank possible solutions by cost-efficiency.\"\n        },\n        {\n          role: \"user\",\n          content: `Generate a random ${difficulty} AWS architecture with 3 missing services and rank the possible answers based on cost-efficiency. Use only these services: ${AVAILABLE_SERVICES.map(s => s.id).join(', ')}`\n        }\n      ],\n      response_format: {\n        type: \"json_schema\",\n        schema: {\n          type: \"object\",\n          required: [\"services\", \"connections\", \"missingServices\"],\n          properties: {\n            services: {\n              type: \"array\",\n              items: { type: \"string\" }\n            },\n            connections: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                required: [\"from\", \"to\"],\n                properties: {\n                  from: { type: \"string\" },\n                  to: { type: \"string\" }\n                }\n              }\n            },\n            missingServices: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                required: [\"position\", \"options\"],\n                properties: {\n                  position: { type: \"string\" },\n                  options: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      required: [\"service\", \"costEfficiency\", \"explanation\"],\n                      properties: {\n                        service: { type: \"string\" },\n                        costEfficiency: { type: \"number\" },\n                        explanation: { type: \"string\" }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    \n    // Map service IDs to full service objects\n    const getServiceById = (id) => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n\n    return {\n      architecture: {\n        services: aiSuggestion.services.map(id => getServiceById(id)),\n        connections: aiSuggestion.connections\n      },\n      questions: aiSuggestion.missingServices.map(ms => ({\n        text: `Which service would be most cost-efficient for ${ms.position}?`,\n        position: ms.position,\n        missingServices: ms.options.map(opt => opt.service),\n        options: ms.options.map(opt => ({\n          ...getServiceById(opt.service),\n          costEfficiency: opt.costEfficiency,\n          explanation: opt.explanation\n        }))\n      }))\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Fallback with multiple missing services\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random());\n    const baseServices = randomServices.slice(0, 4);\n    const missingServices = randomServices.slice(4, 7);\n\n    return {\n      architecture: {\n        services: baseServices,\n        connections: [\n          { from: baseServices[0].id, to: baseServices[1].id },\n          { from: baseServices[1].id, to: baseServices[2].id },\n          { from: baseServices[2].id, to: baseServices[3].id }\n        ]\n      },\n      questions: missingServices.map((service, index) => ({\n        text: `Which service would you add for position ${index + 1}?`,\n        position: `Position ${index + 1}`,\n        missingServices: [service.id],\n        options: randomServices.slice(0, 4).map(s => ({\n          ...s,\n          costEfficiency: Math.random() * 10,\n          explanation: `${s.name} could be used here`\n        }))\n      }))\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EAC5CC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAG,CACzB;EAAEC,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAwB,CAAC,EACnE;EAAEF,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAoB,CAAC,EAC1D;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,EAC7D;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,EAC7D;EAAEF,EAAE,EAAE,UAAU;EAAEC,IAAI,EAAE,iBAAiB;EAAEC,IAAI,EAAE;AAA0B,CAAC,EAC5E;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,CAC9D;AAED,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMZ,MAAM,CAACa,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,KAAK,EAAE,oBAAoB;MAC3BC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE;MACX,CAAC,EACD;QACED,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE,qBAAqBR,UAAU,8HAA8HL,kBAAkB,CAACc,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACd,EAAE,CAAC,CAACe,IAAI,CAAC,IAAI,CAAC;MACpN,CAAC,CACF;MACDC,eAAe,EAAE;QACfC,IAAI,EAAE,aAAa;QACnBC,MAAM,EAAE;UACND,IAAI,EAAE,QAAQ;UACdE,QAAQ,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,iBAAiB,CAAC;UACxDC,UAAU,EAAE;YACVC,QAAQ,EAAE;cACRJ,IAAI,EAAE,OAAO;cACbK,KAAK,EAAE;gBAAEL,IAAI,EAAE;cAAS;YAC1B,CAAC;YACDM,WAAW,EAAE;cACXN,IAAI,EAAE,OAAO;cACbK,KAAK,EAAE;gBACLL,IAAI,EAAE,QAAQ;gBACdE,QAAQ,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC;gBACxBC,UAAU,EAAE;kBACVI,IAAI,EAAE;oBAAEP,IAAI,EAAE;kBAAS,CAAC;kBACxBQ,EAAE,EAAE;oBAAER,IAAI,EAAE;kBAAS;gBACvB;cACF;YACF,CAAC;YACDS,eAAe,EAAE;cACfT,IAAI,EAAE,OAAO;cACbK,KAAK,EAAE;gBACLL,IAAI,EAAE,QAAQ;gBACdE,QAAQ,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;gBACjCC,UAAU,EAAE;kBACVO,QAAQ,EAAE;oBAAEV,IAAI,EAAE;kBAAS,CAAC;kBAC5BW,OAAO,EAAE;oBACPX,IAAI,EAAE,OAAO;oBACbK,KAAK,EAAE;sBACLL,IAAI,EAAE,QAAQ;sBACdE,QAAQ,EAAE,CAAC,SAAS,EAAE,gBAAgB,EAAE,aAAa,CAAC;sBACtDC,UAAU,EAAE;wBACVS,OAAO,EAAE;0BAAEZ,IAAI,EAAE;wBAAS,CAAC;wBAC3Ba,cAAc,EAAE;0BAAEb,IAAI,EAAE;wBAAS,CAAC;wBAClCc,WAAW,EAAE;0BAAEd,IAAI,EAAE;wBAAS;sBAChC;oBACF;kBACF;gBACF;cACF;YACF;UACF;QACF;MACF;IACF,CAAC,CAAC;IAEF,MAAMe,YAAY,GAAGC,IAAI,CAACC,KAAK,CAAC7B,UAAU,CAAC8B,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACxB,OAAO,CAAC;;IAEtE;IACA,MAAMyB,cAAc,GAAIrC,EAAE,IAAKD,kBAAkB,CAACuC,IAAI,CAACxB,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKA,EAAE,CAAC,IAAID,kBAAkB,CAAC,CAAC,CAAC;IAEjG,OAAO;MACLwC,YAAY,EAAE;QACZlB,QAAQ,EAAEW,YAAY,CAACX,QAAQ,CAACR,GAAG,CAACb,EAAE,IAAIqC,cAAc,CAACrC,EAAE,CAAC,CAAC;QAC7DuB,WAAW,EAAES,YAAY,CAACT;MAC5B,CAAC;MACDiB,SAAS,EAAER,YAAY,CAACN,eAAe,CAACb,GAAG,CAAC4B,EAAE,KAAK;QACjDC,IAAI,EAAE,kDAAkDD,EAAE,CAACd,QAAQ,GAAG;QACtEA,QAAQ,EAAEc,EAAE,CAACd,QAAQ;QACrBD,eAAe,EAAEe,EAAE,CAACb,OAAO,CAACf,GAAG,CAAC8B,GAAG,IAAIA,GAAG,CAACd,OAAO,CAAC;QACnDD,OAAO,EAAEa,EAAE,CAACb,OAAO,CAACf,GAAG,CAAC8B,GAAG,KAAK;UAC9B,GAAGN,cAAc,CAACM,GAAG,CAACd,OAAO,CAAC;UAC9BC,cAAc,EAAEa,GAAG,CAACb,cAAc;UAClCC,WAAW,EAAEY,GAAG,CAACZ;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;EAEH,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC;IACA,MAAME,cAAc,GAAG/C,kBAAkB,CAACgD,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACzE,MAAMC,YAAY,GAAGJ,cAAc,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/C,MAAMzB,eAAe,GAAGoB,cAAc,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAElD,OAAO;MACLZ,YAAY,EAAE;QACZlB,QAAQ,EAAE6B,YAAY;QACtB3B,WAAW,EAAE,CACX;UAAEC,IAAI,EAAE0B,YAAY,CAAC,CAAC,CAAC,CAAClD,EAAE;UAAEyB,EAAE,EAAEyB,YAAY,CAAC,CAAC,CAAC,CAAClD;QAAG,CAAC,EACpD;UAAEwB,IAAI,EAAE0B,YAAY,CAAC,CAAC,CAAC,CAAClD,EAAE;UAAEyB,EAAE,EAAEyB,YAAY,CAAC,CAAC,CAAC,CAAClD;QAAG,CAAC,EACpD;UAAEwB,IAAI,EAAE0B,YAAY,CAAC,CAAC,CAAC,CAAClD,EAAE;UAAEyB,EAAE,EAAEyB,YAAY,CAAC,CAAC,CAAC,CAAClD;QAAG,CAAC;MAExD,CAAC;MACDwC,SAAS,EAAEd,eAAe,CAACb,GAAG,CAAC,CAACgB,OAAO,EAAEuB,KAAK,MAAM;QAClDV,IAAI,EAAE,4CAA4CU,KAAK,GAAG,CAAC,GAAG;QAC9DzB,QAAQ,EAAE,YAAYyB,KAAK,GAAG,CAAC,EAAE;QACjC1B,eAAe,EAAE,CAACG,OAAO,CAAC7B,EAAE,CAAC;QAC7B4B,OAAO,EAAEkB,cAAc,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACtC,GAAG,CAACC,CAAC,KAAK;UAC5C,GAAGA,CAAC;UACJgB,cAAc,EAAEkB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;UAClClB,WAAW,EAAE,GAAGjB,CAAC,CAACb,IAAI;QACxB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;EACH;AACF,CAAC;AAED,SAASE,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}