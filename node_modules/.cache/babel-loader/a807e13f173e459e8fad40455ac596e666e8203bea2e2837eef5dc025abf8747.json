{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { EncryptionSettings } from \"../EncryptionSettings\";\nimport { EncryptionSettingForProperty } from \"../EncryptionSettingForProperty\";\n/**\n * The cache used to store encryption settings for a container.\n * see {@link EncryptionSettings}\n * @hidden\n */\nexport class EncryptionSettingsCache {\n  constructor() {\n    this.cache = new Map();\n  }\n  async create(id, containerRid, partitionKeyPaths, clientEncryptionPolicy) {\n    const encryptionSettings = new EncryptionSettings(id, containerRid, partitionKeyPaths);\n    if (!clientEncryptionPolicy) return;\n    for (const includedPath of clientEncryptionPolicy.includedPaths) {\n      const encryptionSettingForProperty = new EncryptionSettingForProperty(includedPath);\n      encryptionSettings.pathsToEncrypt.push(includedPath.path);\n      encryptionSettings.setEncryptionSettingForProperty(includedPath.path, encryptionSettingForProperty);\n    }\n    this.set(id, encryptionSettings);\n    return encryptionSettings;\n  }\n  get(key) {\n    return this.cache.get(key);\n  }\n  set(key, encryptionSettings) {\n    this.cache.set(key, encryptionSettings);\n  }\n}","map":{"version":3,"names":["EncryptionSettings","EncryptionSettingForProperty","EncryptionSettingsCache","constructor","cache","Map","create","id","containerRid","partitionKeyPaths","clientEncryptionPolicy","encryptionSettings","includedPath","includedPaths","encryptionSettingForProperty","pathsToEncrypt","push","path","setEncryptionSettingForProperty","set","get","key"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/Cache/EncryptionSettingsCache.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionPolicy } from \"../ClientEncryptionPolicy\";\nimport { EncryptionSettings } from \"../EncryptionSettings\";\nimport { EncryptionSettingForProperty } from \"../EncryptionSettingForProperty\";\n/**\n * The cache used to store encryption settings for a container.\n * see {@link EncryptionSettings}\n * @hidden\n */\nexport class EncryptionSettingsCache {\n  // key is databaseRid + '/' + containerRid\n  private cache: Map<string, EncryptionSettings>;\n\n  public constructor() {\n    this.cache = new Map<string, EncryptionSettings>();\n  }\n\n  public async create(\n    id: string,\n    containerRid: string,\n    partitionKeyPaths: string[],\n    clientEncryptionPolicy: ClientEncryptionPolicy,\n  ): Promise<EncryptionSettings> {\n    const encryptionSettings = new EncryptionSettings(id, containerRid, partitionKeyPaths);\n    if (!clientEncryptionPolicy) return;\n\n    for (const includedPath of clientEncryptionPolicy.includedPaths) {\n      const encryptionSettingForProperty = new EncryptionSettingForProperty(includedPath);\n      encryptionSettings.pathsToEncrypt.push(includedPath.path);\n      encryptionSettings.setEncryptionSettingForProperty(\n        includedPath.path,\n        encryptionSettingForProperty,\n      );\n    }\n    this.set(id, encryptionSettings);\n    return encryptionSettings;\n  }\n\n  public get(key: string): EncryptionSettings | undefined {\n    return this.cache.get(key);\n  }\n\n  public set(key: string, encryptionSettings: EncryptionSettings): void {\n    this.cache.set(key, encryptionSettings);\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,4BAA4B,QAAQ,iCAAiC;AAC9E;;;;;AAKA,OAAM,MAAOC,uBAAuB;EAIlCC,YAAA;IACE,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,EAA8B;EACpD;EAEO,MAAMC,MAAMA,CACjBC,EAAU,EACVC,YAAoB,EACpBC,iBAA2B,EAC3BC,sBAA8C;IAE9C,MAAMC,kBAAkB,GAAG,IAAIX,kBAAkB,CAACO,EAAE,EAAEC,YAAY,EAAEC,iBAAiB,CAAC;IACtF,IAAI,CAACC,sBAAsB,EAAE;IAE7B,KAAK,MAAME,YAAY,IAAIF,sBAAsB,CAACG,aAAa,EAAE;MAC/D,MAAMC,4BAA4B,GAAG,IAAIb,4BAA4B,CAACW,YAAY,CAAC;MACnFD,kBAAkB,CAACI,cAAc,CAACC,IAAI,CAACJ,YAAY,CAACK,IAAI,CAAC;MACzDN,kBAAkB,CAACO,+BAA+B,CAChDN,YAAY,CAACK,IAAI,EACjBH,4BAA4B,CAC7B;IACH;IACA,IAAI,CAACK,GAAG,CAACZ,EAAE,EAAEI,kBAAkB,CAAC;IAChC,OAAOA,kBAAkB;EAC3B;EAEOS,GAAGA,CAACC,GAAW;IACpB,OAAO,IAAI,CAACjB,KAAK,CAACgB,GAAG,CAACC,GAAG,CAAC;EAC5B;EAEOF,GAAGA,CAACE,GAAW,EAAEV,kBAAsC;IAC5D,IAAI,CAACP,KAAK,CAACe,GAAG,CAACE,GAAG,EAAEV,kBAAkB,CAAC;EACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}