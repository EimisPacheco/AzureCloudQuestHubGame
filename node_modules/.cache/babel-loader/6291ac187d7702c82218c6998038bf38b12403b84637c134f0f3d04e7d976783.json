{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { delay } from \"@azure/core-util\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * Common properties and methods of the Key Vault Key Pollers.\n */\nexport class KeyVaultKeyPoller extends Poller {\n  constructor() {\n    super(...arguments);\n    /**\n     * Defines how much time the poller is going to wait before making a new request to the service.\n     */\n    this.intervalInMs = 2000;\n  }\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay() {\n    return delay(this.intervalInMs);\n  }\n}\n/**\n * Common properties and methods of the Key Vault Key Poller operations.\n */\nexport class KeyVaultKeyPollOperation {\n  constructor(state, options = {}) {\n    this.state = state;\n    this.cancelMessage = \"\";\n    if (options.cancelMessage) {\n      this.cancelMessage = options.cancelMessage;\n    }\n  }\n  /**\n   * Meant to reach to the service and update the Poller operation.\n   */\n  async update() {\n    throw new Error(\"Operation not supported.\");\n  }\n  /**\n   * Meant to reach to the service and cancel the Poller operation.\n   */\n  async cancel() {\n    throw new Error(this.cancelMessage);\n  }\n  /**\n   * Serializes the Poller operation.\n   */\n  toString() {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}","map":{"version":3,"names":["delay","Poller","KeyVaultKeyPoller","constructor","intervalInMs","KeyVaultKeyPollOperation","state","options","cancelMessage","update","Error","cancel","toString","JSON","stringify"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/keyvault-keys/src/lro/keyVaultKeyPoller.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport { delay } from \"@azure/core-util\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { KeyVaultClient } from \"../generated/keyVaultClient.js\";\n\n/**\n * Common parameters to a Key Vault Key Poller.\n */\nexport interface KeyVaultKeyPollerOptions {\n  vaultUrl: string;\n  client: KeyVaultClient;\n  name: string;\n  operationOptions?: OperationOptions;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * An interface representing the state of a Key Vault Key Poller's operation.\n */\nexport interface KeyVaultKeyPollOperationState<TResult> extends PollOperationState<TResult> {\n  /**\n   * The name of the key.\n   */\n  name: string;\n}\n\n/**\n * Common properties and methods of the Key Vault Key Pollers.\n */\nexport abstract class KeyVaultKeyPoller<\n  TState extends KeyVaultKeyPollOperationState<TResult>,\n  TResult,\n> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public intervalInMs: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n}\n\n/**\n * Optional parameters to the KeyVaultKeyPollOperation\n */\nexport interface KeyVaultKeyPollOperationOptions {\n  cancelMessage?: string;\n}\n\n/**\n * Common properties and methods of the Key Vault Key Poller operations.\n */\nexport class KeyVaultKeyPollOperation<TState, TResult> implements PollOperation<TState, TResult> {\n  private cancelMessage: string = \"\";\n\n  constructor(\n    public state: TState,\n    options: KeyVaultKeyPollOperationOptions = {},\n  ) {\n    if (options.cancelMessage) {\n      this.cancelMessage = options.cancelMessage;\n    }\n  }\n\n  /**\n   * Meant to reach to the service and update the Poller operation.\n   */\n  public async update(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(\"Operation not supported.\");\n  }\n\n  /**\n   * Meant to reach to the service and cancel the Poller operation.\n   */\n  public async cancel(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(this.cancelMessage);\n  }\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state,\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,KAAK,QAAQ,kBAAkB;AACxC,SAASC,MAAM,QAA2C,iBAAiB;AAyB3E;;;AAGA,OAAM,MAAgBC,iBAGpB,SAAQD,MAAuB;EAHjCE,YAAA;;IAIE;;;IAGO,KAAAC,YAAY,GAAW,IAAI;EAQpC;EANE;;;EAGA,MAAMJ,KAAKA,CAAA;IACT,OAAOA,KAAK,CAAC,IAAI,CAACI,YAAY,CAAC;EACjC;;AAUF;;;AAGA,OAAM,MAAOC,wBAAwB;EAGnCF,YACSG,KAAa,EACpBC,OAAA,GAA2C,EAAE;IADtC,KAAAD,KAAK,GAALA,KAAK;IAHN,KAAAE,aAAa,GAAW,EAAE;IAMhC,IAAID,OAAO,CAACC,aAAa,EAAE;MACzB,IAAI,CAACA,aAAa,GAAGD,OAAO,CAACC,aAAa;IAC5C;EACF;EAEA;;;EAGO,MAAMC,MAAMA,CAAA;IACjB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA;;;EAGO,MAAMC,MAAMA,CAAA;IACjB,MAAM,IAAID,KAAK,CAAC,IAAI,CAACF,aAAa,CAAC;EACrC;EAEA;;;EAGOI,QAAQA,CAAA;IACb,OAAOC,IAAI,CAACC,SAAS,CAAC;MACpBR,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}