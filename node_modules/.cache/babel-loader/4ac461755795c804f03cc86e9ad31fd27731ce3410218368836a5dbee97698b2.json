{"ast":null,"code":"class AWSArchitectureAI {\n  constructor() {\n    this.apiEndpoint = process.env.REACT_APP_GPT4_ENDPOINT;\n    this.apiKey = process.env.REACT_APP_GPT4_API_KEY;\n  }\n  getFallbackArchitecture() {\n    return {\n      architecture: {\n        services: [{\n          id: 'vpc',\n          name: 'VPC',\n          icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n        }, {\n          id: 'ec2',\n          name: 'EC2',\n          icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n        }, {\n          id: 'rds',\n          name: 'RDS',\n          icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n        }],\n        connections: [{\n          from: 'vpc',\n          to: 'ec2'\n        }, {\n          from: 'ec2',\n          to: 'rds'\n        }]\n      },\n      question: {\n        text: \"Which compute service would you use for this web application?\",\n        position: 'compute-layer',\n        missingServices: ['ec2']\n      },\n      options: [{\n        id: 'ec2',\n        name: 'EC2'\n      }, {\n        id: 'lambda',\n        name: 'Lambda'\n      }, {\n        id: 'ecs',\n        name: 'ECS'\n      }, {\n        id: 'fargate',\n        name: 'Fargate'\n      }]\n    };\n  }\n  async generateArchitecture() {\n    try {\n      if (!this.apiEndpoint || !this.apiKey) {\n        console.log('API credentials not found, using fallback');\n        return this.getFallbackArchitecture();\n      }\n      const response = await fetch(\"\".concat(this.apiEndpoint, \"/generate-architecture\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(this.apiKey)\n        },\n        body: JSON.stringify({\n          prompt: \"Generate an AWS architecture with missing services for learning purposes\"\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating architecture:', error);\n      return this.getFallbackArchitecture();\n    }\n  }\n  getFallbackValidation(architecture, selectedService, position) {\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n  async validateAnswer(architecture, selectedService, position) {\n    try {\n      if (!this.apiEndpoint || !this.apiKey) {\n        return this.getFallbackValidation(architecture, selectedService, position);\n      }\n      const response = await fetch(\"\".concat(this.apiEndpoint, \"/validate-answer\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(this.apiKey)\n        },\n        body: JSON.stringify({\n          architecture,\n          selectedService,\n          position\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error validating answer:', error);\n      return this.getFallbackValidation(architecture, selectedService, position);\n    }\n  }\n}\nexport default AWSArchitectureAI;","map":{"version":3,"names":["AWSArchitectureAI","constructor","apiEndpoint","process","env","REACT_APP_GPT4_ENDPOINT","apiKey","REACT_APP_GPT4_API_KEY","getFallbackArchitecture","architecture","services","id","name","icon","connections","from","to","question","text","position","missingServices","options","generateArchitecture","console","log","response","fetch","concat","method","headers","body","JSON","stringify","prompt","json","error","getFallbackValidation","selectedService","correct","explanation","validateAnswer"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["class AWSArchitectureAI {\n  constructor() {\n    this.apiEndpoint = process.env.REACT_APP_GPT4_ENDPOINT;\n    this.apiKey = process.env.REACT_APP_GPT4_API_KEY;\n  }\n\n  getFallbackArchitecture() {\n    return {\n      architecture: {\n        services: [\n          {\n            id: 'vpc',\n            name: 'VPC',\n            icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n          },\n          {\n            id: 'ec2',\n            name: 'EC2',\n            icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n          },\n          {\n            id: 'rds',\n            name: 'RDS',\n            icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n          }\n        ],\n        connections: [\n          { from: 'vpc', to: 'ec2' },\n          { from: 'ec2', to: 'rds' }\n        ]\n      },\n      question: {\n        text: \"Which compute service would you use for this web application?\",\n        position: 'compute-layer',\n        missingServices: ['ec2']\n      },\n      options: [\n        { id: 'ec2', name: 'EC2' },\n        { id: 'lambda', name: 'Lambda' },\n        { id: 'ecs', name: 'ECS' },\n        { id: 'fargate', name: 'Fargate' }\n      ]\n    };\n  }\n\n  async generateArchitecture() {\n    try {\n      if (!this.apiEndpoint || !this.apiKey) {\n        console.log('API credentials not found, using fallback');\n        return this.getFallbackArchitecture();\n      }\n\n      const response = await fetch(`${this.apiEndpoint}/generate-architecture`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          prompt: \"Generate an AWS architecture with missing services for learning purposes\"\n        })\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating architecture:', error);\n      return this.getFallbackArchitecture();\n    }\n  }\n\n  getFallbackValidation(architecture, selectedService, position) {\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n\n  async validateAnswer(architecture, selectedService, position) {\n    try {\n      if (!this.apiEndpoint || !this.apiKey) {\n        return this.getFallbackValidation(architecture, selectedService, position);\n      }\n\n      const response = await fetch(`${this.apiEndpoint}/validate-answer`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          architecture,\n          selectedService,\n          position\n        })\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error validating answer:', error);\n      return this.getFallbackValidation(architecture, selectedService, position);\n    }\n  }\n}\n\nexport default AWSArchitectureAI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}