{"ast":null,"code":"import { hashObject } from \"../../utils/hashObject\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\n/** @hidden */\nexport class GroupByEndpointComponent {\n  constructor(executionContext, queryInfo) {\n    this.executionContext = executionContext;\n    this.queryInfo = queryInfo;\n    this.groupings = new Map();\n    this.aggregateResultArray = [];\n    this.completed = false;\n  }\n  hasMoreResults() {\n    return this.executionContext.hasMoreResults();\n  }\n  async fetchMore(diagnosticNode) {\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader()\n      };\n    }\n    const aggregateHeaders = getInitialHeader();\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n    if (response === undefined || response.result === undefined) {\n      // If there are any groupings, consolidate and return them\n      if (this.groupings.size > 0) {\n        return this.consolidateGroupResults(aggregateHeaders);\n      }\n      return {\n        result: undefined,\n        headers: aggregateHeaders\n      };\n    }\n    for (const item of response.result) {\n      // If it exists, process it via aggregators\n      if (item) {\n        const group = item.groupByItems ? await hashObject(item.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = item.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key] ? payload[key] : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          }\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          }\n        }\n      }\n    }\n    if (this.executionContext.hasMoreResults()) {\n      return {\n        result: [],\n        headers: aggregateHeaders\n      };\n    } else {\n      return this.consolidateGroupResults(aggregateHeaders);\n    }\n  }\n  consolidateGroupResults(aggregateHeaders) {\n    for (const grouping of this.groupings.values()) {\n      const groupResult = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray,\n      headers: aggregateHeaders\n    };\n  }\n}","map":{"version":3,"names":["hashObject","createAggregator","getInitialHeader","mergeHeaders","emptyGroup","extractAggregateResult","GroupByEndpointComponent","constructor","executionContext","queryInfo","groupings","Map","aggregateResultArray","completed","hasMoreResults","fetchMore","diagnosticNode","result","undefined","headers","aggregateHeaders","response","size","consolidateGroupResults","item","group","groupByItems","aggregators","get","payload","key","Object","keys","effectiveGroupByValue","set","aggregateResult","aggregate","grouping","aggregateType","groupByAliasToAggregateType","aggregator","values","groupResult","aggregateKey","entries","getResult","push"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/GroupByEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport type { CosmosHeaders } from \"../CosmosHeaders\";\nimport type { QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { Aggregator } from \"../Aggregators\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n  ) {}\n\n  private readonly groupings: Map<string, Map<string, Aggregator>> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private completed: boolean = false;\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n    const aggregateHeaders = getInitialHeader();\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n\n    if (response === undefined || response.result === undefined) {\n      // If there are any groupings, consolidate and return them\n      if (this.groupings.size > 0) {\n        return this.consolidateGroupResults(aggregateHeaders);\n      }\n      return { result: undefined, headers: aggregateHeaders };\n    }\n\n    for (const item of response.result as GroupByResult[]) {\n      // If it exists, process it via aggregators\n      if (item) {\n        const group = item.groupByItems ? await hashObject(item.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = item.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key]\n              ? payload[key]\n              : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          }\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          }\n        }\n      }\n    }\n\n    if (this.executionContext.hasMoreResults()) {\n      return {\n        result: [],\n        headers: aggregateHeaders,\n      };\n    } else {\n      return this.consolidateGroupResults(aggregateHeaders);\n    }\n  }\n\n  private consolidateGroupResults(aggregateHeaders: CosmosHeaders): Response<any> {\n    for (const grouping of this.groupings.values()) {\n      const groupResult: any = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return { result: this.aggregateResultArray, headers: aggregateHeaders };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}