{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureGame = () => {\n  _s();\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    const maxRetries = 3;\n    let retryCount = 0;\n    while (retryCount < maxRetries) {\n      try {\n        console.log(`Attempt ${retryCount + 1} of ${maxRetries}`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (response.status === 503) {\n          retryCount++;\n          if (retryCount < maxRetries) {\n            // Wait for 2 seconds before retrying (exponential backoff)\n            await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n            continue;\n          }\n        }\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('API Response:', data);\n        const parsedBody = data.body;\n        console.log('Architecture data:', parsedBody);\n        if (!parsedBody || !parsedBody.architecture || !parsedBody.services || !parsedBody.connections || !parsedBody.missingServices) {\n          throw new Error('Invalid response format from API');\n        }\n        setArchitectureInfo({\n          name: parsedBody.architecture.name,\n          description: parsedBody.architecture.description\n        });\n        setArchitecture({\n          services: parsedBody.services,\n          connections: parsedBody.connections\n        });\n        if (parsedBody.missingServices && parsedBody.missingServices.length > 0) {\n          setCurrentQuestion(parsedBody.missingServices[0]);\n          setServiceOptions(parsedBody.missingServices[0].options);\n        } else {\n          throw new Error('No missing services found in response');\n        }\n\n        // If we get here, we succeeded, so break the retry loop\n        break;\n      } catch (error) {\n        console.error(`Attempt ${retryCount + 1} failed:`, error);\n        if (retryCount === maxRetries - 1) {\n          setError(`Failed to load architecture after ${maxRetries} attempts. Please try again later.`);\n        }\n        retryCount++;\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n        }\n      }\n    }\n    setIsLoading(false);\n  };\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n\n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading architecture...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNextArchitecture,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-description\",\n      children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"optimization-focus\",\n        children: [\"Focus: \", currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.optimizationFocus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"architecture-section\",\n        children: /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          missingServices: [currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.position]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"service-options\",\n        children: serviceOptions.map(option => /*#__PURE__*/_jsxDEV(DraggableService, {\n          service: option,\n          onClick: () => handleServiceSelection(option.id)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"ddr4POS6eViQ8XJAIjwebevXJnY=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","ArchitectureVisualizer","ServiceOptionsPanel","generateArchitecture","jsxDEV","_jsxDEV","AWSArchitectureGame","_s","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","score","setScore","difficulty","setDifficulty","isLoading","setIsLoading","error","setError","API_URL","sensors","activationConstraint","distance","loadNextArchitecture","maxRetries","retryCount","console","log","response","fetch","method","headers","body","JSON","stringify","status","Promise","resolve","setTimeout","ok","Error","data","json","parsedBody","services","connections","missingServices","name","description","length","options","handleServiceSelection","selectedServiceId","selectedOption","find","opt","id","isCorrect","points","isOptimal","prev","currentQuestionIndex","questions","findIndex","q","position","nextQuestion","handleDragEnd","event","active","over","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","optimizationFocus","onDragEnd","AWSArchitectureDisplay","map","option","DraggableService","service","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\n\n\n\nconst AWSArchitectureGame = () => {\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(TouchSensor)\n  );\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    const maxRetries = 3;\n    let retryCount = 0;\n    \n    while (retryCount < maxRetries) {\n      try {\n        console.log(`Attempt ${retryCount + 1} of ${maxRetries}`);\n        \n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({ difficulty })\n        });\n\n        if (response.status === 503) {\n          retryCount++;\n          if (retryCount < maxRetries) {\n            // Wait for 2 seconds before retrying (exponential backoff)\n            await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n            continue;\n          }\n        }\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log('API Response:', data);\n\n        const parsedBody = data.body;\n        console.log('Architecture data:', parsedBody);\n\n        if (!parsedBody || !parsedBody.architecture || !parsedBody.services || !parsedBody.connections || !parsedBody.missingServices) {\n          throw new Error('Invalid response format from API');\n        }\n\n        setArchitectureInfo({\n          name: parsedBody.architecture.name,\n          description: parsedBody.architecture.description\n        });\n        \n        setArchitecture({\n          services: parsedBody.services,\n          connections: parsedBody.connections\n        });\n\n        if (parsedBody.missingServices && parsedBody.missingServices.length > 0) {\n          setCurrentQuestion(parsedBody.missingServices[0]);\n          setServiceOptions(parsedBody.missingServices[0].options);\n        } else {\n          throw new Error('No missing services found in response');\n        }\n\n        // If we get here, we succeeded, so break the retry loop\n        break;\n\n      } catch (error) {\n        console.error(`Attempt ${retryCount + 1} failed:`, error);\n        if (retryCount === maxRetries - 1) {\n          setError(`Failed to load architecture after ${maxRetries} attempts. Please try again later.`);\n        }\n        retryCount++;\n        if (retryCount < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n        }\n      }\n    }\n    \n    setIsLoading(false);\n  };\n\n  const handleServiceSelection = async (selectedServiceId) => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    \n    if (selectedOption?.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n      \n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"loading\">Loading architecture...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <p className=\"error-message\">{error}</p>\n        <button onClick={loadNextArchitecture}>Try Again</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <h2>{architectureInfo?.name}</h2>\n        <div className=\"score\">Score: {score}</div>\n      </div>\n      \n      <div className=\"architecture-description\">\n        {architectureInfo?.description}\n      </div>\n\n      <div className=\"question-container\">\n        <h3 className=\"question-text\">{currentQuestion?.text}</h3>\n        <p className=\"optimization-focus\">\n          Focus: {currentQuestion?.optimizationFocus}\n        </p>\n      </div>\n\n      <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\n        <div className=\"architecture-section\">\n          <AWSArchitectureDisplay \n            architecture={architecture}\n            missingServices={[currentQuestion?.position]}\n          />\n        </div>\n\n        <div className=\"service-options\">\n          {serviceOptions.map(option => (\n            <DraggableService\n              key={option.id}\n              service={option}\n              onClick={() => handleServiceSelection(option.id)}\n            />\n          ))}\n        </div>\n      </DndContext>\n    </div>\n  );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}