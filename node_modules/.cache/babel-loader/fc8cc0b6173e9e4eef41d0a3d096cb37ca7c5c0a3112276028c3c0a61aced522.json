{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * stores partitionKeyPaths, all the pathsToEncrypt, and encryption settings (cekId, encryption type, and algorithm) for each property.\n * see {@link EncryptionSettingForProperty}\n * @hidden\n */\nexport class EncryptionSettings {\n  // getContainerRid\n  constructor(id, containerRid, partitionKeyPaths) {\n    this.pathsToEncrypt = [];\n    // key is property path\n    this.encryptionSettingForProperties = {};\n    this.id = id;\n    this.containerRid = containerRid;\n    this.partitionKeyPaths = partitionKeyPaths;\n  }\n  setEncryptionSettingForProperty(key, encryptionSettingForProperty) {\n    this.encryptionSettingForProperties[key] = encryptionSettingForProperty;\n  }\n  getEncryptionSettingForProperty(propertyName) {\n    return this.encryptionSettingForProperties[propertyName];\n  }\n}","map":{"version":3,"names":["EncryptionSettings","constructor","id","containerRid","partitionKeyPaths","pathsToEncrypt","encryptionSettingForProperties","setEncryptionSettingForProperty","key","encryptionSettingForProperty","getEncryptionSettingForProperty","propertyName"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/encryption/EncryptionSettings.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionSettingForProperty } from \"./EncryptionSettingForProperty\";\n\n/**\n * stores partitionKeyPaths, all the pathsToEncrypt, and encryption settings (cekId, encryption type, and algorithm) for each property.\n * see {@link EncryptionSettingForProperty}\n * @hidden\n */\nexport class EncryptionSettings {\n  public id: string; // databaseRid + '/' + containerRid\n\n  public containerRid: string;\n\n  public partitionKeyPaths: string[];\n\n  public pathsToEncrypt: string[] = [];\n\n  // key is property path\n  private encryptionSettingForProperties: { [key: string]: EncryptionSettingForProperty } = {};\n\n  // getContainerRid\n  public constructor(id: string, containerRid: string, partitionKeyPaths: string[]) {\n    this.id = id;\n    this.containerRid = containerRid;\n    this.partitionKeyPaths = partitionKeyPaths;\n  }\n\n  public setEncryptionSettingForProperty(\n    key: string,\n    encryptionSettingForProperty: EncryptionSettingForProperty,\n  ): void {\n    this.encryptionSettingForProperties[key] = encryptionSettingForProperty;\n  }\n\n  public getEncryptionSettingForProperty(propertyName: string): EncryptionSettingForProperty {\n    return this.encryptionSettingForProperties[propertyName];\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA;;;;;AAKA,OAAM,MAAOA,kBAAkB;EAY7B;EACAC,YAAmBC,EAAU,EAAEC,YAAoB,EAAEC,iBAA2B;IANzE,KAAAC,cAAc,GAAa,EAAE;IAEpC;IACQ,KAAAC,8BAA8B,GAAoD,EAAE;IAI1F,IAAI,CAACJ,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;EAC5C;EAEOG,+BAA+BA,CACpCC,GAAW,EACXC,4BAA0D;IAE1D,IAAI,CAACH,8BAA8B,CAACE,GAAG,CAAC,GAAGC,4BAA4B;EACzE;EAEOC,+BAA+BA,CAACC,YAAoB;IACzD,OAAO,IAAI,CAACL,8BAA8B,CAACK,YAAY,CAAC;EAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}