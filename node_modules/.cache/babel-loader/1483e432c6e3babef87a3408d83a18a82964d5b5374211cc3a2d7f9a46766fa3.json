{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  try {\n    const response = await fetch('YOUR_LAMBDA_API_GATEWAY_URL', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        difficulty\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to generate architecture');\n    }\n    const data = await response.json();\n\n    // Map service IDs to full service objects\n    const getServiceById = id => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n    return {\n      architecture: {\n        services: data.services.map(id => getServiceById(id)),\n        connections: data.connections\n      },\n      questions: data.missingServices.map(ms => ({\n        text: `Which service would be most cost-efficient for ${ms.position}?`,\n        position: ms.position,\n        missingServices: ms.options.map(opt => opt.service),\n        options: ms.options.map(opt => ({\n          ...getServiceById(opt.service),\n          costEfficiency: opt.costEfficiency,\n          explanation: opt.explanation\n        }))\n      }))\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // The fallback logic is now handled by the Python code\n    throw error;\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","getServiceById","find","s","architecture","services","map","connections","questions","missingServices","ms","text","position","options","opt","service","costEfficiency","explanation","error","console"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  try {\n    const response = await fetch('YOUR_LAMBDA_API_GATEWAY_URL', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ difficulty })\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to generate architecture');\n    }\n\n    const data = await response.json();\n    \n    // Map service IDs to full service objects\n    const getServiceById = (id) => AVAILABLE_SERVICES.find(s => s.id === id) || AVAILABLE_SERVICES[0];\n\n    return {\n      architecture: {\n        services: data.services.map(id => getServiceById(id)),\n        connections: data.connections\n      },\n      questions: data.missingServices.map(ms => ({\n        text: `Which service would be most cost-efficient for ${ms.position}?`,\n        position: ms.position,\n        missingServices: ms.options.map(opt => opt.service),\n        options: ms.options.map(opt => ({\n          ...getServiceById(opt.service),\n          costEfficiency: opt.costEfficiency,\n          explanation: opt.explanation\n        }))\n      }))\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // The fallback logic is now handled by the Python code\n    throw error;\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EAC5CC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AAEF,MAAMC,kBAAkB,GAAG,CACzB;EAAEC,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAwB,CAAC,EACnE;EAAEF,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAoB,CAAC,EAC1D;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,EAC7D;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,EAC7D;EAAEF,EAAE,EAAE,UAAU;EAAEC,IAAI,EAAE,iBAAiB;EAAEC,IAAI,EAAE;AAA0B,CAAC,EAC5E;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAqB,CAAC,CAC9D;AAED,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAW,CAAC;IACrC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMC,cAAc,GAAIhB,EAAE,IAAKD,kBAAkB,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,KAAKA,EAAE,CAAC,IAAID,kBAAkB,CAAC,CAAC,CAAC;IAEjG,OAAO;MACLoB,YAAY,EAAE;QACZC,QAAQ,EAAEN,IAAI,CAACM,QAAQ,CAACC,GAAG,CAACrB,EAAE,IAAIgB,cAAc,CAAChB,EAAE,CAAC,CAAC;QACrDsB,WAAW,EAAER,IAAI,CAACQ;MACpB,CAAC;MACDC,SAAS,EAAET,IAAI,CAACU,eAAe,CAACH,GAAG,CAACI,EAAE,KAAK;QACzCC,IAAI,EAAE,kDAAkDD,EAAE,CAACE,QAAQ,GAAG;QACtEA,QAAQ,EAAEF,EAAE,CAACE,QAAQ;QACrBH,eAAe,EAAEC,EAAE,CAACG,OAAO,CAACP,GAAG,CAACQ,GAAG,IAAIA,GAAG,CAACC,OAAO,CAAC;QACnDF,OAAO,EAAEH,EAAE,CAACG,OAAO,CAACP,GAAG,CAACQ,GAAG,KAAK;UAC9B,GAAGb,cAAc,CAACa,GAAG,CAACC,OAAO,CAAC;UAC9BC,cAAc,EAAEF,GAAG,CAACE,cAAc;UAClCC,WAAW,EAAEH,GAAG,CAACG;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;EAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC;IACA,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SAAS9B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}