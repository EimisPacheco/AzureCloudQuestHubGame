{"ast":null,"code":"import { __asyncGenerator, __await } from \"tslib\";\nimport { buildChangeFeedIterator } from \"./buildChangeFeedIterator\";\nimport { ErrorResponse } from \"../../request\";\n/**\n * @hidden\n * Provides iterator for change feed.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedIteratorBuilder {\n  /**\n   * @internal\n   */\n  constructor(cfOptions, clientContext, container, partitionKeyRangeCache) {\n    this.cfOptions = cfOptions;\n    this.clientContext = clientContext;\n    this.container = container;\n    this.partitionKeyRangeCache = partitionKeyRangeCache;\n    this.isInitialized = false;\n  }\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults() {\n    return true;\n  }\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  getAsyncIterator() {\n    return __asyncGenerator(this, arguments, function* getAsyncIterator_1() {\n      yield __await(this.initializeIterator());\n      do {\n        const result = yield __await(this.iterator.readNext());\n        yield yield __await(result);\n      } while (this.hasMoreResults);\n    });\n  }\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  async readNext() {\n    await this.initializeIterator();\n    return this.iterator.readNext();\n  }\n  async initializeIterator() {\n    if (!this.isInitialized) {\n      try {\n        const iterator = await buildChangeFeedIterator(this.cfOptions, this.clientContext, this.container, this.partitionKeyRangeCache);\n        this.isInitialized = true;\n        this.iterator = iterator;\n      } catch (err) {\n        throw new ErrorResponse(err.message);\n      }\n    }\n  }\n}","map":{"version":3,"names":["buildChangeFeedIterator","ErrorResponse","ChangeFeedIteratorBuilder","constructor","cfOptions","clientContext","container","partitionKeyRangeCache","isInitialized","hasMoreResults","getAsyncIterator","__await","initializeIterator","result","iterator","readNext","err","message"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/client/ChangeFeed/ChangeFeedIteratorBuilder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport type { Container, Resource } from \"../../client\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { buildChangeFeedIterator } from \"./buildChangeFeedIterator\";\nimport type { PartitionKeyRangeCache } from \"../../routing\";\nimport { ErrorResponse } from \"../../request\";\n\n/**\n * @hidden\n * Provides iterator for change feed.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\n\nexport class ChangeFeedIteratorBuilder<T> implements ChangeFeedPullModelIterator<T> {\n  private iterator: ChangeFeedPullModelIterator<T>;\n  private isInitialized: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private cfOptions: ChangeFeedIteratorOptions,\n    private clientContext: ClientContext,\n    private container: Container,\n    private partitionKeyRangeCache: PartitionKeyRangeCache,\n  ) {\n    this.isInitialized = false;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    do {\n      const result = await this.iterator.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    return this.iterator.readNext();\n  }\n\n  private async initializeIterator(): Promise<void> {\n    if (!this.isInitialized) {\n      try {\n        const iterator = await buildChangeFeedIterator(\n          this.cfOptions,\n          this.clientContext,\n          this.container,\n          this.partitionKeyRangeCache,\n        );\n        this.isInitialized = true;\n        this.iterator = iterator;\n      } catch (err) {\n        throw new ErrorResponse(err.message);\n      }\n    }\n  }\n}\n"],"mappings":";AAOA,SAASA,uBAAuB,QAAQ,2BAA2B;AAEnE,SAASC,aAAa,QAAQ,eAAe;AAE7C;;;;;;AAOA,OAAM,MAAOC,yBAAyB;EAGpC;;;EAGAC,YACUC,SAAoC,EACpCC,aAA4B,EAC5BC,SAAoB,EACpBC,sBAA8C;IAH9C,KAAAH,SAAS,GAATA,SAAS;IACT,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,sBAAsB,GAAtBA,sBAAsB;IAE9B,IAAI,CAACC,aAAa,GAAG,KAAK;EAC5B;EAEA;;;EAGA,IAAIC,cAAcA,CAAA;IAChB,OAAO,IAAI;EACb;EAEA;;;EAGcC,gBAAgBA,CAAA;;MAC5B,MAAAC,OAAA,CAAM,IAAI,CAACC,kBAAkB,EAAE;MAC/B,GAAG;QACD,MAAMC,MAAM,GAAG,MAAAF,OAAA,CAAM,IAAI,CAACG,QAAQ,CAACC,QAAQ,EAAE;QAC7C,YAAAJ,OAAA,CAAME,MAAM;MACd,CAAC,QAAQ,IAAI,CAACJ,cAAc;IAC9B,CAAC;;EAED;;;EAGO,MAAMM,QAAQA,CAAA;IACnB,MAAM,IAAI,CAACH,kBAAkB,EAAE;IAC/B,OAAO,IAAI,CAACE,QAAQ,CAACC,QAAQ,EAAE;EACjC;EAEQ,MAAMH,kBAAkBA,CAAA;IAC9B,IAAI,CAAC,IAAI,CAACJ,aAAa,EAAE;MACvB,IAAI;QACF,MAAMM,QAAQ,GAAG,MAAMd,uBAAuB,CAC5C,IAAI,CAACI,SAAS,EACd,IAAI,CAACC,aAAa,EAClB,IAAI,CAACC,SAAS,EACd,IAAI,CAACC,sBAAsB,CAC5B;QACD,IAAI,CAACC,aAAa,GAAG,IAAI;QACzB,IAAI,CAACM,QAAQ,GAAGA,QAAQ;MAC1B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,MAAM,IAAIf,aAAa,CAACe,GAAG,CAACC,OAAO,CAAC;MACtC;IACF;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}