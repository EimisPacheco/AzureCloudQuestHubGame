{"ast":null,"code":"var _process$env$REACT_AP;\nimport { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variables instead of hardcoded URL\nconst API_URL = ((_process$env$REACT_AP = process.env.REACT_APP_FUNCTION_URL) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.replace('generate_architecture', 'service_name_and_definition')) || 'https://generate-architecture.azurewebsites.net/api/service_name_and_definition';\nconst FUNCTION_KEY = process.env.REACT_APP_AZURE_FUNCTION_KEY;\nconsole.log('🔑 Using function URL:', API_URL);\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n\n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n  let attempt = 0;\n  const maxAttempts = 3;\n  while (attempt < maxAttempts) {\n    try {\n      console.log(`🌐 Calling Azure Function (attempt ${attempt + 1}/${maxAttempts})...`);\n      const response = await fetch(API_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': FUNCTION_KEY\n        }\n      });\n      if (response.status === 503) {\n        console.warn(\"⚠️ Received 503 Service Unavailable. Retrying in 3 seconds...\");\n        attempt++;\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        continue;\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('📊 Raw Azure Function response:', data);\n      console.log('📊 Response type:', typeof data);\n      console.log('📊 Response is array:', Array.isArray(data));\n      if (Array.isArray(data)) {\n        console.log('📊 First few items:', data.slice(0, 3));\n      } else {\n        throw new Error('Expected array response from service definitions function');\n      }\n\n      // Format the data to match your expected structure\n      const formattedData = data.map(item => {\n        const serviceData = {\n          name: item.service,\n          definition: item.description,\n          path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n        };\n        return serviceData;\n      });\n      console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n      console.log('✅ Total service definitions:', formattedData.length);\n\n      // Cache the data\n      cachedDefinitions = formattedData;\n      return formattedData;\n    } catch (error) {\n      console.error('❌ Error fetching service definitions:', error);\n      console.error('❌ Error details:', error.message);\n      attempt++;\n      if (attempt < maxAttempts) {\n        console.log(`⏱️ Retrying in 3 seconds... (attempt ${attempt + 1}/${maxAttempts})`);\n        await new Promise(resolve => setTimeout(resolve, 3000));\n      } else {\n        console.log('⚠️ Maximum retry attempts reached, using fallback data');\n        return getFallbackServiceDefinitions();\n      }\n    }\n  }\n  return getFallbackServiceDefinitions();\n};\nconst getFallbackServiceDefinitions = () => {\n  console.log('⚠️ Using fallback data instead');\n  return [{\n    name: \"Kubernetes Services\",\n    definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n    path: \"/azure-icons/services/kubernetes-services.svg\"\n  }, {\n    name: \"Cognitive Services\",\n    definition: \"Adds AI capabilities to applications through pre-built APIs\",\n    path: \"/azure-icons/services/cognitive-services.svg\"\n  }, {\n    name: \"Azure Functions\",\n    definition: \"Event-driven, serverless compute service\",\n    path: \"/azure-icons/services/azure-functions.svg\"\n  }, {\n    name: \"Virtual Machine\",\n    definition: \"Provides on-demand, scalable computing resources\",\n    path: \"/azure-icons/services/virtual-machine.svg\"\n  }, {\n    name: \"Bot Services\",\n    definition: \"Intelligent, serverless bot service that scales on demand\",\n    path: \"/azure-icons/services/bot-services.svg\"\n  }];\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n};","map":{"version":3,"names":["SERVICE_MAPPINGS","API_URL","_process$env$REACT_AP","process","env","REACT_APP_FUNCTION_URL","replace","FUNCTION_KEY","REACT_APP_AZURE_FUNCTION_KEY","console","log","cachedDefinitions","getServiceDefinitions","length","attempt","maxAttempts","response","fetch","method","headers","status","warn","Promise","resolve","setTimeout","ok","Error","data","json","Array","isArray","slice","formattedData","map","item","serviceData","name","service","definition","description","path","toLowerCase","error","message","getFallbackServiceDefinitions","getRandomServices","count","allServices","shuffled","sort","Math","random","getRandomDefinition","services","randomIndex","floor","isGameComplete","matchedServices","totalServices","formatTime","seconds","mins","secs"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/utils/definitionMatchingUtils.js"],"sourcesContent":["import { SERVICE_MAPPINGS } from '../services/IconResolver';\n\n// Use environment variables instead of hardcoded URL\nconst API_URL = process.env.REACT_APP_FUNCTION_URL?.replace('generate_architecture', 'service_name_and_definition') \n  || 'https://generate-architecture.azurewebsites.net/api/service_name_and_definition';\nconst FUNCTION_KEY = process.env.REACT_APP_AZURE_FUNCTION_KEY;\n\nconsole.log('🔑 Using function URL:', API_URL);\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\n\nexport const getServiceDefinitions = async () => {\n  console.log('🔄 Fetching service definitions...');\n  \n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    console.log('📋 Using cached definitions:', cachedDefinitions.length, 'items');\n    return cachedDefinitions;\n  }\n\n  let attempt = 0;\n  const maxAttempts = 3;\n\n  while (attempt < maxAttempts) {\n    try {\n      console.log(`🌐 Calling Azure Function (attempt ${attempt + 1}/${maxAttempts})...`);\n      \n      const response = await fetch(API_URL, {\n        method: 'GET',\n        headers: { \n          'Content-Type': 'application/json',\n          'x-functions-key': FUNCTION_KEY\n        }\n      });\n\n      if (response.status === 503) {\n        console.warn(\"⚠️ Received 503 Service Unavailable. Retrying in 3 seconds...\");\n        attempt++;\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        continue;\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      console.log('📊 Raw Azure Function response:', data);\n      console.log('📊 Response type:', typeof data);\n      console.log('📊 Response is array:', Array.isArray(data));\n      \n      if (Array.isArray(data)) {\n        console.log('📊 First few items:', data.slice(0, 3));\n      } else {\n        throw new Error('Expected array response from service definitions function');\n      }\n      \n      // Format the data to match your expected structure\n      const formattedData = data.map(item => {\n        const serviceData = {\n          name: item.service,\n          definition: item.description,\n          path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n        };\n        return serviceData;\n      });\n      \n      console.log('🔄 Formatted data examples:', formattedData.slice(0, 3));\n      console.log('✅ Total service definitions:', formattedData.length);\n      \n      // Cache the data\n      cachedDefinitions = formattedData;\n      return formattedData;\n      \n    } catch (error) {\n      console.error('❌ Error fetching service definitions:', error);\n      console.error('❌ Error details:', error.message);\n      \n      attempt++;\n      if (attempt < maxAttempts) {\n        console.log(`⏱️ Retrying in 3 seconds... (attempt ${attempt + 1}/${maxAttempts})`);\n        await new Promise(resolve => setTimeout(resolve, 3000));\n      } else {\n        console.log('⚠️ Maximum retry attempts reached, using fallback data');\n        return getFallbackServiceDefinitions();\n      }\n    }\n  }\n  \n  return getFallbackServiceDefinitions();\n};\n\nconst getFallbackServiceDefinitions = () => {\n  console.log('⚠️ Using fallback data instead');\n  return [\n    {\n      name: \"Kubernetes Services\",\n      definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n      path: \"/azure-icons/services/kubernetes-services.svg\"\n    },\n    {\n      name: \"Cognitive Services\",\n      definition: \"Adds AI capabilities to applications through pre-built APIs\",\n      path: \"/azure-icons/services/cognitive-services.svg\"\n    },\n    {\n      name: \"Azure Functions\",\n      definition: \"Event-driven, serverless compute service\",\n      path: \"/azure-icons/services/azure-functions.svg\"\n    },\n    {\n      name: \"Virtual Machine\",\n      definition: \"Provides on-demand, scalable computing resources\",\n      path: \"/azure-icons/services/virtual-machine.svg\"\n    },\n    {\n      name: \"Bot Services\",\n      definition: \"Intelligent, serverless bot service that scales on demand\",\n      path: \"/azure-icons/services/bot-services.svg\"\n    }\n  ];\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}