{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // WARNING: Not recommended for production\n});\nconst generateArchitecture = async difficulty => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AWS architecture expert. Respond only with valid JSON objects containing architecture scenarios.\"\n      }, {\n        role: \"user\",\n        content: `Generate an AWS architecture scenario for ${difficulty} level. \n          Return a JSON object with the following structure:\n          {\n            \"architecture\": {\n              \"services\": [{\"id\": \"service_id\", \"name\": \"Service Name\", \"icon\": \"/aws-icons/service.png\"}],\n              \"connections\": [{\"from\": \"service_id\", \"to\": \"service_id\"}]\n            },\n            \"question\": {\n              \"text\": \"question text\",\n              \"missingServices\": [\"service_id\"]\n            },\n            \"options\": [{\"id\": \"service_id\", \"name\": \"Service Name\", \"icon\": \"/aws-icons/service.png\"}]\n          }\n          Use only these AWS services and their exact icon paths:\n          - AWS Lambda: /aws-icons/lambda.png\n          - Amazon S3: /aws-icons/s3.png\n          - Amazon EC2: /aws-icons/ec2.png\n          - Amazon ECS: /aws-icons/ecs.png`\n      }],\n      temperature: 0.7,\n      max_tokens: 1000\n    });\n    const aiResponse = JSON.parse(completion.choices[0].message.content);\n    console.log('AI Response:', aiResponse);\n\n    // Validate the AI response structure\n    if (!aiResponse.architecture || !aiResponse.question || !aiResponse.options) {\n      throw new Error('Invalid AI response structure');\n    }\n    return aiResponse;\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    // Fallback to mock data on error\n    return {\n      architecture: {\n        services: [{\n          id: 'lambda',\n          name: 'AWS Lambda',\n          icon: '/aws-icons/lambda.png'\n        }, {\n          id: 's3',\n          name: 'Amazon S3',\n          icon: '/aws-icons/s3.png'\n        }, {\n          id: 'ec2',\n          name: 'Amazon EC2',\n          icon: '/aws-icons/ec2.png'\n        }],\n        connections: [{\n          from: 'lambda',\n          to: 's3'\n        }, {\n          from: 'ec2',\n          to: 's3'\n        }]\n      },\n      question: {\n        text: 'Which compute service would you use for serverless architecture?',\n        missingServices: ['lambda']\n      },\n      options: [{\n        id: 'lambda',\n        name: 'AWS Lambda',\n        icon: '/aws-icons/lambda.png'\n      }, {\n        id: 'ec2',\n        name: 'Amazon EC2',\n        icon: '/aws-icons/ec2.png'\n      }, {\n        id: 'ecs',\n        name: 'Amazon ECS',\n        icon: '/aws-icons/ecs.png'\n      }]\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","generateArchitecture","difficulty","completion","chat","completions","create","model","messages","role","content","temperature","max_tokens","aiResponse","JSON","parse","choices","message","console","log","architecture","question","options","Error","error","services","id","name","icon","connections","from","to","text","missingServices"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true  // WARNING: Not recommended for production\n});\n\nconst generateArchitecture = async (difficulty) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { \n          role: \"system\", \n          content: \"You are an AWS architecture expert. Respond only with valid JSON objects containing architecture scenarios.\"\n        },\n        { \n          role: \"user\", \n          content: `Generate an AWS architecture scenario for ${difficulty} level. \n          Return a JSON object with the following structure:\n          {\n            \"architecture\": {\n              \"services\": [{\"id\": \"service_id\", \"name\": \"Service Name\", \"icon\": \"/aws-icons/service.png\"}],\n              \"connections\": [{\"from\": \"service_id\", \"to\": \"service_id\"}]\n            },\n            \"question\": {\n              \"text\": \"question text\",\n              \"missingServices\": [\"service_id\"]\n            },\n            \"options\": [{\"id\": \"service_id\", \"name\": \"Service Name\", \"icon\": \"/aws-icons/service.png\"}]\n          }\n          Use only these AWS services and their exact icon paths:\n          - AWS Lambda: /aws-icons/lambda.png\n          - Amazon S3: /aws-icons/s3.png\n          - Amazon EC2: /aws-icons/ec2.png\n          - Amazon ECS: /aws-icons/ecs.png`\n        }\n      ],\n      temperature: 0.7,\n      max_tokens: 1000\n    });\n\n    const aiResponse = JSON.parse(completion.choices[0].message.content);\n    console.log('AI Response:', aiResponse);\n\n    // Validate the AI response structure\n    if (!aiResponse.architecture || !aiResponse.question || !aiResponse.options) {\n      throw new Error('Invalid AI response structure');\n    }\n\n    return aiResponse;\n\n  } catch (error) {\n    console.error('OpenAI API Error:', error);\n    // Fallback to mock data on error\n    return {\n      architecture: {\n        services: [\n          { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n          { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n          { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' }\n        ],\n        connections: [\n          { from: 'lambda', to: 's3' },\n          { from: 'ec2', to: 's3' }\n        ]\n      },\n      question: {\n        text: 'Which compute service would you use for serverless architecture?',\n        missingServices: ['lambda']\n      },\n      options: [\n        { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n        { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n        { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' }\n      ]\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EAC5CC,uBAAuB,EAAE,IAAI,CAAE;AACjC,CAAC,CAAC;AAEF,MAAMC,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,IAAI;IACF,MAAMC,UAAU,GAAG,MAAMR,MAAM,CAACS,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE;MACX,CAAC,EACD;QACED,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE,6CAA6CR,UAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQ,CAAC,CACF;MACDS,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE;IACd,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACZ,UAAU,CAACa,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACP,OAAO,CAAC;IACpEQ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,UAAU,CAAC;;IAEvC;IACA,IAAI,CAACA,UAAU,CAACO,YAAY,IAAI,CAACP,UAAU,CAACQ,QAAQ,IAAI,CAACR,UAAU,CAACS,OAAO,EAAE;MAC3E,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;IAEA,OAAOV,UAAU;EAEnB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC;IACA,OAAO;MACLJ,YAAY,EAAE;QACZK,QAAQ,EAAE,CACR;UAAEC,EAAE,EAAE,QAAQ;UAAEC,IAAI,EAAE,YAAY;UAAEC,IAAI,EAAE;QAAwB,CAAC,EACnE;UAAEF,EAAE,EAAE,IAAI;UAAEC,IAAI,EAAE,WAAW;UAAEC,IAAI,EAAE;QAAoB,CAAC,EAC1D;UAAEF,EAAE,EAAE,KAAK;UAAEC,IAAI,EAAE,YAAY;UAAEC,IAAI,EAAE;QAAqB,CAAC,CAC9D;QACDC,WAAW,EAAE,CACX;UAAEC,IAAI,EAAE,QAAQ;UAAEC,EAAE,EAAE;QAAK,CAAC,EAC5B;UAAED,IAAI,EAAE,KAAK;UAAEC,EAAE,EAAE;QAAK,CAAC;MAE7B,CAAC;MACDV,QAAQ,EAAE;QACRW,IAAI,EAAE,kEAAkE;QACxEC,eAAe,EAAE,CAAC,QAAQ;MAC5B,CAAC;MACDX,OAAO,EAAE,CACP;QAAEI,EAAE,EAAE,QAAQ;QAAEC,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAwB,CAAC,EACnE;QAAEF,EAAE,EAAE,KAAK;QAAEC,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC7D;QAAEF,EAAE,EAAE,KAAK;QAAEC,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC;IAEjE,CAAC;EACH;AACF,CAAC;AAED,SAAS3B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}