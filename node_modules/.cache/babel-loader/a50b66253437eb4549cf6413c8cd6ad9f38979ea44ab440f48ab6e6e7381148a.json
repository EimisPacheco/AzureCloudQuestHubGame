{"ast":null,"code":"// No need to import CosmosClient anymore\nclass CosmosDBService {\n  constructor() {\n    // Define the function URLs - update with your actual URLs\n    this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n    this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n\n    // Add debug logging to see what's causing it to use localStorage\n    console.log(\"üìä FUNCTION URLS CHECK:\");\n    console.log(`   - Save URL: ${this.saveScoreUrl ? '‚úÖ Found' : '‚ùå Missing'}`);\n    console.log(`   - Leaderboard URL: ${this.getLeaderboardUrl ? '‚úÖ Found' : '‚ùå Missing'}`);\n\n    // FORCE using Azure Functions by setting useLocalStorage to false\n    this.useLocalStorage = false;\n    console.log(`üîß STORAGE MODE: ${this.useLocalStorage ? 'ÔøΩÔøΩ LocalStorage' : '‚òÅÔ∏è Azure Function API'}`);\n  }\n  async saveGameScore(nickname, gameType, score, metadata = {}) {\n    console.log(`üéÆ SCORE SAVE ATTEMPT - Player: ${nickname}, Game: ${gameType}, Score: ${score}`);\n\n    // SKIP localStorage check and force using the API\n    try {\n      const apiUrl = this.saveScoreUrl;\n      console.log(`üîÑ CALLING AZURE FUNCTION: ${apiUrl}`);\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata // Include all metadata\n      };\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(scoreData)\n      });\n      console.log(`üì° API Response Status: ${response.status} ${response.statusText}`);\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error ${response.status}: ${errorText}`);\n      }\n      const result = await response.json();\n      console.log(`‚úÖ SCORE SAVED TO COSMOS DB via Azure Function - ID: ${result.id || 'unknown'}`);\n      return result;\n    } catch (error) {\n      console.error(`‚ùå ERROR SAVING SCORE TO AZURE FUNCTION:`, error);\n\n      // Fallback to localStorage only if API call fails\n      console.log(`‚ö†Ô∏è FALLBACK: Saving to localStorage instead`);\n      const timestamp = new Date().toISOString();\n      const scoreData = {\n        id: `${nickname}_${gameType}_${timestamp}`,\n        nickname,\n        gameType,\n        score,\n        timestamp,\n        ...metadata\n      };\n      const existingScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n      existingScores.push(scoreData);\n      localStorage.setItem('gameScores', JSON.stringify(existingScores));\n      return {\n        id: \"error-id\",\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getLeaderboard(gameType, limit = 10) {\n    console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n\n    // Use localStorage in development\n    if (this.useLocalStorage) {\n      console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n      const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n      const leaderboard = allScores.filter(score => score.gameType === gameType).sort((a, b) => b.score - a.score).slice(0, limit);\n      console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n      return leaderboard;\n    }\n\n    // Use function API in production\n    if (!this.getLeaderboardUrl) {\n      console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n      return [{\n        nickname: \"Example\",\n        score: 100,\n        timestamp: new Date().toISOString()\n      }];\n    }\n    try {\n      const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n      console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n      return data;\n    } catch (error) {\n      console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n      return [];\n    }\n  }\n}\nexport default new CosmosDBService();","map":{"version":3,"names":["CosmosDBService","constructor","saveScoreUrl","process","env","REACT_APP_FUNCTION_SAVE_SCORE_URL","getLeaderboardUrl","REACT_APP_FUNCTION_LEADERBOARD_URL","console","log","useLocalStorage","saveGameScore","nickname","gameType","score","metadata","apiUrl","timestamp","Date","toISOString","scoreData","response","fetch","method","headers","body","JSON","stringify","status","statusText","ok","errorText","text","Error","result","json","id","error","existingScores","parse","localStorage","getItem","push","setItem","success","message","getLeaderboard","limit","allScores","leaderboard","filter","sort","a","b","slice","length","url","encodeURIComponent","split","data"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/CosmosDBService.js"],"sourcesContent":["// No need to import CosmosClient anymore\nclass CosmosDBService {\n    constructor() {\n        // Define the function URLs - update with your actual URLs\n        this.saveScoreUrl = process.env.REACT_APP_FUNCTION_SAVE_SCORE_URL;\n        this.getLeaderboardUrl = process.env.REACT_APP_FUNCTION_LEADERBOARD_URL;\n        \n        // Add debug logging to see what's causing it to use localStorage\n        console.log(\"üìä FUNCTION URLS CHECK:\");\n        console.log(`   - Save URL: ${this.saveScoreUrl ? '‚úÖ Found' : '‚ùå Missing'}`);\n        console.log(`   - Leaderboard URL: ${this.getLeaderboardUrl ? '‚úÖ Found' : '‚ùå Missing'}`);\n        \n        // FORCE using Azure Functions by setting useLocalStorage to false\n        this.useLocalStorage = false;\n        \n        console.log(`üîß STORAGE MODE: ${this.useLocalStorage ? 'ÔøΩÔøΩ LocalStorage' : '‚òÅÔ∏è Azure Function API'}`);\n    }\n\n    async saveGameScore(nickname, gameType, score, metadata = {}) {\n        console.log(`üéÆ SCORE SAVE ATTEMPT - Player: ${nickname}, Game: ${gameType}, Score: ${score}`);\n        \n        // SKIP localStorage check and force using the API\n        try {\n            const apiUrl = this.saveScoreUrl;\n            console.log(`üîÑ CALLING AZURE FUNCTION: ${apiUrl}`);\n            \n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata // Include all metadata\n            };\n            \n            const response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(scoreData)\n            });\n            \n            console.log(`üì° API Response Status: ${response.status} ${response.statusText}`);\n            \n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`HTTP error ${response.status}: ${errorText}`);\n            }\n            \n            const result = await response.json();\n            console.log(`‚úÖ SCORE SAVED TO COSMOS DB via Azure Function - ID: ${result.id || 'unknown'}`);\n            return result;\n        } catch (error) {\n            console.error(`‚ùå ERROR SAVING SCORE TO AZURE FUNCTION:`, error);\n            \n            // Fallback to localStorage only if API call fails\n            console.log(`‚ö†Ô∏è FALLBACK: Saving to localStorage instead`);\n            const timestamp = new Date().toISOString();\n            const scoreData = {\n                id: `${nickname}_${gameType}_${timestamp}`,\n                nickname,\n                gameType,\n                score,\n                timestamp,\n                ...metadata\n            };\n            \n            const existingScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n            existingScores.push(scoreData);\n            localStorage.setItem('gameScores', JSON.stringify(existingScores));\n            \n            return { id: \"error-id\", success: false, error: error.message };\n        }\n    }\n\n    async getLeaderboard(gameType, limit = 10) {\n        console.log(`üèÜ LEADERBOARD REQUEST - Game: ${gameType}, Limit: ${limit}`);\n        \n        // Use localStorage in development\n        if (this.useLocalStorage) {\n            console.log(`üì¶ [LocalStorage] Getting leaderboard for: ${gameType}`);\n            const allScores = JSON.parse(localStorage.getItem('gameScores') || '[]');\n            const leaderboard = allScores\n                .filter(score => score.gameType === gameType)\n                .sort((a, b) => b.score - a.score)\n                .slice(0, limit);\n                \n            console.log(`‚úÖ [LocalStorage] Retrieved ${leaderboard.length} leaderboard entries`);\n            return leaderboard;\n        }\n        \n        // Use function API in production\n        if (!this.getLeaderboardUrl) {\n            console.log(`‚ö†Ô∏è [Mock API] Would get leaderboard for: ${gameType}`);\n            return [{ nickname: \"Example\", score: 100, timestamp: new Date().toISOString() }];\n        }\n        \n        try {\n            const url = `${this.getLeaderboardUrl}?gameType=${encodeURIComponent(gameType)}&limit=${limit}`;\n            console.log(`üîÑ Calling Azure Function: ${url.split('?')[0]}`);\n            \n            const response = await fetch(url);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            const data = await response.json();\n            console.log(`‚úÖ LEADERBOARD RETRIEVED SUCCESSFULLY - ${data.length} entries`);\n            return data;\n        } catch (error) {\n            console.error(`‚ùå ERROR RETRIEVING LEADERBOARD from Azure Function:`, error);\n            return [];\n        }\n    }\n}\n\nexport default new CosmosDBService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}