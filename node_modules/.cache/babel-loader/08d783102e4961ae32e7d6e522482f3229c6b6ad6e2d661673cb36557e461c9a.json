{"ast":null,"code":"import { API } from 'aws-amplify';\nclass AWSGameService {\n  async updateLeaderboard(score, difficulty) {\n    try {\n      // For now, we'll just log the score since AWS setup isn't complete\n      console.log('Score saved:', {\n        score,\n        difficulty\n      });\n\n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.post('gameApi', '/leaderboard', {\n        body: {\n          score,\n          difficulty,\n          timestamp: new Date().toISOString()\n        }\n      });\n      return response;\n      */\n\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating leaderboard:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getLeaderboard() {\n    try {\n      // For now, return mock data\n      return {\n        items: [{\n          userId: 'player1',\n          score: 100,\n          difficulty: 'BEGINNER'\n        }, {\n          userId: 'player2',\n          score: 200,\n          difficulty: 'INTERMEDIATE'\n        }, {\n          userId: 'player3',\n          score: 300,\n          difficulty: 'ADVANCED'\n        }]\n      };\n\n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.get('gameApi', '/leaderboard');\n      return response;\n      */\n    } catch (error) {\n      console.error('Error getting leaderboard:', error);\n      return {\n        items: []\n      };\n    }\n  }\n  async saveGameState(gameState) {\n    try {\n      // For now, just log the game state\n      console.log('Game state saved:', gameState);\n\n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.post('gameApi', '/games', {\n        body: {\n          gameState,\n          timestamp: new Date().toISOString()\n        }\n      });\n      return response;\n      */\n\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error saving game state:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async getGameState() {\n    try {\n      // For now, return null to indicate no saved state\n      return null;\n\n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.get('gameApi', '/games/current');\n      return response;\n      */\n    } catch (error) {\n      console.error('Error getting game state:', error);\n      return null;\n    }\n  }\n}\nexport const awsGameService = new AWSGameService();","map":{"version":3,"names":["API","AWSGameService","updateLeaderboard","score","difficulty","console","log","success","error","message","getLeaderboard","items","userId","saveGameState","gameState","getGameState","awsGameService"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/AWSGameService.js"],"sourcesContent":["import { API } from 'aws-amplify';\n\nclass AWSGameService {\n  async updateLeaderboard(score, difficulty) {\n    try {\n      // For now, we'll just log the score since AWS setup isn't complete\n      console.log('Score saved:', { score, difficulty });\n      \n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.post('gameApi', '/leaderboard', {\n        body: {\n          score,\n          difficulty,\n          timestamp: new Date().toISOString()\n        }\n      });\n      return response;\n      */\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating leaderboard:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getLeaderboard() {\n    try {\n      // For now, return mock data\n      return {\n        items: [\n          { userId: 'player1', score: 100, difficulty: 'BEGINNER' },\n          { userId: 'player2', score: 200, difficulty: 'INTERMEDIATE' },\n          { userId: 'player3', score: 300, difficulty: 'ADVANCED' }\n        ]\n      };\n      \n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.get('gameApi', '/leaderboard');\n      return response;\n      */\n    } catch (error) {\n      console.error('Error getting leaderboard:', error);\n      return { items: [] };\n    }\n  }\n\n  async saveGameState(gameState) {\n    try {\n      // For now, just log the game state\n      console.log('Game state saved:', gameState);\n      \n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.post('gameApi', '/games', {\n        body: {\n          gameState,\n          timestamp: new Date().toISOString()\n        }\n      });\n      return response;\n      */\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error saving game state:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async getGameState() {\n    try {\n      // For now, return null to indicate no saved state\n      return null;\n      \n      // Once AWS is set up, uncomment this code:\n      /*\n      const response = await API.get('gameApi', '/games/current');\n      return response;\n      */\n    } catch (error) {\n      console.error('Error getting game state:', error);\n      return null;\n    }\n  }\n}\n\nexport const awsGameService = new AWSGameService(); "],"mappings":"AAAA,SAASA,GAAG,QAAQ,aAAa;AAEjC,MAAMC,cAAc,CAAC;EACnB,MAAMC,iBAAiBA,CAACC,KAAK,EAAEC,UAAU,EAAE;IACzC,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;QAAEH,KAAK;QAAEC;MAAW,CAAC,CAAC;;MAElD;MACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM,OAAO;QAAEG,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACC;MAAQ,CAAC;IACjD;EACF;EAEA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF;MACA,OAAO;QACLC,KAAK,EAAE,CACL;UAAEC,MAAM,EAAE,SAAS;UAAET,KAAK,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAW,CAAC,EACzD;UAAEQ,MAAM,EAAE,SAAS;UAAET,KAAK,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAe,CAAC,EAC7D;UAAEQ,MAAM,EAAE,SAAS;UAAET,KAAK,EAAE,GAAG;UAAEC,UAAU,EAAE;QAAW,CAAC;MAE7D,CAAC;;MAED;MACA;AACN;AACA;AACA;IACI,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO;QAAEG,KAAK,EAAE;MAAG,CAAC;IACtB;EACF;EAEA,MAAME,aAAaA,CAACC,SAAS,EAAE;IAC7B,IAAI;MACF;MACAT,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,SAAS,CAAC;;MAE3C;MACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM,OAAO;QAAEP,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEA,KAAK,CAACC;MAAQ,CAAC;IACjD;EACF;EAEA,MAAMM,YAAYA,CAAA,EAAG;IACnB,IAAI;MACF;MACA,OAAO,IAAI;;MAEX;MACA;AACN;AACA;AACA;IACI,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;EACF;AACF;AAEA,OAAO,MAAMQ,cAAc,GAAG,IAAIf,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}