{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { setAuthorizationHeader } from \"../auth\";\nimport { Constants, HTTPMethod, jsonStringifyAndEscapeNonASCII, ResourceType, SDKSupportedCapabilities } from \"../common\";\nimport { defaultLogger } from \"../common/logger\";\nimport { ChangeFeedMode } from \"../client/ChangeFeed\";\n// ----------------------------------------------------------------------------\n// Utility methods\n//\n/** @hidden */\nfunction javaScriptFriendlyJSONStringify(s) {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n}\n/** @hidden */\nexport function bodyFromData(data) {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n  return data;\n}\nconst JsonContentType = \"application/json\";\n/**\n * @hidden\n */\nexport async function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey\n}) {\n  const headers = Object.assign({\n    [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n    [Constants.HttpHeaders.EnableCrossPartitionQuery]: true\n  }, defaultHeaders);\n  // Adding SDKSupportedCapabilities header to hint that SDK supports partition merge\n  headers[Constants.HttpHeaders.SDKSupportedCapabilities] = SDKSupportedCapabilities.PartitionMerge;\n  if (useMultipleWriteLocations) {\n    headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n  }\n  if (options.continuationTokenLimitInKB) {\n    headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] = options.continuationTokenLimitInKB;\n  }\n  if (options.continuationToken) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n  } else if (options.continuation) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuation;\n  }\n  if (options.preTriggerInclude) {\n    headers[Constants.HttpHeaders.PreTriggerInclude] = options.preTriggerInclude.constructor === Array ? options.preTriggerInclude.join(\",\") : options.preTriggerInclude;\n  }\n  if (options.postTriggerInclude) {\n    headers[Constants.HttpHeaders.PostTriggerInclude] = options.postTriggerInclude.constructor === Array ? options.postTriggerInclude.join(\",\") : options.postTriggerInclude;\n  }\n  if (options.offerType) {\n    headers[Constants.HttpHeaders.OfferType] = options.offerType;\n  }\n  if (options.offerThroughput) {\n    headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n  }\n  if (options.maxItemCount) {\n    headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n  }\n  if (options.accessCondition) {\n    if (options.accessCondition.type === \"IfMatch\") {\n      headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n    } else {\n      headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n    }\n  }\n  if (options.useAllVersionsAndDeletesFeed) {\n    // headers required for reading feed in allVersionsAndDeletes mode\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.AllVersionsAndDeletes;\n    headers[Constants.HttpHeaders.ChangeFeedWireFormatVersion] = Constants.AllVersionsAndDeletesChangeFeedWireFormatVersion;\n  }\n  if (options.useIncrementalFeed || options.useLatestVersionFeed) {\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.LatestVersion;\n  }\n  if (options.indexingDirective) {\n    headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n  }\n  if (options.consistencyLevel) {\n    headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n  }\n  if (options.priorityLevel) {\n    headers[Constants.HttpHeaders.PriorityLevel] = options.priorityLevel;\n  }\n  if (options.throughputBucket) {\n    headers[Constants.HttpHeaders.ThroughputBucket] = options.throughputBucket;\n  }\n  if (options.maxIntegratedCacheStalenessInMs && resourceType === ResourceType.item) {\n    if (typeof options.maxIntegratedCacheStalenessInMs === \"number\") {\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] = options.maxIntegratedCacheStalenessInMs.toString();\n    } else {\n      defaultLogger.error(`RangeError: maxIntegratedCacheStalenessInMs \"${options.maxIntegratedCacheStalenessInMs}\" is not a valid parameter.`);\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] = \"null\";\n    }\n  }\n  if (options.bypassIntegratedCache) {\n    headers[Constants.HttpHeaders.DedicatedGatewayPerRequestBypassCache] = options.bypassIntegratedCache.toString();\n  }\n  if (options.resourceTokenExpirySeconds) {\n    headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n  }\n  if (options.sessionToken) {\n    headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n  }\n  if (options.enableScanInQuery) {\n    headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n  }\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n  }\n  if (options.populateQueryMetrics) {\n    headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n  }\n  if (options.maxDegreeOfParallelism !== undefined && options.maxDegreeOfParallelism !== 0 && options.maxDegreeOfParallelism !== 1) {\n    headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n  }\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n  }\n  if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n    headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n  }\n  if (clientOptions.key || clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n  }\n  if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n    if (!headers[Constants.HttpHeaders.ContentType]) {\n      headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n    }\n  }\n  if (!headers[Constants.HttpHeaders.Accept]) {\n    headers[Constants.HttpHeaders.Accept] = JsonContentType;\n  }\n  if (partitionKeyRangeId !== undefined) {\n    headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n  }\n  if (options.enableScriptLogging) {\n    headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n  }\n  if (options.disableRUPerMinuteUsage) {\n    headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n  }\n  if (options.populateIndexMetrics) {\n    headers[Constants.HttpHeaders.PopulateIndexMetrics] = options.populateIndexMetrics;\n  }\n  if (clientOptions.clientEncryptionOptions) {\n    headers[Constants.HttpHeaders.IsClientEncryptedHeader] = true;\n    if (options.containerRid) {\n      headers[Constants.HttpHeaders.IntendedCollectionHeader] = options.containerRid;\n    }\n  }\n  if (clientOptions.key || clientOptions.resourceTokens || clientOptions.tokenProvider || clientOptions.permissionFeed) {\n    await setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n  }\n  return headers;\n}","map":{"version":3,"names":["setAuthorizationHeader","Constants","HTTPMethod","jsonStringifyAndEscapeNonASCII","ResourceType","SDKSupportedCapabilities","defaultLogger","ChangeFeedMode","javaScriptFriendlyJSONStringify","s","JSON","stringify","replace","bodyFromData","data","JsonContentType","getHeaders","clientOptions","defaultHeaders","verb","path","resourceId","resourceType","options","partitionKeyRangeId","useMultipleWriteLocations","partitionKey","headers","Object","assign","HttpHeaders","ResponseContinuationTokenLimitInKB","EnableCrossPartitionQuery","PartitionMerge","ALLOW_MULTIPLE_WRITES","continuationTokenLimitInKB","continuationToken","Continuation","continuation","preTriggerInclude","PreTriggerInclude","constructor","Array","join","postTriggerInclude","PostTriggerInclude","offerType","OfferType","offerThroughput","OfferThroughput","maxItemCount","PageSize","accessCondition","type","IfMatch","condition","IfNoneMatch","useAllVersionsAndDeletesFeed","A_IM","AllVersionsAndDeletes","ChangeFeedWireFormatVersion","AllVersionsAndDeletesChangeFeedWireFormatVersion","useIncrementalFeed","useLatestVersionFeed","LatestVersion","indexingDirective","IndexingDirective","consistencyLevel","ConsistencyLevel","priorityLevel","PriorityLevel","throughputBucket","ThroughputBucket","maxIntegratedCacheStalenessInMs","item","DedicatedGatewayPerRequestCacheStaleness","toString","error","bypassIntegratedCache","DedicatedGatewayPerRequestBypassCache","resourceTokenExpirySeconds","ResourceTokenExpiry","sessionToken","SessionToken","enableScanInQuery","EnableScanInQuery","populateQuotaInfo","PopulateQuotaInfo","populateQueryMetrics","PopulateQueryMetrics","maxDegreeOfParallelism","undefined","ParallelizeCrossPartitionQuery","PartitionKey","key","tokenProvider","XDate","Date","toUTCString","post","put","ContentType","Accept","PartitionKeyRangeID","enableScriptLogging","EnableScriptLogging","disableRUPerMinuteUsage","DisableRUPerMinuteUsage","populateIndexMetrics","PopulateIndexMetrics","clientEncryptionOptions","IsClientEncryptedHeader","containerRid","IntendedCollectionHeader","resourceTokens","permissionFeed"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/request/request.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { setAuthorizationHeader } from \"../auth\";\nimport {\n  Constants,\n  HTTPMethod,\n  jsonStringifyAndEscapeNonASCII,\n  ResourceType,\n  SDKSupportedCapabilities,\n} from \"../common\";\nimport type { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport type { PartitionKeyInternal } from \"../documents\";\nimport type { CosmosHeaders } from \"../queryExecutionContext\";\nimport type { FeedOptions, RequestOptions } from \"./index\";\nimport { defaultLogger } from \"../common/logger\";\nimport { ChangeFeedMode } from \"../client/ChangeFeed\";\n// ----------------------------------------------------------------------------\n// Utility methods\n//\n\n/** @hidden */\nfunction javaScriptFriendlyJSONStringify(s: unknown): string {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\");\n}\n\n/** @hidden */\nexport function bodyFromData(data: Buffer | string | Record<string, unknown>): string {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n  return data;\n}\n\n/**\n * @hidden\n */\ninterface GetHeadersOptions {\n  clientOptions: CosmosClientOptions;\n  defaultHeaders: CosmosHeaders;\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  options: RequestOptions & FeedOptions;\n  partitionKeyRangeId?: string;\n  useMultipleWriteLocations?: boolean;\n  partitionKey?: PartitionKeyInternal;\n}\n\nconst JsonContentType = \"application/json\";\n\n/**\n * @hidden\n */\nexport async function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey,\n}: GetHeadersOptions): Promise<CosmosHeaders> {\n  const headers: CosmosHeaders = {\n    [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n    [Constants.HttpHeaders.EnableCrossPartitionQuery]: true,\n    ...defaultHeaders,\n  };\n\n  // Adding SDKSupportedCapabilities header to hint that SDK supports partition merge\n  headers[Constants.HttpHeaders.SDKSupportedCapabilities] = SDKSupportedCapabilities.PartitionMerge;\n\n  if (useMultipleWriteLocations) {\n    headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n  }\n\n  if (options.continuationTokenLimitInKB) {\n    headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] =\n      options.continuationTokenLimitInKB;\n  }\n  if (options.continuationToken) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n  } else if (options.continuation) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuation;\n  }\n\n  if (options.preTriggerInclude) {\n    headers[Constants.HttpHeaders.PreTriggerInclude] =\n      options.preTriggerInclude.constructor === Array\n        ? (options.preTriggerInclude as string[]).join(\",\")\n        : (options.preTriggerInclude as string);\n  }\n\n  if (options.postTriggerInclude) {\n    headers[Constants.HttpHeaders.PostTriggerInclude] =\n      options.postTriggerInclude.constructor === Array\n        ? (options.postTriggerInclude as string[]).join(\",\")\n        : (options.postTriggerInclude as string);\n  }\n\n  if (options.offerType) {\n    headers[Constants.HttpHeaders.OfferType] = options.offerType;\n  }\n\n  if (options.offerThroughput) {\n    headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n  }\n\n  if (options.maxItemCount) {\n    headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n  }\n\n  if (options.accessCondition) {\n    if (options.accessCondition.type === \"IfMatch\") {\n      headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n    } else {\n      headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n    }\n  }\n\n  if (options.useAllVersionsAndDeletesFeed) {\n    // headers required for reading feed in allVersionsAndDeletes mode\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.AllVersionsAndDeletes;\n    headers[Constants.HttpHeaders.ChangeFeedWireFormatVersion] =\n      Constants.AllVersionsAndDeletesChangeFeedWireFormatVersion;\n  }\n\n  if (options.useIncrementalFeed || options.useLatestVersionFeed) {\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.LatestVersion;\n  }\n\n  if (options.indexingDirective) {\n    headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n  }\n\n  if (options.consistencyLevel) {\n    headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n  }\n\n  if (options.priorityLevel) {\n    headers[Constants.HttpHeaders.PriorityLevel] = options.priorityLevel;\n  }\n\n  if (options.throughputBucket) {\n    headers[Constants.HttpHeaders.ThroughputBucket] = options.throughputBucket;\n  }\n\n  if (options.maxIntegratedCacheStalenessInMs && resourceType === ResourceType.item) {\n    if (typeof options.maxIntegratedCacheStalenessInMs === \"number\") {\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] =\n        options.maxIntegratedCacheStalenessInMs.toString();\n    } else {\n      defaultLogger.error(\n        `RangeError: maxIntegratedCacheStalenessInMs \"${options.maxIntegratedCacheStalenessInMs}\" is not a valid parameter.`,\n      );\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] = \"null\";\n    }\n  }\n\n  if (options.bypassIntegratedCache) {\n    headers[Constants.HttpHeaders.DedicatedGatewayPerRequestBypassCache] =\n      options.bypassIntegratedCache.toString();\n  }\n\n  if (options.resourceTokenExpirySeconds) {\n    headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n  }\n\n  if (options.sessionToken) {\n    headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n  }\n\n  if (options.enableScanInQuery) {\n    headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n  }\n\n  if (options.populateQueryMetrics) {\n    headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n  }\n\n  if (\n    options.maxDegreeOfParallelism !== undefined &&\n    options.maxDegreeOfParallelism !== 0 &&\n    options.maxDegreeOfParallelism !== 1\n  ) {\n    headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n  }\n\n  if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n    headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n  }\n\n  if (clientOptions.key || clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n  }\n\n  if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n    if (!headers[Constants.HttpHeaders.ContentType]) {\n      headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n    }\n  }\n\n  if (!headers[Constants.HttpHeaders.Accept]) {\n    headers[Constants.HttpHeaders.Accept] = JsonContentType;\n  }\n\n  if (partitionKeyRangeId !== undefined) {\n    headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n  }\n\n  if (options.enableScriptLogging) {\n    headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n  }\n\n  if (options.disableRUPerMinuteUsage) {\n    headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n  }\n\n  if (options.populateIndexMetrics) {\n    headers[Constants.HttpHeaders.PopulateIndexMetrics] = options.populateIndexMetrics;\n  }\n\n  if (clientOptions.clientEncryptionOptions) {\n    headers[Constants.HttpHeaders.IsClientEncryptedHeader] = true;\n    if (options.containerRid) {\n      headers[Constants.HttpHeaders.IntendedCollectionHeader] = options.containerRid;\n    }\n  }\n\n  if (\n    clientOptions.key ||\n    clientOptions.resourceTokens ||\n    clientOptions.tokenProvider ||\n    clientOptions.permissionFeed\n  ) {\n    await setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n  }\n  return headers;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,sBAAsB,QAAQ,SAAS;AAChD,SACEC,SAAS,EACTC,UAAU,EACVC,8BAA8B,EAC9BC,YAAY,EACZC,wBAAwB,QACnB,WAAW;AAKlB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,cAAc,QAAQ,sBAAsB;AACrD;AACA;AACA;AAEA;AACA,SAASC,+BAA+BA,CAACC,CAAU;EACjD;EACA;EACA,OAAOC,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CACrBG,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAC7BA,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC;AAClC;AAEA;AACA,OAAM,SAAUC,YAAYA,CAACC,IAA+C;EAC1E,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAON,+BAA+B,CAACM,IAAI,CAAC;EAC9C;EACA,OAAOA,IAAI;AACb;AAkBA,MAAMC,eAAe,GAAG,kBAAkB;AAE1C;;;AAGA,OAAO,eAAeC,UAAUA,CAAC;EAC/BC,aAAa;EACbC,cAAc;EACdC,IAAI;EACJC,IAAI;EACJC,UAAU;EACVC,YAAY;EACZC,OAAO,GAAG,EAAE;EACZC,mBAAmB;EACnBC,yBAAyB;EACzBC;AAAY,CACM;EAClB,MAAMC,OAAO,GAAAC,MAAA,CAAAC,MAAA;IACX,CAAC5B,SAAS,CAAC6B,WAAW,CAACC,kCAAkC,GAAG,CAAC;IAC7D,CAAC9B,SAAS,CAAC6B,WAAW,CAACE,yBAAyB,GAAG;EAAI,GACpDd,cAAc,CAClB;EAED;EACAS,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACzB,wBAAwB,CAAC,GAAGA,wBAAwB,CAAC4B,cAAc;EAEjG,IAAIR,yBAAyB,EAAE;IAC7BE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACI,qBAAqB,CAAC,GAAG,IAAI;EAC7D;EAEA,IAAIX,OAAO,CAACY,0BAA0B,EAAE;IACtCR,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACC,kCAAkC,CAAC,GAC/DR,OAAO,CAACY,0BAA0B;EACtC;EACA,IAAIZ,OAAO,CAACa,iBAAiB,EAAE;IAC7BT,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACO,YAAY,CAAC,GAAGd,OAAO,CAACa,iBAAiB;EACzE,CAAC,MAAM,IAAIb,OAAO,CAACe,YAAY,EAAE;IAC/BX,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACO,YAAY,CAAC,GAAGd,OAAO,CAACe,YAAY;EACpE;EAEA,IAAIf,OAAO,CAACgB,iBAAiB,EAAE;IAC7BZ,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACU,iBAAiB,CAAC,GAC9CjB,OAAO,CAACgB,iBAAiB,CAACE,WAAW,KAAKC,KAAK,GAC1CnB,OAAO,CAACgB,iBAA8B,CAACI,IAAI,CAAC,GAAG,CAAC,GAChDpB,OAAO,CAACgB,iBAA4B;EAC7C;EAEA,IAAIhB,OAAO,CAACqB,kBAAkB,EAAE;IAC9BjB,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACe,kBAAkB,CAAC,GAC/CtB,OAAO,CAACqB,kBAAkB,CAACH,WAAW,KAAKC,KAAK,GAC3CnB,OAAO,CAACqB,kBAA+B,CAACD,IAAI,CAAC,GAAG,CAAC,GACjDpB,OAAO,CAACqB,kBAA6B;EAC9C;EAEA,IAAIrB,OAAO,CAACuB,SAAS,EAAE;IACrBnB,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACiB,SAAS,CAAC,GAAGxB,OAAO,CAACuB,SAAS;EAC9D;EAEA,IAAIvB,OAAO,CAACyB,eAAe,EAAE;IAC3BrB,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACmB,eAAe,CAAC,GAAG1B,OAAO,CAACyB,eAAe;EAC1E;EAEA,IAAIzB,OAAO,CAAC2B,YAAY,EAAE;IACxBvB,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACqB,QAAQ,CAAC,GAAG5B,OAAO,CAAC2B,YAAY;EAChE;EAEA,IAAI3B,OAAO,CAAC6B,eAAe,EAAE;IAC3B,IAAI7B,OAAO,CAAC6B,eAAe,CAACC,IAAI,KAAK,SAAS,EAAE;MAC9C1B,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACwB,OAAO,CAAC,GAAG/B,OAAO,CAAC6B,eAAe,CAACG,SAAS;IAC5E,CAAC,MAAM;MACL5B,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC0B,WAAW,CAAC,GAAGjC,OAAO,CAAC6B,eAAe,CAACG,SAAS;IAChF;EACF;EAEA,IAAIhC,OAAO,CAACkC,4BAA4B,EAAE;IACxC;IACA9B,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC4B,IAAI,CAAC,GAAGnD,cAAc,CAACoD,qBAAqB;IAC1EhC,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC8B,2BAA2B,CAAC,GACxD3D,SAAS,CAAC4D,gDAAgD;EAC9D;EAEA,IAAItC,OAAO,CAACuC,kBAAkB,IAAIvC,OAAO,CAACwC,oBAAoB,EAAE;IAC9DpC,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC4B,IAAI,CAAC,GAAGnD,cAAc,CAACyD,aAAa;EACpE;EAEA,IAAIzC,OAAO,CAAC0C,iBAAiB,EAAE;IAC7BtC,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACoC,iBAAiB,CAAC,GAAG3C,OAAO,CAAC0C,iBAAiB;EAC9E;EAEA,IAAI1C,OAAO,CAAC4C,gBAAgB,EAAE;IAC5BxC,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACsC,gBAAgB,CAAC,GAAG7C,OAAO,CAAC4C,gBAAgB;EAC5E;EAEA,IAAI5C,OAAO,CAAC8C,aAAa,EAAE;IACzB1C,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACwC,aAAa,CAAC,GAAG/C,OAAO,CAAC8C,aAAa;EACtE;EAEA,IAAI9C,OAAO,CAACgD,gBAAgB,EAAE;IAC5B5C,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC0C,gBAAgB,CAAC,GAAGjD,OAAO,CAACgD,gBAAgB;EAC5E;EAEA,IAAIhD,OAAO,CAACkD,+BAA+B,IAAInD,YAAY,KAAKlB,YAAY,CAACsE,IAAI,EAAE;IACjF,IAAI,OAAOnD,OAAO,CAACkD,+BAA+B,KAAK,QAAQ,EAAE;MAC/D9C,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC6C,wCAAwC,CAAC,GACrEpD,OAAO,CAACkD,+BAA+B,CAACG,QAAQ,EAAE;IACtD,CAAC,MAAM;MACLtE,aAAa,CAACuE,KAAK,CACjB,gDAAgDtD,OAAO,CAACkD,+BAA+B,6BAA6B,CACrH;MACD9C,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC6C,wCAAwC,CAAC,GAAG,MAAM;IAClF;EACF;EAEA,IAAIpD,OAAO,CAACuD,qBAAqB,EAAE;IACjCnD,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACiD,qCAAqC,CAAC,GAClExD,OAAO,CAACuD,qBAAqB,CAACF,QAAQ,EAAE;EAC5C;EAEA,IAAIrD,OAAO,CAACyD,0BAA0B,EAAE;IACtCrD,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACmD,mBAAmB,CAAC,GAAG1D,OAAO,CAACyD,0BAA0B;EACzF;EAEA,IAAIzD,OAAO,CAAC2D,YAAY,EAAE;IACxBvD,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACqD,YAAY,CAAC,GAAG5D,OAAO,CAAC2D,YAAY;EACpE;EAEA,IAAI3D,OAAO,CAAC6D,iBAAiB,EAAE;IAC7BzD,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACuD,iBAAiB,CAAC,GAAG9D,OAAO,CAAC6D,iBAAiB;EAC9E;EAEA,IAAI7D,OAAO,CAAC+D,iBAAiB,EAAE;IAC7B3D,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACyD,iBAAiB,CAAC,GAAGhE,OAAO,CAAC+D,iBAAiB;EAC9E;EAEA,IAAI/D,OAAO,CAACiE,oBAAoB,EAAE;IAChC7D,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC2D,oBAAoB,CAAC,GAAGlE,OAAO,CAACiE,oBAAoB;EACpF;EAEA,IACEjE,OAAO,CAACmE,sBAAsB,KAAKC,SAAS,IAC5CpE,OAAO,CAACmE,sBAAsB,KAAK,CAAC,IACpCnE,OAAO,CAACmE,sBAAsB,KAAK,CAAC,EACpC;IACA/D,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC8D,8BAA8B,CAAC,GAAG,IAAI;EACtE;EAEA,IAAIrE,OAAO,CAAC+D,iBAAiB,EAAE;IAC7B3D,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACyD,iBAAiB,CAAC,GAAG,IAAI;EACzD;EAEA,IAAI7D,YAAY,KAAKiE,SAAS,IAAI,CAAChE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC+D,YAAY,CAAC,EAAE;IAC9ElE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC+D,YAAY,CAAC,GAAG1F,8BAA8B,CAACuB,YAAY,CAAC;EAC5F;EAEA,IAAIT,aAAa,CAAC6E,GAAG,IAAI7E,aAAa,CAAC8E,aAAa,EAAE;IACpDpE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACkE,KAAK,CAAC,GAAG,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;EACjE;EAEA,IAAI/E,IAAI,KAAKjB,UAAU,CAACiG,IAAI,IAAIhF,IAAI,KAAKjB,UAAU,CAACkG,GAAG,EAAE;IACvD,IAAI,CAACzE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACuE,WAAW,CAAC,EAAE;MAC/C1E,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACuE,WAAW,CAAC,GAAGtF,eAAe;IAC9D;EACF;EAEA,IAAI,CAACY,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACwE,MAAM,CAAC,EAAE;IAC1C3E,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACwE,MAAM,CAAC,GAAGvF,eAAe;EACzD;EAEA,IAAIS,mBAAmB,KAAKmE,SAAS,EAAE;IACrChE,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACyE,mBAAmB,CAAC,GAAG/E,mBAAmB;EAC1E;EAEA,IAAID,OAAO,CAACiF,mBAAmB,EAAE;IAC/B7E,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC2E,mBAAmB,CAAC,GAAGlF,OAAO,CAACiF,mBAAmB;EAClF;EAEA,IAAIjF,OAAO,CAACmF,uBAAuB,EAAE;IACnC/E,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC6E,uBAAuB,CAAC,GAAG,IAAI;EAC/D;EAEA,IAAIpF,OAAO,CAACqF,oBAAoB,EAAE;IAChCjF,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAAC+E,oBAAoB,CAAC,GAAGtF,OAAO,CAACqF,oBAAoB;EACpF;EAEA,IAAI3F,aAAa,CAAC6F,uBAAuB,EAAE;IACzCnF,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACiF,uBAAuB,CAAC,GAAG,IAAI;IAC7D,IAAIxF,OAAO,CAACyF,YAAY,EAAE;MACxBrF,OAAO,CAAC1B,SAAS,CAAC6B,WAAW,CAACmF,wBAAwB,CAAC,GAAG1F,OAAO,CAACyF,YAAY;IAChF;EACF;EAEA,IACE/F,aAAa,CAAC6E,GAAG,IACjB7E,aAAa,CAACiG,cAAc,IAC5BjG,aAAa,CAAC8E,aAAa,IAC3B9E,aAAa,CAACkG,cAAc,EAC5B;IACA,MAAMnH,sBAAsB,CAACiB,aAAa,EAAEE,IAAI,EAAEC,IAAI,EAAEC,UAAU,EAAEC,YAAY,EAAEK,OAAO,CAAC;EAC5F;EACA,OAAOA,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}