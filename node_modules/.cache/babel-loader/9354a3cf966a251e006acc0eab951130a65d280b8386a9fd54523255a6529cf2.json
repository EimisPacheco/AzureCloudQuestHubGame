{"ast":null,"code":"const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App-Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n  BLOCKCHAIN: 'Arch_Blockchain',\n  BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n  MANAGEMENT: 'Arch_Management-Governance',\n  NETWORKING: 'Arch_Networking-Content-Delivery',\n  SECURITY: 'Arch_Security-Identity-Compliance',\n  STORAGE: 'Arch_Storage'\n};\nconst SERVICE_MAPPINGS = {\n  \"Amazon Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n  \"Amazon S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n  \"Amazon CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n  \"AWS Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n  \"Amazon RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n  \"Amazon EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n  \"Amazon DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n  \"AWS Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n  \"Amazon VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n  \"Amazon ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n  \"Amazon ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n  \"Amazon CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n  \"AWS Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\",\n  \"Amazon API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n  \"Amazon SNS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Notification-Service_16.svg\",\n  \"Amazon SQS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Queue-Service_16.svg\",\n  \"AWS Step Functions\": \"Arch_App-Integration/16/Arch_AWS-Step-Functions_16.svg\"\n};\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Add logging collection\nconst iconResolutionLog = {\n  success: [],\n  failed: [],\n  total: 0\n};\nconst getServiceIcon = async serviceName => {\n  iconResolutionLog.total++;\n  const iconPath = SERVICE_MAPPINGS[serviceName];\n  if (!iconPath) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: 'No mapping found'\n    });\n    console.warn(`❌ No icon mapping found for service: ${serviceName}`);\n    return '/aws-icons/default.svg';\n  }\n  try {\n    const fullUrl = `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`;\n\n    // Add no-cors mode and appropriate headers\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'image/svg+xml,image/*,*/*',\n        'Origin': 'http://localhost:3000'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    iconResolutionLog.success.push({\n      service: serviceName,\n      path: iconPath\n    });\n    console.log(`✅ Icon found for ${serviceName}: ${iconPath}`);\n    return fullUrl;\n  } catch (error) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: error.message\n    });\n    console.error(`❌ Error loading icon for ${serviceName}:`, error);\n    return '/aws-icons/default.svg';\n  }\n};\n\n// Add method to get resolution stats\nconst getIconResolutionStats = () => {\n  const stats = {\n    total: iconResolutionLog.total,\n    success: iconResolutionLog.success.length,\n    failed: iconResolutionLog.failed.length,\n    successRate: `${(iconResolutionLog.success.length / iconResolutionLog.total * 100).toFixed(1)}%`,\n    failedServices: iconResolutionLog.failed.map(f => `${f.service} (${f.reason})`),\n    successServices: iconResolutionLog.success.map(s => s.service)\n  };\n  console.group('🎯 Icon Resolution Statistics');\n  console.log(`Total Services: ${stats.total}`);\n  console.log(`Success: ${stats.success} (${stats.successRate})`);\n  console.log(`Failed: ${stats.failed}`);\n  console.log('\\nSuccessfully resolved icons:');\n  stats.successServices.forEach(s => console.log(`✅ ${s}`));\n  console.log('\\nFailed to resolve icons:');\n  stats.failedServices.forEach(s => console.log(`❌ ${s}`));\n  console.groupEnd();\n  return stats;\n};\n\n// Modified cached version with logging\nconst iconCache = new Map();\nconst getCachedServiceIcon = async serviceName => {\n  if (iconCache.has(serviceName)) {\n    return iconCache.get(serviceName);\n  }\n  const iconUrl = await getServiceIcon(serviceName);\n  iconCache.set(serviceName, iconUrl);\n  return iconUrl;\n};\nexport { getServiceIcon, getCachedServiceIcon, getIconResolutionStats };","map":{"version":3,"names":["AWS_ICON_CATEGORIES","ANALYTICS","APP_INTEGRATION","ARTIFICIAL_INTELLIGENCE","BLOCKCHAIN","BUSINESS_APPLICATIONS","COMPUTE","CONTAINERS","DATABASE","DEVELOPER_TOOLS","MANAGEMENT","NETWORKING","SECURITY","STORAGE","SERVICE_MAPPINGS","S3_BUCKET_URL","ICONS_BASE_PATH","iconResolutionLog","success","failed","total","getServiceIcon","serviceName","iconPath","push","service","reason","console","warn","fullUrl","response","fetch","method","mode","headers","ok","Error","status","path","log","error","message","getIconResolutionStats","stats","length","successRate","toFixed","failedServices","map","f","successServices","s","group","forEach","groupEnd","iconCache","Map","getCachedServiceIcon","has","get","iconUrl","set"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/IconResolver.js"],"sourcesContent":["const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App-Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial-Intelligence',\n  BLOCKCHAIN: 'Arch_Blockchain',\n  BUSINESS_APPLICATIONS: 'Arch_Business-Applications',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer-Tools',\n  MANAGEMENT: 'Arch_Management-Governance',\n  NETWORKING: 'Arch_Networking-Content-Delivery',\n  SECURITY: 'Arch_Security-Identity-Compliance',\n  STORAGE: 'Arch_Storage'\n};\n\nconst SERVICE_MAPPINGS = {\n  \"Amazon Route 53\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Route-53_16.svg\",\n  \"Amazon S3\": \"Arch_Storage/16/Arch_Amazon-Simple-Storage-Service_16.svg\",\n  \"Amazon CloudFront\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-CloudFront_16.svg\",\n  \"AWS Certificate Manager\": \"Arch_Security-Identity-Compliance/16/Arch_AWS-Certificate-Manager_16.svg\",\n  \"Amazon RDS\": \"Arch_Database/16/Arch_Amazon-RDS_16.svg\",\n  \"Amazon EC2\": \"Arch_Compute/16/Arch_Amazon-EC2_16.svg\",\n  \"Amazon DynamoDB\": \"Arch_Database/16/Arch_Amazon-DynamoDB_16.svg\",\n  \"AWS Lambda\": \"Arch_Compute/16/Arch_AWS-Lambda_16.svg\",\n  \"Amazon VPC\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-Virtual-Private-Cloud_16.svg\",\n  \"Amazon ECS\": \"Arch_Containers/16/Arch_Amazon-Elastic-Container-Service_16.svg\",\n  \"Amazon ElastiCache\": \"Arch_Database/16/Arch_Amazon-ElastiCache_16.svg\",\n  \"Amazon CloudWatch\": \"Arch_Management-Governance/16/Arch_Amazon-CloudWatch_16.svg\",\n  \"AWS Elastic Beanstalk\": \"Arch_Compute/16/Arch_AWS-Elastic-Beanstalk_16.svg\",\n  \"Amazon API Gateway\": \"Arch_Networking-Content-Delivery/16/Arch_Amazon-API-Gateway_16.svg\",\n  \"Amazon SNS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Notification-Service_16.svg\",\n  \"Amazon SQS\": \"Arch_App-Integration/16/Arch_Amazon-Simple-Queue-Service_16.svg\",\n  \"AWS Step Functions\": \"Arch_App-Integration/16/Arch_AWS-Step-Functions_16.svg\"\n};\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Add logging collection\nconst iconResolutionLog = {\n  success: [],\n  failed: [],\n  total: 0\n};\n\nconst getServiceIcon = async (serviceName) => {\n  iconResolutionLog.total++;\n  const iconPath = SERVICE_MAPPINGS[serviceName];\n  \n  if (!iconPath) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: 'No mapping found'\n    });\n    console.warn(`❌ No icon mapping found for service: ${serviceName}`);\n    return '/aws-icons/default.svg';\n  }\n\n  try {\n    const fullUrl = `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`;\n    \n    // Add no-cors mode and appropriate headers\n    const response = await fetch(fullUrl, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'image/svg+xml,image/*,*/*',\n        'Origin': 'http://localhost:3000'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n\n    iconResolutionLog.success.push({\n      service: serviceName,\n      path: iconPath\n    });\n    console.log(`✅ Icon found for ${serviceName}: ${iconPath}`);\n    return fullUrl;\n  } catch (error) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: error.message\n    });\n    console.error(`❌ Error loading icon for ${serviceName}:`, error);\n    return '/aws-icons/default.svg';\n  }\n};\n\n// Add method to get resolution stats\nconst getIconResolutionStats = () => {\n  const stats = {\n    total: iconResolutionLog.total,\n    success: iconResolutionLog.success.length,\n    failed: iconResolutionLog.failed.length,\n    successRate: `${((iconResolutionLog.success.length / iconResolutionLog.total) * 100).toFixed(1)}%`,\n    failedServices: iconResolutionLog.failed.map(f => `${f.service} (${f.reason})`),\n    successServices: iconResolutionLog.success.map(s => s.service)\n  };\n\n  console.group('🎯 Icon Resolution Statistics');\n  console.log(`Total Services: ${stats.total}`);\n  console.log(`Success: ${stats.success} (${stats.successRate})`);\n  console.log(`Failed: ${stats.failed}`);\n  console.log('\\nSuccessfully resolved icons:');\n  stats.successServices.forEach(s => console.log(`✅ ${s}`));\n  console.log('\\nFailed to resolve icons:');\n  stats.failedServices.forEach(s => console.log(`❌ ${s}`));\n  console.groupEnd();\n\n  return stats;\n};\n\n// Modified cached version with logging\nconst iconCache = new Map();\n\nconst getCachedServiceIcon = async (serviceName) => {\n  if (iconCache.has(serviceName)) {\n    return iconCache.get(serviceName);\n  }\n\n  const iconUrl = await getServiceIcon(serviceName);\n  iconCache.set(serviceName, iconUrl);\n  return iconUrl;\n};\n\nexport { getServiceIcon, getCachedServiceIcon, getIconResolutionStats }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}