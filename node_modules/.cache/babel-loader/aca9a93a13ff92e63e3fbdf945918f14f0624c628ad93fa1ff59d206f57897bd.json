{"ast":null,"code":"\"use strict\";\n\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _objectSpread = require(\"/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileObjectsPage = exports.Files = void 0;\nconst resource_1 = require(\"../resource.js\");\nconst core_1 = require(\"../core.js\");\nconst core_2 = require(\"../core.js\");\nconst error_1 = require(\"../error.js\");\nconst Core = __importStar(require(\"../core.js\"));\nconst pagination_1 = require(\"../pagination.js\");\nclass Files extends resource_1.APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 100 GB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body, options) {\n    return this._client.post('/files', Core.multipartFormRequestOptions(_objectSpread({\n      body\n    }, options)));\n  }\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId, options) {\n    return this._client.get(\"/files/\".concat(fileId), options);\n  }\n  list() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    if ((0, core_1.isRequestOptions)(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/files', FileObjectsPage, _objectSpread({\n      query\n    }, options));\n  }\n  /**\n   * Delete a file.\n   */\n  del(fileId, options) {\n    return this._client.delete(\"/files/\".concat(fileId), options);\n  }\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileId, options) {\n    return this._client.get(\"/files/\".concat(fileId, \"/content\"), _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread({\n        Accept: 'application/binary'\n      }, options === null || options === void 0 ? void 0 : options.headers),\n      __binaryResponse: true\n    }));\n  }\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(fileId, options) {\n    return this._client.get(\"/files/\".concat(fileId, \"/content\"), options);\n  }\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(id) {\n    let {\n      pollInterval = 5000,\n      maxWait = 30 * 60 * 1000\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n    const start = Date.now();\n    let file = await this.retrieve(id);\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await (0, core_2.sleep)(pollInterval);\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new error_1.APIConnectionTimeoutError({\n          message: \"Giving up on waiting for file \".concat(id, \" to finish processing after \").concat(maxWait, \" milliseconds.\")\n        });\n      }\n    }\n    return file;\n  }\n}\nexports.Files = Files;\nclass FileObjectsPage extends pagination_1.CursorPage {}\nexports.FileObjectsPage = FileObjectsPage;\nFiles.FileObjectsPage = FileObjectsPage;","map":{"version":3,"names":["_objectSpread","require","default","resource_1","core_1","core_2","error_1","Core","__importStar","pagination_1","Files","APIResource","create","body","options","_client","post","multipartFormRequestOptions","retrieve","fileId","get","concat","list","query","arguments","length","undefined","isRequestOptions","getAPIList","FileObjectsPage","del","delete","content","headers","Accept","__binaryResponse","retrieveContent","waitForProcessing","id","pollInterval","maxWait","TERMINAL_STATES","Set","start","Date","now","file","status","has","sleep","APIConnectionTimeoutError","message","exports","CursorPage"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/openai/src/resources/files.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport { isRequestOptions } from '../core';\nimport { sleep } from '../core';\nimport { APIConnectionTimeoutError } from '../error';\nimport * as Core from '../core';\nimport { CursorPage, type CursorPageParams } from '../pagination';\nimport { type Response } from '../_shims/index';\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 100 GB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body: FileCreateParams, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.post('/files', Core.multipartFormRequestOptions({ body, ...options }));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileObject> {\n    return this._client.get(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns a list of files.\n   */\n  list(query?: FileListParams, options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(options?: Core.RequestOptions): Core.PagePromise<FileObjectsPage, FileObject>;\n  list(\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<FileObjectsPage, FileObject> {\n    if (isRequestOptions(query)) {\n      return this.list({}, query);\n    }\n    return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });\n  }\n\n  /**\n   * Delete a file.\n   */\n  del(fileId: string, options?: Core.RequestOptions): Core.APIPromise<FileDeleted> {\n    return this._client.delete(`/files/${fileId}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileId: string, options?: Core.RequestOptions): Core.APIPromise<Response> {\n    return this._client.get(`/files/${fileId}/content`, {\n      ...options,\n      headers: { Accept: 'application/binary', ...options?.headers },\n      __binaryResponse: true,\n    });\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   *\n   * @deprecated The `.content()` method should be used instead\n   */\n  retrieveContent(fileId: string, options?: Core.RequestOptions): Core.APIPromise<string> {\n    return this._client.get(`/files/${fileId}/content`, options);\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\nexport class FileObjectsPage extends CursorPage<FileObject> {}\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'file';\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file, in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always `file`.\n   */\n  object: 'file';\n\n  /**\n   * The intended purpose of the file. Supported values are `assistants`,\n   * `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`\n   * and `vision`.\n   */\n  purpose:\n    | 'assistants'\n    | 'assistants_output'\n    | 'batch'\n    | 'batch_output'\n    | 'fine-tune'\n    | 'fine-tune-results'\n    | 'vision';\n\n  /**\n   * @deprecated: Deprecated. The current status of the file, which can be either\n   * `uploaded`, `processed`, or `error`.\n   */\n  status: 'uploaded' | 'processed' | 'error';\n\n  /**\n   * @deprecated: Deprecated. For details on why a fine-tuning training file failed\n   * validation, see the `error` field on `fine_tuning.job`.\n   */\n  status_details?: string;\n}\n\n/**\n * The intended purpose of the uploaded file.\n *\n * Use \"assistants\" for\n * [Assistants](https://platform.openai.com/docs/api-reference/assistants) and\n * [Message](https://platform.openai.com/docs/api-reference/messages) files,\n * \"vision\" for Assistants image file inputs, \"batch\" for\n * [Batch API](https://platform.openai.com/docs/guides/batch), and \"fine-tune\" for\n * [Fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning).\n */\nexport type FilePurpose = 'assistants' | 'batch' | 'fine-tune' | 'vision';\n\nexport interface FileCreateParams {\n  /**\n   * The File object (not file name) to be uploaded.\n   */\n  file: Core.Uploadable;\n\n  /**\n   * The intended purpose of the uploaded file.\n   *\n   * Use \"assistants\" for\n   * [Assistants](https://platform.openai.com/docs/api-reference/assistants) and\n   * [Message](https://platform.openai.com/docs/api-reference/messages) files,\n   * \"vision\" for Assistants image file inputs, \"batch\" for\n   * [Batch API](https://platform.openai.com/docs/guides/batch), and \"fine-tune\" for\n   * [Fine-tuning](https://platform.openai.com/docs/api-reference/fine-tuning).\n   */\n  purpose: FilePurpose;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Only return files with the given purpose.\n   */\n  purpose?: string;\n}\n\nFiles.FileObjectsPage = FileObjectsPage;\n\nexport declare namespace Files {\n  export {\n    type FileContent as FileContent,\n    type FileDeleted as FileDeleted,\n    type FileObject as FileObject,\n    type FilePurpose as FilePurpose,\n    FileObjectsPage as FileObjectsPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}