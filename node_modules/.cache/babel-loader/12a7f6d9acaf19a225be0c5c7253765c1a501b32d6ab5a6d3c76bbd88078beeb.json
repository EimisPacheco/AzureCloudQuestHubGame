{"ast":null,"code":"class AWSArchitectureAI {\n  constructor() {\n    this.apiEndpoint = process.env.REACT_APP_GPT4_ENDPOINT;\n    this.apiKey = process.env.REACT_APP_GPT4_API_KEY;\n  }\n  async generateArchitecture() {\n    try {\n      const response = await fetch(\"\".concat(this.apiEndpoint, \"/generate-architecture\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(this.apiKey)\n        },\n        body: JSON.stringify({\n          prompt: \"Generate an AWS architecture with missing services for learning purposes\"\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating architecture:', error);\n      return this.getFallbackArchitecture();\n    }\n  }\n  async validateAnswer(architecture, selectedService, position) {\n    try {\n      const response = await fetch(\"\".concat(this.apiEndpoint, \"/validate-answer\"), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer \".concat(this.apiKey)\n        },\n        body: JSON.stringify({\n          architecture,\n          selectedService,\n          position\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error validating answer:', error);\n      return this.getFallbackValidation(architecture, selectedService, position);\n    }\n  }\n  getFallbackArchitecture() {\n    return {\n      architecture: {\n        id: 'simple-web-app',\n        services: [{\n          id: 'vpc',\n          name: 'VPC',\n          icon: '/icons/vpc.png'\n        }, {\n          id: 'ec2',\n          name: 'EC2',\n          icon: '/icons/ec2.png'\n        }, {\n          id: 'rds',\n          name: 'RDS',\n          icon: '/icons/rds.png'\n        }],\n        connections: [{\n          from: 'vpc',\n          to: 'ec2'\n        }, {\n          from: 'ec2',\n          to: 'rds'\n        }]\n      },\n      missingServices: ['ec2'],\n      question: {\n        text: \"Which compute service would you use for this web application?\",\n        position: 'compute-layer'\n      },\n      options: [{\n        id: 'ec2',\n        name: 'EC2'\n      }, {\n        id: 'lambda',\n        name: 'Lambda'\n      }, {\n        id: 'ecs',\n        name: 'ECS'\n      }, {\n        id: 'fargate',\n        name: 'Fargate'\n      }]\n    };\n  }\n  getFallbackValidation(architecture, selectedService, position) {\n    // Simple validation logic for offline mode\n    return {\n      correct: selectedService === architecture.missingServices[0],\n      explanation: \"This is a fallback explanation.\"\n    };\n  }\n  async generatePrompt(difficulty, previousAnswers) {\n    const systemPrompt = \"You are an AWS Solutions Architect expert. Generate architecture scenarios \\n    that test understanding of AWS services. Focus on \".concat(difficulty, \" level concepts.\");\n    const contextPrompt = \"Previous answers: \".concat(JSON.stringify(previousAnswers), \". \\n    Adapt difficulty based on performance.\");\n    const architecturePrompt = \"Create a realistic AWS architecture scenario with:\\n    1. A clear business requirement\\n    2. Multiple service integration points\\n    3. Best practices consideration\\n    4. Security aspects\\n    5. Cost optimization elements\";\n    return {\n      messages: [{\n        role: \"system\",\n        content: systemPrompt\n      }, {\n        role: \"user\",\n        content: contextPrompt\n      }, {\n        role: \"user\",\n        content: architecturePrompt\n      }]\n    };\n  }\n  async generateExplanation(architecture, userChoice, correctAnswer) {\n    const explanationPrompt = \"\\n    Architecture: \".concat(JSON.stringify(architecture), \"\\n    User's choice: \").concat(userChoice, \"\\n    Correct answer: \").concat(correctAnswer, \"\\n    \\n    Provide a detailed explanation of:\\n    1. Why the correct answer is optimal\\n    2. Potential drawbacks of the user's choice (if incorrect)\\n    3. Best practices related to this decision\\n    4. Cost implications\\n    5. Real-world examples\");\n\n    // Call GPT-4 API with this prompt\n    return this.callGPT4API(explanationPrompt);\n  }\n}\nexport default new AWSArchitectureAI();","map":{"version":3,"names":["AWSArchitectureAI","constructor","apiEndpoint","process","env","REACT_APP_GPT4_ENDPOINT","apiKey","REACT_APP_GPT4_API_KEY","generateArchitecture","response","fetch","concat","method","headers","body","JSON","stringify","prompt","json","error","console","getFallbackArchitecture","validateAnswer","architecture","selectedService","position","getFallbackValidation","id","services","name","icon","connections","from","to","missingServices","question","text","options","correct","explanation","generatePrompt","difficulty","previousAnswers","systemPrompt","contextPrompt","architecturePrompt","messages","role","content","generateExplanation","userChoice","correctAnswer","explanationPrompt","callGPT4API"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["class AWSArchitectureAI {\n  constructor() {\n    this.apiEndpoint = process.env.REACT_APP_GPT4_ENDPOINT;\n    this.apiKey = process.env.REACT_APP_GPT4_API_KEY;\n  }\n\n  async generateArchitecture() {\n    try {\n      const response = await fetch(`${this.apiEndpoint}/generate-architecture`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          prompt: \"Generate an AWS architecture with missing services for learning purposes\"\n        })\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating architecture:', error);\n      return this.getFallbackArchitecture();\n    }\n  }\n\n  async validateAnswer(architecture, selectedService, position) {\n    try {\n      const response = await fetch(`${this.apiEndpoint}/validate-answer`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          architecture,\n          selectedService,\n          position\n        })\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error validating answer:', error);\n      return this.getFallbackValidation(architecture, selectedService, position);\n    }\n  }\n\n  getFallbackArchitecture() {\n    return {\n      architecture: {\n        id: 'simple-web-app',\n        services: [\n          { id: 'vpc', name: 'VPC', icon: '/icons/vpc.png' },\n          { id: 'ec2', name: 'EC2', icon: '/icons/ec2.png' },\n          { id: 'rds', name: 'RDS', icon: '/icons/rds.png' }\n        ],\n        connections: [\n          { from: 'vpc', to: 'ec2' },\n          { from: 'ec2', to: 'rds' }\n        ]\n      },\n      missingServices: ['ec2'],\n      question: {\n        text: \"Which compute service would you use for this web application?\",\n        position: 'compute-layer'\n      },\n      options: [\n        { id: 'ec2', name: 'EC2' },\n        { id: 'lambda', name: 'Lambda' },\n        { id: 'ecs', name: 'ECS' },\n        { id: 'fargate', name: 'Fargate' }\n      ]\n    };\n  }\n\n  getFallbackValidation(architecture, selectedService, position) {\n    // Simple validation logic for offline mode\n    return {\n      correct: selectedService === architecture.missingServices[0],\n      explanation: \"This is a fallback explanation.\"\n    };\n  }\n\n  async generatePrompt(difficulty, previousAnswers) {\n    const systemPrompt = `You are an AWS Solutions Architect expert. Generate architecture scenarios \n    that test understanding of AWS services. Focus on ${difficulty} level concepts.`;\n\n    const contextPrompt = `Previous answers: ${JSON.stringify(previousAnswers)}. \n    Adapt difficulty based on performance.`;\n\n    const architecturePrompt = `Create a realistic AWS architecture scenario with:\n    1. A clear business requirement\n    2. Multiple service integration points\n    3. Best practices consideration\n    4. Security aspects\n    5. Cost optimization elements`;\n\n    return {\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: contextPrompt },\n        { role: \"user\", content: architecturePrompt }\n      ]\n    };\n  }\n\n  async generateExplanation(architecture, userChoice, correctAnswer) {\n    const explanationPrompt = `\n    Architecture: ${JSON.stringify(architecture)}\n    User's choice: ${userChoice}\n    Correct answer: ${correctAnswer}\n    \n    Provide a detailed explanation of:\n    1. Why the correct answer is optimal\n    2. Potential drawbacks of the user's choice (if incorrect)\n    3. Best practices related to this decision\n    4. Cost implications\n    5. Real-world examples`;\n\n    // Call GPT-4 API with this prompt\n    return this.callGPT4API(explanationPrompt);\n  }\n}\n\nexport default new AWSArchitectureAI(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}