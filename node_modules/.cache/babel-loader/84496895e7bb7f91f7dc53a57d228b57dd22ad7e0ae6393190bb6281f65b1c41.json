{"ast":null,"code":"import { SERVICE_MAPPINGS } from '../services/IconResolver';\nimport axios from 'axios';\n\n// Define the Azure function URL\nconst SERVICES_FUNCTION_URL = 'https://generate-architecture.azurewebsites.net/api/service_name_and_definition?code=m1xuLcGam3TakRjuVfUFSW34yqefO4Ie30XbgSHn1mRyAzFuJtjPgQ==';\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\nexport const getServiceDefinitions = async () => {\n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    return cachedDefinitions;\n  }\n  try {\n    const response = await axios.get(SERVICES_FUNCTION_URL);\n    // Format the data to match your expected structure\n    const formattedData = response.data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n\n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('Error fetching service definitions:', error);\n    // Fallback to hardcoded data in case of error\n    return [{\n      name: \"Kubernetes Services\",\n      definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n      path: \"/azure-icons/services/kubernetes-services.svg\"\n    }, {\n      name: \"Cognitive Services\",\n      definition: \"Adds AI capabilities to applications through pre-built APIs\",\n      path: \"/azure-icons/services/cognitive-services.svg\"\n    },\n    // Add a few more fallback items...\n    {\n      name: \"Azure Functions\",\n      definition: \"Event-driven, serverless compute service\",\n      path: \"/azure-icons/services/azure-functions.svg\"\n    }];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = seconds => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n};","map":{"version":3,"names":["SERVICE_MAPPINGS","axios","SERVICES_FUNCTION_URL","cachedDefinitions","getServiceDefinitions","response","get","formattedData","data","map","item","name","service","definition","description","path","toLowerCase","replace","error","console","getRandomServices","count","allServices","shuffled","sort","Math","random","slice","getRandomDefinition","services","randomIndex","floor","length","isGameComplete","matchedServices","totalServices","formatTime","seconds","mins","secs"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/utils/definitionMatchingUtils.js"],"sourcesContent":["import { SERVICE_MAPPINGS } from '../services/IconResolver';\nimport axios from 'axios';\n\n// Define the Azure function URL\nconst SERVICES_FUNCTION_URL = 'https://generate-architecture.azurewebsites.net/api/service_name_and_definition?code=m1xuLcGam3TakRjuVfUFSW34yqefO4Ie30XbgSHn1mRyAzFuJtjPgQ==';\n\n// Replace the hardcoded SERVICE_DEFINITIONS with a function to fetch from Azure Function\nlet cachedDefinitions = null;\n\nexport const getServiceDefinitions = async () => {\n  // Use cached data if available to prevent unnecessary API calls\n  if (cachedDefinitions) {\n    return cachedDefinitions;\n  }\n\n  try {\n    const response = await axios.get(SERVICES_FUNCTION_URL);\n    // Format the data to match your expected structure\n    const formattedData = response.data.map(item => ({\n      name: item.service,\n      definition: item.description,\n      path: `/azure-icons/services/${item.service.toLowerCase().replace(/\\s+/g, '-')}.svg`\n    }));\n    \n    // Cache the data\n    cachedDefinitions = formattedData;\n    return formattedData;\n  } catch (error) {\n    console.error('Error fetching service definitions:', error);\n    // Fallback to hardcoded data in case of error\n    return [\n      {\n        name: \"Kubernetes Services\",\n        definition: \"Simplifies deploying, managing, and scaling containerized applications\",\n        path: \"/azure-icons/services/kubernetes-services.svg\"\n      },\n      {\n        name: \"Cognitive Services\",\n        definition: \"Adds AI capabilities to applications through pre-built APIs\",\n        path: \"/azure-icons/services/cognitive-services.svg\"\n      },\n      // Add a few more fallback items...\n      {\n        name: \"Azure Functions\",\n        definition: \"Event-driven, serverless compute service\",\n        path: \"/azure-icons/services/azure-functions.svg\"\n      }\n    ];\n  }\n};\n\n// Update the getRandomServices function to work with async data\nexport const getRandomServices = async (count = 10) => {\n  const allServices = await getServiceDefinitions();\n  const shuffled = [...allServices].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n};\n\n// Update other functions that use SERVICE_DEFINITIONS\nexport const getRandomDefinition = async () => {\n  const services = await getServiceDefinitions();\n  const randomIndex = Math.floor(Math.random() * services.length);\n  return {\n    name: services[randomIndex].name,\n    definition: services[randomIndex].definition\n  };\n};\n\n// Check if the game is complete (all definitions matched)\nexport const isGameComplete = (matchedServices, totalServices) => {\n  return matchedServices.length === totalServices;\n};\n\n// Format time as MM:SS\nexport const formatTime = (seconds) => {\n  const mins = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;\n}; "],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,0BAA0B;AAC3D,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,qBAAqB,GAAG,+IAA+I;;AAE7K;AACA,IAAIC,iBAAiB,GAAG,IAAI;AAE5B,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC/C;EACA,IAAID,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B;EAEA,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,qBAAqB,CAAC;IACvD;IACA,MAAMK,aAAa,GAAGF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAACC,IAAI,KAAK;MAC/CC,IAAI,EAAED,IAAI,CAACE,OAAO;MAClBC,UAAU,EAAEH,IAAI,CAACI,WAAW;MAC5BC,IAAI,EAAE,yBAAyBL,IAAI,CAACE,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IAChF,CAAC,CAAC,CAAC;;IAEH;IACAd,iBAAiB,GAAGI,aAAa;IACjC,OAAOA,aAAa;EACtB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D;IACA,OAAO,CACL;MACEP,IAAI,EAAE,qBAAqB;MAC3BE,UAAU,EAAE,wEAAwE;MACpFE,IAAI,EAAE;IACR,CAAC,EACD;MACEJ,IAAI,EAAE,oBAAoB;MAC1BE,UAAU,EAAE,6DAA6D;MACzEE,IAAI,EAAE;IACR,CAAC;IACD;IACA;MACEJ,IAAI,EAAE,iBAAiB;MACvBE,UAAU,EAAE,0CAA0C;MACtDE,IAAI,EAAE;IACR,CAAC,CACF;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;EACrD,MAAMC,WAAW,GAAG,MAAMlB,qBAAqB,CAAC,CAAC;EACjD,MAAMmB,QAAQ,GAAG,CAAC,GAAGD,WAAW,CAAC,CAACE,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EACjE,OAAOH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAEN,KAAK,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMO,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMC,QAAQ,GAAG,MAAMzB,qBAAqB,CAAC,CAAC;EAC9C,MAAM0B,WAAW,GAAGL,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGG,QAAQ,CAACG,MAAM,CAAC;EAC/D,OAAO;IACLrB,IAAI,EAAEkB,QAAQ,CAACC,WAAW,CAAC,CAACnB,IAAI;IAChCE,UAAU,EAAEgB,QAAQ,CAACC,WAAW,CAAC,CAACjB;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMoB,cAAc,GAAGA,CAACC,eAAe,EAAEC,aAAa,KAAK;EAChE,OAAOD,eAAe,CAACF,MAAM,KAAKG,aAAa;AACjD,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,OAAO,IAAK;EACrC,MAAMC,IAAI,GAAGb,IAAI,CAACM,KAAK,CAACM,OAAO,GAAG,EAAE,CAAC;EACrC,MAAME,IAAI,GAAGF,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGC,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,IAAI,IAAIC,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,IAAI,EAAE;AACxE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}