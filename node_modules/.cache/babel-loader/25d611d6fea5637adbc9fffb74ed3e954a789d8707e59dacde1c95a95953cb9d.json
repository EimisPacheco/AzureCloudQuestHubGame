{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureGame = () => {\n  _s();\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Sending request to:', API_URL);\n      console.log('Request body:', {\n        difficulty\n      });\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          difficulty\n        })\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      // Log the raw response text first\n      const responseText = await response.text();\n      console.log('Raw response text:', responseText);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, body: ${responseText}`);\n      }\n\n      // Try to parse the response text\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (parseError) {\n        console.error('JSON Parse Error:', parseError);\n        throw new Error(`Failed to parse API response: ${responseText}`);\n      }\n      console.log('Parsed API Response:', data);\n\n      // Validate the response structure\n      if (!data) {\n        throw new Error('Empty response from API');\n      }\n\n      // Try to parse the body if it's a string\n      let parsedBody;\n      try {\n        parsedBody = typeof data.body === 'string' ? JSON.parse(data.body) : data.body;\n        console.log('Parsed body:', parsedBody);\n      } catch (bodyParseError) {\n        console.error('Body Parse Error:', bodyParseError);\n        throw new Error(`Failed to parse response body: ${data.body}`);\n      }\n      if (!parsedBody) {\n        throw new Error(`Invalid response structure. Received: ${JSON.stringify(data)}`);\n      }\n\n      // Validate required fields\n      if (!parsedBody.architecture || !parsedBody.services || !parsedBody.connections || !parsedBody.missingServices) {\n        throw new Error(`Missing required fields. Received: ${JSON.stringify(parsedBody)}`);\n      }\n      setArchitectureInfo({\n        name: parsedBody.architecture.name,\n        description: parsedBody.architecture.description\n      });\n      setArchitecture({\n        services: parsedBody.services,\n        connections: parsedBody.connections\n      });\n      if (parsedBody.missingServices && parsedBody.missingServices.length > 0) {\n        setCurrentQuestion(parsedBody.missingServices[0]);\n        setServiceOptions(parsedBody.missingServices[0].options);\n      } else {\n        throw new Error('No missing services found in response');\n      }\n    } catch (error) {\n      console.error('Failed to load architecture:', {\n        error: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      setError(`Failed to load architecture: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n\n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading architecture...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNextArchitecture,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-description\",\n      children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"optimization-focus\",\n        children: [\"Focus: \", currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.optimizationFocus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"architecture-section\",\n        children: /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          missingServices: [currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.position]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"service-options\",\n        children: serviceOptions.map(option => /*#__PURE__*/_jsxDEV(DraggableService, {\n          service: option,\n          onClick: () => handleServiceSelection(option.id)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"ddr4POS6eViQ8XJAIjwebevXJnY=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","ArchitectureVisualizer","ServiceOptionsPanel","generateArchitecture","jsxDEV","_jsxDEV","AWSArchitectureGame","_s","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","score","setScore","difficulty","setDifficulty","isLoading","setIsLoading","error","setError","API_URL","sensors","activationConstraint","distance","loadNextArchitecture","console","log","response","fetch","method","headers","body","JSON","stringify","status","Object","fromEntries","entries","responseText","text","ok","Error","data","parse","parseError","parsedBody","bodyParseError","services","connections","missingServices","name","description","length","options","message","stack","handleServiceSelection","selectedServiceId","selectedOption","find","opt","id","isCorrect","points","isOptimal","prev","currentQuestionIndex","questions","findIndex","q","position","nextQuestion","handleDragEnd","event","active","over","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","optimizationFocus","onDragEnd","AWSArchitectureDisplay","map","option","DraggableService","service","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\n\n\n\nconst AWSArchitectureGame = () => {\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(TouchSensor)\n  );\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [difficulty]);\n\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Sending request to:', API_URL);\n      console.log('Request body:', { difficulty });\n\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ difficulty })\n      });\n\n      console.log('Response status:', response.status);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      // Log the raw response text first\n      const responseText = await response.text();\n      console.log('Raw response text:', responseText);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, body: ${responseText}`);\n      }\n\n      // Try to parse the response text\n      let data;\n      try {\n        data = JSON.parse(responseText);\n      } catch (parseError) {\n        console.error('JSON Parse Error:', parseError);\n        throw new Error(`Failed to parse API response: ${responseText}`);\n      }\n\n      console.log('Parsed API Response:', data);\n\n      // Validate the response structure\n      if (!data) {\n        throw new Error('Empty response from API');\n      }\n\n      // Try to parse the body if it's a string\n      let parsedBody;\n      try {\n        parsedBody = typeof data.body === 'string' ? JSON.parse(data.body) : data.body;\n        console.log('Parsed body:', parsedBody);\n      } catch (bodyParseError) {\n        console.error('Body Parse Error:', bodyParseError);\n        throw new Error(`Failed to parse response body: ${data.body}`);\n      }\n\n      if (!parsedBody) {\n        throw new Error(`Invalid response structure. Received: ${JSON.stringify(data)}`);\n      }\n\n      // Validate required fields\n      if (!parsedBody.architecture || !parsedBody.services || !parsedBody.connections || !parsedBody.missingServices) {\n        throw new Error(`Missing required fields. Received: ${JSON.stringify(parsedBody)}`);\n      }\n\n      setArchitectureInfo({\n        name: parsedBody.architecture.name,\n        description: parsedBody.architecture.description\n      });\n      \n      setArchitecture({\n        services: parsedBody.services,\n        connections: parsedBody.connections\n      });\n\n      if (parsedBody.missingServices && parsedBody.missingServices.length > 0) {\n        setCurrentQuestion(parsedBody.missingServices[0]);\n        setServiceOptions(parsedBody.missingServices[0].options);\n      } else {\n        throw new Error('No missing services found in response');\n      }\n\n    } catch (error) {\n      console.error('Failed to load architecture:', {\n        error: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      setError(`Failed to load architecture: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleServiceSelection = async (selectedServiceId) => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    \n    if (selectedOption?.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n      \n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"loading\">Loading architecture...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <p className=\"error-message\">{error}</p>\n        <button onClick={loadNextArchitecture}>Try Again</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <h2>{architectureInfo?.name}</h2>\n        <div className=\"score\">Score: {score}</div>\n      </div>\n      \n      <div className=\"architecture-description\">\n        {architectureInfo?.description}\n      </div>\n\n      <div className=\"question-container\">\n        <h3 className=\"question-text\">{currentQuestion?.text}</h3>\n        <p className=\"optimization-focus\">\n          Focus: {currentQuestion?.optimizationFocus}\n        </p>\n      </div>\n\n      <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\n        <div className=\"architecture-section\">\n          <AWSArchitectureDisplay \n            architecture={architecture}\n            missingServices={[currentQuestion?.position]}\n          />\n        </div>\n\n        <div className=\"service-options\">\n          {serviceOptions.map(option => (\n            <DraggableService\n              key={option.id}\n              service={option}\n              onClick={() => handleServiceSelection(option.id)}\n            />\n          ))}\n        </div>\n      </DndContext>\n    </div>\n  );\n};\n\nexport default AWSArchitectureGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,eAAe;AAC7F,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,oBAAoB,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIrE,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,UAAU,CAAC;EACxD,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM8B,OAAO,GAAG,kFAAkF;EAElG,MAAMC,OAAO,GAAG3B,UAAU,CACxBD,SAAS,CAACE,aAAa,EAAE;IACvB2B,oBAAoB,EAAE;MACpBC,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC,EACF9B,SAAS,CAACG,WAAW,CACvB,CAAC;EAEDL,SAAS,CAAC,MAAM;IACdiC,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,MAAMU,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvCP,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACFM,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,OAAO,CAAC;MAC3CK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;QAAEZ;MAAW,CAAC,CAAC;MAE5C,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACR,OAAO,EAAE;QACpCS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEnB;QAAW,CAAC;MACrC,CAAC,CAAC;MAEFW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACO,MAAM,CAAC;MAChDT,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAES,MAAM,CAACC,WAAW,CAACT,QAAQ,CAACG,OAAO,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;;MAEhF;MACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC1Cd,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEY,YAAY,CAAC;MAE/C,IAAI,CAACX,QAAQ,CAACa,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBd,QAAQ,CAACO,MAAM,WAAWI,YAAY,EAAE,CAAC;MAClF;;MAEA;MACA,IAAII,IAAI;MACR,IAAI;QACFA,IAAI,GAAGV,IAAI,CAACW,KAAK,CAACL,YAAY,CAAC;MACjC,CAAC,CAAC,OAAOM,UAAU,EAAE;QACnBnB,OAAO,CAACP,KAAK,CAAC,mBAAmB,EAAE0B,UAAU,CAAC;QAC9C,MAAM,IAAIH,KAAK,CAAC,iCAAiCH,YAAY,EAAE,CAAC;MAClE;MAEAb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgB,IAAI,CAAC;;MAEzC;MACA,IAAI,CAACA,IAAI,EAAE;QACT,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;MAC5C;;MAEA;MACA,IAAII,UAAU;MACd,IAAI;QACFA,UAAU,GAAG,OAAOH,IAAI,CAACX,IAAI,KAAK,QAAQ,GAAGC,IAAI,CAACW,KAAK,CAACD,IAAI,CAACX,IAAI,CAAC,GAAGW,IAAI,CAACX,IAAI;QAC9EN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEmB,UAAU,CAAC;MACzC,CAAC,CAAC,OAAOC,cAAc,EAAE;QACvBrB,OAAO,CAACP,KAAK,CAAC,mBAAmB,EAAE4B,cAAc,CAAC;QAClD,MAAM,IAAIL,KAAK,CAAC,kCAAkCC,IAAI,CAACX,IAAI,EAAE,CAAC;MAChE;MAEA,IAAI,CAACc,UAAU,EAAE;QACf,MAAM,IAAIJ,KAAK,CAAC,yCAAyCT,IAAI,CAACC,SAAS,CAACS,IAAI,CAAC,EAAE,CAAC;MAClF;;MAEA;MACA,IAAI,CAACG,UAAU,CAACzC,YAAY,IAAI,CAACyC,UAAU,CAACE,QAAQ,IAAI,CAACF,UAAU,CAACG,WAAW,IAAI,CAACH,UAAU,CAACI,eAAe,EAAE;QAC9G,MAAM,IAAIR,KAAK,CAAC,sCAAsCT,IAAI,CAACC,SAAS,CAACY,UAAU,CAAC,EAAE,CAAC;MACrF;MAEAtC,mBAAmB,CAAC;QAClB2C,IAAI,EAAEL,UAAU,CAACzC,YAAY,CAAC8C,IAAI;QAClCC,WAAW,EAAEN,UAAU,CAACzC,YAAY,CAAC+C;MACvC,CAAC,CAAC;MAEF9C,eAAe,CAAC;QACd0C,QAAQ,EAAEF,UAAU,CAACE,QAAQ;QAC7BC,WAAW,EAAEH,UAAU,CAACG;MAC1B,CAAC,CAAC;MAEF,IAAIH,UAAU,CAACI,eAAe,IAAIJ,UAAU,CAACI,eAAe,CAACG,MAAM,GAAG,CAAC,EAAE;QACvE3C,kBAAkB,CAACoC,UAAU,CAACI,eAAe,CAAC,CAAC,CAAC,CAAC;QACjDtC,iBAAiB,CAACkC,UAAU,CAACI,eAAe,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC;MAC1D,CAAC,MAAM;QACL,MAAM,IAAIZ,KAAK,CAAC,uCAAuC,CAAC;MAC1D;IAEF,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAE;QAC5CA,KAAK,EAAEA,KAAK,CAACoC,OAAO;QACpBC,KAAK,EAAErC,KAAK,CAACqC,KAAK;QAClBL,IAAI,EAAEhC,KAAK,CAACgC;MACd,CAAC,CAAC;MACF/B,QAAQ,CAAC,gCAAgCD,KAAK,CAACoC,OAAO,EAAE,CAAC;IAC3D,CAAC,SAAS;MACRrC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMuC,sBAAsB,GAAG,MAAOC,iBAAiB,IAAK;IAC1D,MAAMC,cAAc,GAAGlD,eAAe,CAAC6C,OAAO,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,iBAAiB,CAAC;IAExF,IAAIC,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEI,SAAS,EAAE;MAC7B;MACA,MAAMC,MAAM,GAAGL,cAAc,CAACM,SAAS,GAAG,CAAC,GAAG,CAAC;MAC/CnD,QAAQ,CAACoD,IAAI,IAAIA,IAAI,GAAGF,MAAM,CAAC;;MAE/B;MACA,MAAMG,oBAAoB,GAAGxB,IAAI,CAACyB,SAAS,CAACC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK9D,eAAe,CAAC8D,QAAQ,CAAC;MACnG,IAAIJ,oBAAoB,GAAGxB,IAAI,CAACyB,SAAS,CAACf,MAAM,GAAG,CAAC,EAAE;QACpD,MAAMmB,YAAY,GAAG7B,IAAI,CAACyB,SAAS,CAACD,oBAAoB,GAAG,CAAC,CAAC;QAC7DzD,kBAAkB,CAAC8D,YAAY,CAAC;QAChC5D,iBAAiB,CAAC4D,YAAY,CAAClB,OAAO,CAAC;MACzC,CAAC,MAAM;QACL,MAAM7B,oBAAoB,CAAC,CAAC;MAC9B;IACF;EACF,CAAC;EAED,MAAMgD,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGF,KAAK;IAE9B,IAAIE,IAAI,IAAIA,IAAI,CAACd,EAAE,KAAK,wBAAwB,EAAE;MAChDL,sBAAsB,CAACkB,MAAM,CAACb,EAAE,CAAC;IACnC;EACF,CAAC;EAED,IAAI7C,SAAS,EAAE;IACb,oBAAOf,OAAA;MAAK2E,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/D;EAEA,IAAI/D,KAAK,EAAE;IACT,oBACEjB,OAAA;MAAK2E,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B5E,OAAA;QAAG2E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAE3D;MAAK;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxChF,OAAA;QAAQiF,OAAO,EAAE1D,oBAAqB;QAAAqD,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAEV;EAEA,oBACEhF,OAAA;IAAK2E,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B5E,OAAA;MAAK2E,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B5E,OAAA;QAAA4E,QAAA,EAAKvE,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE4C;MAAI;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjChF,OAAA;QAAK2E,SAAS,EAAC,OAAO;QAAAC,QAAA,GAAC,SAAO,EAACjE,KAAK;MAAA;QAAAkE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eAENhF,OAAA;MAAK2E,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACtCvE,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAE6C;IAAW;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eAENhF,OAAA;MAAK2E,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjC5E,OAAA;QAAI2E,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAErE,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAE+B;MAAI;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1DhF,OAAA;QAAG2E,SAAS,EAAC,oBAAoB;QAAAC,QAAA,GAAC,SACzB,EAACrE,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAE2E,iBAAiB;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENhF,OAAA,CAACT,UAAU;MAAC6B,OAAO,EAAEA,OAAQ;MAAC+D,SAAS,EAAEZ,aAAc;MAAAK,QAAA,gBACrD5E,OAAA;QAAK2E,SAAS,EAAC,sBAAsB;QAAAC,QAAA,eACnC5E,OAAA,CAACoF,sBAAsB;UACrBjF,YAAY,EAAEA,YAAa;UAC3B6C,eAAe,EAAE,CAACzC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAE8D,QAAQ;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENhF,OAAA;QAAK2E,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC7BnE,cAAc,CAAC4E,GAAG,CAACC,MAAM,iBACxBtF,OAAA,CAACuF,gBAAgB;UAEfC,OAAO,EAAEF,MAAO;UAChBL,OAAO,EAAEA,CAAA,KAAM1B,sBAAsB,CAAC+B,MAAM,CAAC1B,EAAE;QAAE,GAF5C0B,MAAM,CAAC1B,EAAE;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGf,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAC9E,EAAA,CApMID,mBAAmB;EAAA,QAYPR,UAAU,EACxBD,SAAS,EAKTA,SAAS;AAAA;AAAAiG,EAAA,GAlBPxF,mBAAmB;AAsMzB,eAAeA,mBAAmB;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}