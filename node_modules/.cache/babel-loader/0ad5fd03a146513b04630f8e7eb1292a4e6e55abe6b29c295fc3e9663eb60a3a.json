{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { tracingClient } from \"../../tracing.js\";\nimport { getKeyFromKeyBundle } from \"../../transformations.js\";\nimport { KeyVaultKeyPollOperation } from \"../keyVaultKeyPoller.js\";\nexport class DeleteKeyPollOperation extends KeyVaultKeyPollOperation {\n  constructor(state, vaultUrl, client, operationOptions = {}) {\n    super(state, {\n      cancelMessage: \"Canceling the deletion of a key is not supported.\"\n    });\n    this.state = state;\n    this.vaultUrl = vaultUrl;\n    this.client = client;\n    this.operationOptions = operationOptions;\n  }\n  /**\n   * Sends a delete request for the given Key Vault Key's name to the Key Vault service.\n   * Since the Key Vault Key won't be immediately deleted, we have {@link beginDeleteKey}.\n   */\n  deleteKey(name, options = {}) {\n    return tracingClient.withSpan(\"DeleteKeyPoller.deleteKey\", options, async updatedOptions => {\n      const response = await this.client.deleteKey(this.vaultUrl, name, updatedOptions);\n      return getKeyFromKeyBundle(response);\n    });\n  }\n  /**\n   * The getDeletedKey method returns the specified deleted key along with its properties.\n   * This operation requires the keys/get permission.\n   */\n  getDeletedKey(name, options = {}) {\n    return tracingClient.withSpan(\"DeleteKeyPoller.getDeletedKey\", options, async updatedOptions => {\n      const response = await this.client.getDeletedKey(this.vaultUrl, name, updatedOptions);\n      return getKeyFromKeyBundle(response);\n    });\n  }\n  /**\n   * Reaches to the service and updates the delete key's poll operation.\n   */\n  async update(options = {}) {\n    const state = this.state;\n    const {\n      name\n    } = state;\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n    if (!state.isStarted) {\n      const deletedKey = await this.deleteKey(name, this.operationOptions);\n      state.isStarted = true;\n      state.result = deletedKey;\n      if (!deletedKey.properties.recoveryId) {\n        state.isCompleted = true;\n      }\n    }\n    if (!state.isCompleted) {\n      try {\n        state.result = await this.getDeletedKey(name, this.operationOptions);\n        state.isCompleted = true;\n      } catch (error) {\n        if (error.statusCode === 403) {\n          // At this point, the resource exists but the user doesn't have access to it.\n          state.isCompleted = true;\n        } else if (error.statusCode !== 404) {\n          state.error = error;\n          state.isCompleted = true;\n          throw error;\n        }\n      }\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["tracingClient","getKeyFromKeyBundle","KeyVaultKeyPollOperation","DeleteKeyPollOperation","constructor","state","vaultUrl","client","operationOptions","cancelMessage","deleteKey","name","options","withSpan","updatedOptions","response","getDeletedKey","update","abortSignal","isStarted","deletedKey","result","properties","recoveryId","isCompleted","error","statusCode"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/keyvault-keys/src/lro/delete/operation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport { KeyVaultClient } from \"../../generated/keyVaultClient.js\";\nimport { DeleteKeyOptions, DeletedKey, GetDeletedKeyOptions } from \"../../keysModels.js\";\nimport { tracingClient } from \"../../tracing.js\";\nimport { getKeyFromKeyBundle } from \"../../transformations.js\";\nimport { KeyVaultKeyPollOperation, KeyVaultKeyPollOperationState } from \"../keyVaultKeyPoller.js\";\n\n/**\n * An interface representing the state of a delete key's poll operation\n */\nexport interface DeleteKeyPollOperationState extends KeyVaultKeyPollOperationState<DeletedKey> {}\n\nexport class DeleteKeyPollOperation extends KeyVaultKeyPollOperation<\n  DeleteKeyPollOperationState,\n  DeletedKey\n> {\n  constructor(\n    public state: DeleteKeyPollOperationState,\n    private vaultUrl: string,\n    private client: KeyVaultClient,\n    private operationOptions: OperationOptions = {},\n  ) {\n    super(state, { cancelMessage: \"Canceling the deletion of a key is not supported.\" });\n  }\n\n  /**\n   * Sends a delete request for the given Key Vault Key's name to the Key Vault service.\n   * Since the Key Vault Key won't be immediately deleted, we have {@link beginDeleteKey}.\n   */\n  private deleteKey(name: string, options: DeleteKeyOptions = {}): Promise<DeletedKey> {\n    return tracingClient.withSpan(\"DeleteKeyPoller.deleteKey\", options, async (updatedOptions) => {\n      const response = await this.client.deleteKey(this.vaultUrl, name, updatedOptions);\n      return getKeyFromKeyBundle(response);\n    });\n  }\n\n  /**\n   * The getDeletedKey method returns the specified deleted key along with its properties.\n   * This operation requires the keys/get permission.\n   */\n  private getDeletedKey(name: string, options: GetDeletedKeyOptions = {}): Promise<DeletedKey> {\n    return tracingClient.withSpan(\n      \"DeleteKeyPoller.getDeletedKey\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getDeletedKey(this.vaultUrl, name, updatedOptions);\n        return getKeyFromKeyBundle(response);\n      },\n    );\n  }\n\n  /**\n   * Reaches to the service and updates the delete key's poll operation.\n   */\n  public async update(\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: DeleteKeyPollOperationState) => void;\n    } = {},\n  ): Promise<DeleteKeyPollOperation> {\n    const state = this.state;\n    const { name } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      const deletedKey = await this.deleteKey(name, this.operationOptions);\n      state.isStarted = true;\n      state.result = deletedKey;\n      if (!deletedKey.properties.recoveryId) {\n        state.isCompleted = true;\n      }\n    }\n\n    if (!state.isCompleted) {\n      try {\n        state.result = await this.getDeletedKey(name, this.operationOptions);\n        state.isCompleted = true;\n      } catch (error: any) {\n        if (error.statusCode === 403) {\n          // At this point, the resource exists but the user doesn't have access to it.\n          state.isCompleted = true;\n        } else if (error.statusCode !== 404) {\n          state.error = error;\n          state.isCompleted = true;\n          throw error;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n"],"mappings":"AAAA;AACA;AAMA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,wBAAwB,QAAuC,yBAAyB;AAOjG,OAAM,MAAOC,sBAAuB,SAAQD,wBAG3C;EACCE,YACSC,KAAkC,EACjCC,QAAgB,EAChBC,MAAsB,EACtBC,gBAAA,GAAqC,EAAE;IAE/C,KAAK,CAACH,KAAK,EAAE;MAAEI,aAAa,EAAE;IAAmD,CAAE,CAAC;IAL7E,KAAAJ,KAAK,GAALA,KAAK;IACJ,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,gBAAgB,GAAhBA,gBAAgB;EAG1B;EAEA;;;;EAIQE,SAASA,CAACC,IAAY,EAAEC,OAAA,GAA4B,EAAE;IAC5D,OAAOZ,aAAa,CAACa,QAAQ,CAAC,2BAA2B,EAAED,OAAO,EAAE,MAAOE,cAAc,IAAI;MAC3F,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,MAAM,CAACG,SAAS,CAAC,IAAI,CAACJ,QAAQ,EAAEK,IAAI,EAAEG,cAAc,CAAC;MACjF,OAAOb,mBAAmB,CAACc,QAAQ,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA;;;;EAIQC,aAAaA,CAACL,IAAY,EAAEC,OAAA,GAAgC,EAAE;IACpE,OAAOZ,aAAa,CAACa,QAAQ,CAC3B,+BAA+B,EAC/BD,OAAO,EACP,MAAOE,cAAc,IAAI;MACvB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACR,MAAM,CAACS,aAAa,CAAC,IAAI,CAACV,QAAQ,EAAEK,IAAI,EAAEG,cAAc,CAAC;MACrF,OAAOb,mBAAmB,CAACc,QAAQ,CAAC;IACtC,CAAC,CACF;EACH;EAEA;;;EAGO,MAAME,MAAMA,CACjBL,OAAA,GAGI,EAAE;IAEN,MAAMP,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM;MAAEM;IAAI,CAAE,GAAGN,KAAK;IAEtB,IAAIO,OAAO,CAACM,WAAW,EAAE;MACvB,IAAI,CAACV,gBAAgB,CAACU,WAAW,GAAGN,OAAO,CAACM,WAAW;IACzD;IAEA,IAAI,CAACb,KAAK,CAACc,SAAS,EAAE;MACpB,MAAMC,UAAU,GAAG,MAAM,IAAI,CAACV,SAAS,CAACC,IAAI,EAAE,IAAI,CAACH,gBAAgB,CAAC;MACpEH,KAAK,CAACc,SAAS,GAAG,IAAI;MACtBd,KAAK,CAACgB,MAAM,GAAGD,UAAU;MACzB,IAAI,CAACA,UAAU,CAACE,UAAU,CAACC,UAAU,EAAE;QACrClB,KAAK,CAACmB,WAAW,GAAG,IAAI;MAC1B;IACF;IAEA,IAAI,CAACnB,KAAK,CAACmB,WAAW,EAAE;MACtB,IAAI;QACFnB,KAAK,CAACgB,MAAM,GAAG,MAAM,IAAI,CAACL,aAAa,CAACL,IAAI,EAAE,IAAI,CAACH,gBAAgB,CAAC;QACpEH,KAAK,CAACmB,WAAW,GAAG,IAAI;MAC1B,CAAC,CAAC,OAAOC,KAAU,EAAE;QACnB,IAAIA,KAAK,CAACC,UAAU,KAAK,GAAG,EAAE;UAC5B;UACArB,KAAK,CAACmB,WAAW,GAAG,IAAI;QAC1B,CAAC,MAAM,IAAIC,KAAK,CAACC,UAAU,KAAK,GAAG,EAAE;UACnCrB,KAAK,CAACoB,KAAK,GAAGA,KAAK;UACnBpB,KAAK,CAACmB,WAAW,GAAG,IAAI;UACxB,MAAMC,KAAK;QACb;MACF;IACF;IAEA,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}