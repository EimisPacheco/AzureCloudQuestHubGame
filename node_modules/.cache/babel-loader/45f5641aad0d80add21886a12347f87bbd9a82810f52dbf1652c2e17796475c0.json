{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureGame = () => {\n  _s();\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  useEffect(() => {\n    let mounted = true;\n    if (!architecture && difficulty) {\n      const fetchData = async () => {\n        if (mounted) {\n          await loadNextArchitecture();\n        }\n      };\n      fetchData();\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [difficulty, architecture]);\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Sending request to:', API_URL);\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Origin': 'http://localhost:3000'\n        },\n        mode: 'cors',\n        credentials: 'omit',\n        body: JSON.stringify({\n          difficulty\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Raw API Response:', data);\n\n      // The response is the data itself, no need to check for body property\n      if (!data || !data.architecture || !data.services || !data.connections || !data.missingServices) {\n        throw new Error('Missing required fields in API response');\n      }\n      setArchitectureInfo({\n        name: data.architecture.name,\n        description: data.architecture.description\n      });\n      setArchitecture({\n        services: data.services,\n        connections: data.connections\n      });\n      if (data.missingServices && data.missingServices.length > 0) {\n        setCurrentQuestion(data.missingServices[0]);\n        setServiceOptions(data.missingServices[0].options);\n      } else {\n        throw new Error('No missing services found in response');\n      }\n    } catch (error) {\n      console.error('Failed to load architecture:', error);\n      setError(`Failed to load architecture: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n\n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading architecture...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadNextArchitecture,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-description\",\n      children: architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"optimization-focus\",\n        children: [\"Focus: \", currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.optimizationFocus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"architecture-section\",\n        children: /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          missingServices: [currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.position]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"service-options\",\n        children: serviceOptions.map((option, index) => /*#__PURE__*/_jsxDEV(DraggableService, {\n          service: {\n            id: option.service,\n            name: option.service,\n            icon: `/aws-icons/${option.service.toLowerCase().replace(/\\s+/g, '-')}.png`,\n            rating: option.rating,\n            explanation: option.explanation\n          },\n          onClick: () => handleServiceSelection(option.service)\n        }, `${option.service}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"ddr4POS6eViQ8XJAIjwebevXJnY=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","ArchitectureVisualizer","ServiceOptionsPanel","generateArchitecture","AWSArchitectureDisplay","DraggableService","jsxDEV","_jsxDEV","AWSArchitectureGame","_s","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","score","setScore","difficulty","setDifficulty","isLoading","setIsLoading","error","setError","API_URL","sensors","activationConstraint","distance","mounted","fetchData","loadNextArchitecture","console","log","response","fetch","method","headers","mode","credentials","body","JSON","stringify","ok","Error","status","data","json","services","connections","missingServices","name","description","length","options","message","handleServiceSelection","selectedServiceId","selectedOption","find","opt","id","isCorrect","points","isOptimal","prev","currentQuestionIndex","questions","findIndex","q","position","nextQuestion","handleDragEnd","event","active","over","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","optimizationFocus","onDragEnd","map","option","index","service","icon","toLowerCase","replace","rating","explanation","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport ArchitectureVisualizer from './ArchitectureVisualizer';\nimport ServiceOptionsPanel from './ServiceOptionsPanel';\nimport { generateArchitecture } from '../services/AWSArchitectureAI';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\n\n\n\nconst AWSArchitectureGame = () => {\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [difficulty, setDifficulty] = useState('BEGINNER');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(TouchSensor)\n  );\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (!architecture && difficulty) {\n      const fetchData = async () => {\n        if (mounted) {\n          await loadNextArchitecture();\n        }\n      };\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [difficulty, architecture]);\n\n  const loadNextArchitecture = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Sending request to:', API_URL);\n      \n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Origin': 'http://localhost:3000'\n        },\n        mode: 'cors',\n        credentials: 'omit',\n        body: JSON.stringify({ difficulty })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Raw API Response:', data);\n\n      // The response is the data itself, no need to check for body property\n      if (!data || !data.architecture || !data.services || !data.connections || !data.missingServices) {\n        throw new Error('Missing required fields in API response');\n      }\n\n      setArchitectureInfo({\n        name: data.architecture.name,\n        description: data.architecture.description\n      });\n      \n      setArchitecture({\n        services: data.services,\n        connections: data.connections\n      });\n\n      if (data.missingServices && data.missingServices.length > 0) {\n        setCurrentQuestion(data.missingServices[0]);\n        setServiceOptions(data.missingServices[0].options);\n      } else {\n        throw new Error('No missing services found in response');\n      }\n\n    } catch (error) {\n      console.error('Failed to load architecture:', error);\n      setError(`Failed to load architecture: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleServiceSelection = async (selectedServiceId) => {\n    const selectedOption = currentQuestion.options.find(opt => opt.id === selectedServiceId);\n    \n    if (selectedOption?.isCorrect) {\n      // Add points based on whether it was the optimal choice\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n      \n      // Find next question or load new architecture\n      const currentQuestionIndex = data.questions.findIndex(q => q.position === currentQuestion.position);\n      if (currentQuestionIndex < data.questions.length - 1) {\n        const nextQuestion = data.questions[currentQuestionIndex + 1];\n        setCurrentQuestion(nextQuestion);\n        setServiceOptions(nextQuestion.options);\n      } else {\n        await loadNextArchitecture();\n      }\n    }\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    \n    if (over && over.id === 'architecture-drop-zone') {\n      handleServiceSelection(active.id);\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"loading\">Loading architecture...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <p className=\"error-message\">{error}</p>\n        <button onClick={loadNextArchitecture}>Try Again</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <h2>{architectureInfo?.name}</h2>\n        <div className=\"score\">Score: {score}</div>\n      </div>\n      \n      <div className=\"architecture-description\">\n        {architectureInfo?.description}\n      </div>\n\n      <div className=\"question-container\">\n        <h3 className=\"question-text\">{currentQuestion?.text}</h3>\n        <p className=\"optimization-focus\">\n          Focus: {currentQuestion?.optimizationFocus}\n        </p>\n      </div>\n\n      <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\n        <div className=\"architecture-section\">\n          <AWSArchitectureDisplay \n            architecture={architecture}\n            missingServices={[currentQuestion?.position]}\n          />\n        </div>\n\n        <div className=\"service-options\">\n          {serviceOptions.map((option, index) => (\n            <DraggableService\n              key={`${option.service}-${index}`}\n              service={{\n                id: option.service,\n                name: option.service,\n                icon: `/aws-icons/${option.service.toLowerCase().replace(/\\s+/g, '-')}.png`,\n                rating: option.rating,\n                explanation: option.explanation\n              }}\n              onClick={() => handleServiceSelection(option.service)}\n            />\n          ))}\n        </div>\n      </DndContext>\n    </div>\n  );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}