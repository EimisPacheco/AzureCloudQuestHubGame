{"ast":null,"code":"let openai;\ntry {\n  const OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\nconst DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\nconst FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [{\n      id: 'vpc',\n      name: 'VPC',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n    }, {\n      id: 'ec2',\n      name: 'EC2',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n    }, {\n      id: 'rds',\n      name: 'RDS',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n    }],\n    connections: [{\n      from: 'vpc',\n      to: 'ec2'\n    }, {\n      from: 'ec2',\n      to: 'rds'\n    }]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [{\n    id: 'ec2',\n    name: 'EC2'\n  }, {\n    id: 'lambda',\n    name: 'Lambda'\n  }, {\n    id: 'ecs',\n    name: 'ECS'\n  }, {\n    id: 'fargate',\n    name: 'Fargate'\n  }]\n};\nconst generateArchitecture = async difficulty => {\n  // Simplified test scenario\n  const testArchitecture = {\n    architecture: {\n      services: [{\n        id: 'ec2',\n        name: 'Amazon EC2',\n        icon: '/aws-icons/ec2.png',\n        position: {\n          x: 300,\n          y: 200\n        } // Add positions for visualization\n      }, {\n        id: 'lambda',\n        name: 'AWS Lambda',\n        icon: '/aws-icons/Arch_AWS-Lambda_48.svg',\n        position: {\n          x: 150,\n          y: 200\n        }\n      }, {\n        id: 's3',\n        name: 'Amazon S3',\n        icon: '/aws-icons/s3.png',\n        position: {\n          x: 450,\n          y: 200\n        }\n      }],\n      connections: [{\n        from: 'lambda',\n        to: 's3'\n      }, {\n        from: 'ec2',\n        to: 's3'\n      }]\n    },\n    question: {\n      text: \"Which AWS compute service would you use for this serverless architecture?\",\n      position: \"compute-layer\",\n      missingServices: ['lambda'] // This service will be hidden and needs to be selected\n    },\n    options: [{\n      id: 'lambda',\n      name: 'AWS Lambda',\n      icon: '/aws-icons/Arch_AWS-Lambda_48.svg'\n    }, {\n      id: 'ec2',\n      name: 'Amazon EC2',\n      icon: '/aws-icons/ec2.png'\n    }, {\n      id: 's3',\n      name: 'Amazon S3',\n      icon: '/aws-icons/s3.png'\n    }]\n  };\n  console.log('Generating architecture:', testArchitecture);\n  return testArchitecture;\n};\nexport { generateArchitecture };\nexport const validateAnswer = async (architecture, selectedService, position) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are validating AWS architecture design decisions.\"\n      }, {\n        role: \"user\",\n        content: \"Validate if \".concat(selectedService, \" is appropriate for position \").concat(position, \" in the given architecture.\\n          Architecture context: \").concat(JSON.stringify(architecture))\n      }],\n      functions: [{\n        name: \"validateArchitectureChoice\",\n        description: \"Validate the selected AWS service for the architecture\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            correct: {\n              type: \"boolean\",\n              description: \"Whether the service choice is correct\"\n            },\n            explanation: {\n              type: \"string\",\n              description: \"Detailed explanation of why the choice is correct or incorrect\"\n            },\n            bestPractices: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"Relevant AWS best practices\"\n            }\n          },\n          required: [\"correct\", \"explanation\"]\n        }\n      }],\n      function_call: {\n        name: \"validateArchitectureChoice\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n};","map":{"version":3,"names":["openai","OpenAI","require","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","error","console","warn","DIFFICULTY_LEVELS","BEGINNER","complexity","services","temperature","INTERMEDIATE","ADVANCED","FALLBACK_ARCHITECTURE","architecture","id","name","icon","connections","from","to","question","text","position","missingServices","options","generateArchitecture","difficulty","testArchitecture","x","y","log","validateAnswer","selectedService","completion","chat","completions","create","model","messages","role","content","concat","JSON","stringify","functions","description","parameters","type","properties","correct","explanation","bestPractices","items","required","function_call","functionCall","choices","message","parse","arguments"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["let openai;\ntry {\n  const OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\n\nconst DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\n\nconst FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [\n      {\n        id: 'vpc',\n        name: 'VPC',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n      },\n      {\n        id: 'ec2',\n        name: 'EC2',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n      },\n      {\n        id: 'rds',\n        name: 'RDS',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n      }\n    ],\n    connections: [\n      { from: 'vpc', to: 'ec2' },\n      { from: 'ec2', to: 'rds' }\n    ]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [\n    { id: 'ec2', name: 'EC2' },\n    { id: 'lambda', name: 'Lambda' },\n    { id: 'ecs', name: 'ECS' },\n    { id: 'fargate', name: 'Fargate' }\n  ]\n};\n\nconst generateArchitecture = async (difficulty) => {\n  // Simplified test scenario\n  const testArchitecture = {\n    architecture: {\n      services: [\n        {\n          id: 'ec2',\n          name: 'Amazon EC2',\n          icon: '/aws-icons/ec2.png',\n          position: { x: 300, y: 200 }  // Add positions for visualization\n        },\n        {\n          id: 'lambda',\n          name: 'AWS Lambda',\n          icon: '/aws-icons/Arch_AWS-Lambda_48.svg',\n          position: { x: 150, y: 200 }\n        },\n        {\n          id: 's3',\n          name: 'Amazon S3',\n          icon: '/aws-icons/s3.png',\n          position: { x: 450, y: 200 }\n        }\n      ],\n      connections: [\n        { from: 'lambda', to: 's3' },\n        { from: 'ec2', to: 's3' }\n      ]\n    },\n    question: {\n      text: \"Which AWS compute service would you use for this serverless architecture?\",\n      position: \"compute-layer\",\n      missingServices: ['lambda']  // This service will be hidden and needs to be selected\n    },\n    options: [\n      { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/Arch_AWS-Lambda_48.svg' },\n      { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n      { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' }\n    ]\n  };\n\n  console.log('Generating architecture:', testArchitecture);\n  return testArchitecture;\n};\n\nexport { generateArchitecture };\n\nexport const validateAnswer = async (architecture, selectedService, position) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are validating AWS architecture design decisions.\"\n        },\n        {\n          role: \"user\",\n          content: `Validate if ${selectedService} is appropriate for position ${position} in the given architecture.\n          Architecture context: ${JSON.stringify(architecture)}`\n        }\n      ],\n      functions: [{\n        name: \"validateArchitectureChoice\",\n        description: \"Validate the selected AWS service for the architecture\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            correct: {\n              type: \"boolean\",\n              description: \"Whether the service choice is correct\"\n            },\n            explanation: {\n              type: \"string\",\n              description: \"Detailed explanation of why the choice is correct or incorrect\"\n            },\n            bestPractices: {\n              type: \"array\",\n              items: { type: \"string\" },\n              description: \"Relevant AWS best practices\"\n            }\n          },\n          required: [\"correct\", \"explanation\"]\n        }\n      }],\n      function_call: { name: \"validateArchitectureChoice\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}