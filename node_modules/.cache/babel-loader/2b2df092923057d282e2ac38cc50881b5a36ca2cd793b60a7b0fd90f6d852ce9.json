{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\nconst AWSArchitectureGame = () => {\n  _s();\n  var _currentQuestion$opti;\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n  const [score, setScore] = useState(0);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('🚀 Fetching new architecture...');\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'Origin': 'http://localhost:3000'\n        },\n        mode: 'cors',\n        credentials: 'omit',\n        body: JSON.stringify({\n          difficulty\n        })\n      });\n      if (response.status === 503) {\n        throw new Error('Server is temporarily unavailable. Please try again later.');\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('📦 Received data:', data);\n      setArchitectureInfo({\n        name: data.architecture.name,\n        description: data.architecture.description\n      });\n      const transformedServices = data.services.map(serviceName => ({\n        id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n        name: serviceName,\n        icon: getCachedServiceIcon(serviceName)\n      }));\n      const transformedConnections = (data.connections || []).map(conn => ({\n        from: conn.source.toLowerCase().replace(/\\s+/g, '-'),\n        to: conn.target.toLowerCase().replace(/\\s+/g, '-')\n      }));\n      console.log('🔗 Transformed connections:', transformedConnections);\n      setArchitecture({\n        services: transformedServices,\n        connections: transformedConnections\n      });\n      if (data.missingServices && data.missingServices.length > 0) {\n        const currentMissingService = data.missingServices[0];\n        console.log('❓ Current Question Data:', currentMissingService);\n        setCurrentQuestion({\n          text: currentMissingService.position,\n          optimizationFocus: currentMissingService.optimizationFocus,\n          options: currentMissingService.options.map(opt => {\n            const cleanedName = opt.service.replace(/^(Amazon|AWS)\\s+/, '').replace(/\\s+/g, ' ').trim();\n            console.log(`🔍 Processing option: ${cleanedName}`);\n            const iconPath = SERVICE_MAPPINGS[cleanedName];\n            const iconUrl = iconPath ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}` : '/aws-icons/default.svg';\n            console.log(`🎯 Icon URL for ${cleanedName}:`, iconUrl);\n            return {\n              id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n              name: opt.service,\n              isCorrect: opt.isCorrect,\n              isOptimal: opt.isOptimal,\n              explanation: opt.explanation,\n              rating: opt.rating,\n              icon: iconUrl\n            };\n          })\n        });\n        setServiceOptions(currentMissingService.options);\n      }\n    } catch (error) {\n      console.error('❌ Failed to load architecture:', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [API_URL, difficulty, isLoading]);\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-architecture-button\",\n          onClick: loadNextArchitecture,\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'New Architecture'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"architecture-description\",\n        children: architectureInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 32\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          currentQuestion: currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Question: \", currentQuestion.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Optimization Focus: \", currentQuestion.optimizationFocus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"service-options\",\n            children: (_currentQuestion$opti = currentQuestion.options) === null || _currentQuestion$opti === void 0 ? void 0 : _currentQuestion$opti.map((option, index) => /*#__PURE__*/_jsxDEV(DraggableService, {\n              service: option,\n              onClick: () => handleServiceSelection(option.id)\n            }, `${option.id}-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 7\n  }, this);\n};\n_s(AWSArchitectureGame, \"bSQea3j8JJ0kyR2XgeOxzOSfgLk=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","AWSArchitectureDisplay","DraggableService","DndProvider","HTML5Backend","getCachedServiceIcon","SERVICE_MAPPINGS","jsxDEV","_jsxDEV","Fragment","_Fragment","S3_BUCKET_URL","ICONS_BASE_PATH","AWSArchitectureGame","_s","_currentQuestion$opti","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","difficulty","score","setScore","API_URL","sensors","activationConstraint","distance","loadNextArchitecture","console","log","response","fetch","method","headers","mode","credentials","body","JSON","stringify","status","Error","ok","data","json","name","description","transformedServices","services","map","serviceName","id","toLowerCase","replace","icon","transformedConnections","connections","conn","from","source","to","target","missingServices","length","currentMissingService","text","position","optimizationFocus","options","opt","cleanedName","service","trim","iconPath","iconUrl","isCorrect","isOptimal","explanation","rating","message","handleServiceSelection","selectedServiceId","selectedOption","find","points","prev","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","option","index","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\nconst AWSArchitectureGame = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [architecture, setArchitecture] = useState(null);\n    const [architectureInfo, setArchitectureInfo] = useState(null);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [serviceOptions, setServiceOptions] = useState([]);\n    const [difficulty] = useState('BEGINNER');\n    const [score, setScore] = useState(0); \n  \n    const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n    const sensors = useSensors(\n      useSensor(PointerSensor, {\n        activationConstraint: {\n          distance: 8,\n        },\n      }),\n      useSensor(TouchSensor)\n    );\n\n    const loadNextArchitecture = useCallback(async () => {\n      if (isLoading) return;\n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        console.log('🚀 Fetching new architecture...');\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Origin': 'http://localhost:3000'\n          },\n          mode: 'cors',\n          credentials: 'omit',\n          body: JSON.stringify({ difficulty })\n        });\n\n        if (response.status === 503) {\n          throw new Error('Server is temporarily unavailable. Please try again later.');\n        }\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log('📦 Received data:', data);\n\n        setArchitectureInfo({\n          name: data.architecture.name,\n          description: data.architecture.description\n        });\n        \n        const transformedServices = data.services.map(serviceName => ({\n          id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n          name: serviceName,\n          icon: getCachedServiceIcon(serviceName)\n        }));\n\n        const transformedConnections = (data.connections || []).map(conn => ({\n          from: conn.source.toLowerCase().replace(/\\s+/g, '-'),\n          to: conn.target.toLowerCase().replace(/\\s+/g, '-')\n        }));\n\n        console.log('🔗 Transformed connections:', transformedConnections);\n\n        setArchitecture({\n          services: transformedServices,\n          connections: transformedConnections\n        });\n\n        if (data.missingServices && data.missingServices.length > 0) {\n          const currentMissingService = data.missingServices[0];\n          console.log('❓ Current Question Data:', currentMissingService);\n          \n          setCurrentQuestion({\n            text: currentMissingService.position,\n            optimizationFocus: currentMissingService.optimizationFocus,\n            options: currentMissingService.options.map(opt => {\n              const cleanedName = opt.service\n                .replace(/^(Amazon|AWS)\\s+/, '')\n                .replace(/\\s+/g, ' ')\n                .trim();\n\n              console.log(`🔍 Processing option: ${cleanedName}`);\n              const iconPath = SERVICE_MAPPINGS[cleanedName];\n              const iconUrl = iconPath \n                ? `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`\n                : '/aws-icons/default.svg';\n\n              console.log(`🎯 Icon URL for ${cleanedName}:`, iconUrl);\n\n              return {\n                id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n                name: opt.service,\n                isCorrect: opt.isCorrect,\n                isOptimal: opt.isOptimal,\n                explanation: opt.explanation,\n                rating: opt.rating,\n                icon: iconUrl\n              };\n            })\n          });\n          \n          setServiceOptions(currentMissingService.options);\n        }\n      } catch (error) {\n        console.error('❌ Failed to load architecture:', error);\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }, [API_URL, difficulty, isLoading]);\n\n    const handleServiceSelection = async (selectedServiceId) => {\n      const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n      \n      if (selectedOption?.isCorrect) {\n        const points = selectedOption.isOptimal ? 2 : 1;\n        setScore(prev => prev + points);\n      }\n    };\n\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"game-container\">\n          <div className=\"game-header\">\n            <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n            <div className=\"score\">Score: {score}</div>\n            <button \n              className=\"new-architecture-button\"\n              onClick={loadNextArchitecture}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'New Architecture'}\n            </button>\n          </div>\n          \n          {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n          \n          {error ? (\n            <div className=\"error-message\">{error}</div>\n          ) : (\n            <>\n              <AWSArchitectureDisplay \n                architecture={architecture}\n                currentQuestion={currentQuestion}\n              />\n              \n              {currentQuestion && (\n                <div className=\"question-container\">\n                  <h3>Question: {currentQuestion.text}</h3>\n                  <p>Optimization Focus: {currentQuestion.optimizationFocus}</p>\n                  <div className=\"service-options\">\n                    {currentQuestion.options?.map((option, index) => (\n                      <DraggableService\n                        key={`${option.id}-${index}`}\n                        service={option}\n                        onClick={() => handleServiceSelection(option.id)}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </DndProvider>\n    );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}