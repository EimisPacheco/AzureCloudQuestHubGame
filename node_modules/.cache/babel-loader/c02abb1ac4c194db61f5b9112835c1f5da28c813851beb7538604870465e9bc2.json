{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/GameCanvas.css';\nimport { getAzureIcon } from '../utils/iconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconsMemoryGame = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [lockBoard, setLockBoard] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes in seconds\n  const [gameStarted, setGameStarted] = useState(false);\n\n  // List of Azure service icons to use in the game\n  const icons = [\"virtual-machine\", \"storage-account\", \"app-service\", \"cosmos-db\", \"sql-database\", \"function-app\", \"logic-app\", \"api-management\", \"event-hub\", \"service-bus\", \"key-vault\", \"container-registry\"];\n\n  // Initialize the game\n  const initGame = useCallback(() => {\n    // Create pairs of cards (we need 24 cards for a 5x5 grid with reset button)\n    let cardPairs = [...icons, ...icons];\n\n    // If we need more cards to fill the grid (5x5 = 25, minus 1 for reset = 24 cards)\n    while (cardPairs.length < 24) {\n      // Add extra pairs from the beginning of the icons array\n      const extraIcons = icons.slice(0, Math.ceil((24 - cardPairs.length) / 2));\n      cardPairs = [...cardPairs, ...extraIcons, ...extraIcons];\n    }\n\n    // Trim to exactly 24 cards if we have more\n    if (cardPairs.length > 24) {\n      cardPairs = cardPairs.slice(0, 24);\n    }\n\n    // Shuffle the cards\n    const shuffledCards = cardPairs.sort(() => Math.random() - 0.5);\n\n    // Create card objects with IDs\n    const cardObjects = shuffledCards.map((icon, index) => ({\n      id: index,\n      icon: icon,\n      isFlipped: false,\n      isMatched: false\n    }));\n    setCards(cardObjects);\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setLockBoard(false);\n    setGameOver(false);\n    setTimeLeft(120);\n    setGameStarted(true);\n  }, [icons]);\n\n  // Handle card click\n  const handleCardClick = cardId => {\n    if (lockBoard) return;\n    if (flippedCards.length === 2) return;\n\n    // Find the clicked card\n    const clickedCard = cards.find(card => card.id === cardId);\n\n    // Don't allow clicking already flipped or matched cards\n    if (clickedCard.isFlipped || clickedCard.isMatched) return;\n\n    // Update the cards state to flip the clicked card\n    setCards(prevCards => prevCards.map(card => card.id === cardId ? {\n      ...card,\n      isFlipped: true\n    } : card));\n\n    // Add the clicked card to flippedCards\n    setFlippedCards(prev => [...prev, clickedCard]);\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setLockBoard(true);\n      const [firstCard, secondCard] = flippedCards;\n      if (firstCard.icon === secondCard.icon) {\n        // It's a match!\n        setMatchedCards(prev => [...prev, firstCard.icon]);\n\n        // Mark the cards as matched\n        setCards(prevCards => prevCards.map(card => card.id === firstCard.id || card.id === secondCard.id ? {\n          ...card,\n          isMatched: true\n        } : card));\n\n        // Reset flipped cards\n        setFlippedCards([]);\n        setLockBoard(false);\n      } else {\n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map(card => card.id === firstCard.id || card.id === secondCard.id ? {\n            ...card,\n            isFlipped: false\n          } : card));\n          setFlippedCards([]);\n          setLockBoard(false);\n        }, 1500);\n      }\n    }\n  }, [flippedCards]);\n\n  // Check if game is over (all matches found)\n  useEffect(() => {\n    if (gameStarted && matchedCards.length === icons.length) {\n      setGameOver(true);\n    }\n  }, [matchedCards, icons.length, gameStarted]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Format time as MM:SS\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n    const resetButtonIndex = 12; // Middle position (0-indexed)\n\n    for (let i = 0; i < totalCells; i++) {\n      if (i === resetButtonIndex) {\n        // Add reset button in the middle\n        grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-reset\",\n          onClick: initGame,\n          children: \"Reset\"\n        }, \"reset\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this));\n      } else {\n        // Calculate the card index (accounting for the reset button)\n        const cardIndex = i > resetButtonIndex ? i - 1 : i;\n        if (cardIndex < cards.length) {\n          const card = cards[cardIndex];\n          grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`,\n            onClick: () => handleCardClick(card.id),\n            children: card.isFlipped || card.isMatched ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"memory-card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: getAzureIcon(card.icon),\n                alt: card.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"memory-card-text\",\n                children: card.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameCanvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"gameCanvas-game-title\",\n      children: \"Azure Icons Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameCanvas-game-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameCanvas-canvas-wrapper\",\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-timer\",\n          children: [\"TIMER: \", formatTime(timeLeft)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-grid\",\n          children: renderGrid()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameCanvas-game-over\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: matchedCards.length === icons.length ? 'Congratulations!' : 'Time\\'s Up!'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: matchedCards.length === icons.length ? `You found all matches with ${formatTime(timeLeft)} remaining!` : `You found ${matchedCards.length} out of ${icons.length} matches.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: initGame,\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(IconsMemoryGame, \"a2H1ecETEbFtF9GrVWfK6ePoo40=\");\n_c = IconsMemoryGame;\nexport default IconsMemoryGame;\nvar _c;\n$RefreshReg$(_c, \"IconsMemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","getAzureIcon","jsxDEV","_jsxDEV","IconsMemoryGame","_s","cards","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","lockBoard","setLockBoard","gameOver","setGameOver","timeLeft","setTimeLeft","gameStarted","setGameStarted","icons","initGame","cardPairs","length","extraIcons","slice","Math","ceil","shuffledCards","sort","random","cardObjects","map","icon","index","id","isFlipped","isMatched","handleCardClick","cardId","clickedCard","find","card","prevCards","prev","firstCard","secondCard","setTimeout","timer","setInterval","clearInterval","formatTime","seconds","minutes","floor","secs","toString","padStart","renderGrid","grid","totalCells","resetButtonIndex","i","push","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","cardIndex","src","alt","style","display","flexDirection","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport '../styles/GameCanvas.css';\nimport { getAzureIcon } from '../utils/iconResolver';\n\nconst IconsMemoryGame = () => {\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [lockBoard, setLockBoard] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes in seconds\n  const [gameStarted, setGameStarted] = useState(false);\n\n  // List of Azure service icons to use in the game\n  const icons = [\n    \"virtual-machine\", \"storage-account\", \"app-service\", \"cosmos-db\", \n    \"sql-database\", \"function-app\", \"logic-app\", \"api-management\", \n    \"event-hub\", \"service-bus\", \"key-vault\", \"container-registry\"\n  ];\n\n  // Initialize the game\n  const initGame = useCallback(() => {\n    // Create pairs of cards (we need 24 cards for a 5x5 grid with reset button)\n    let cardPairs = [...icons, ...icons];\n    \n    // If we need more cards to fill the grid (5x5 = 25, minus 1 for reset = 24 cards)\n    while (cardPairs.length < 24) {\n      // Add extra pairs from the beginning of the icons array\n      const extraIcons = icons.slice(0, Math.ceil((24 - cardPairs.length) / 2));\n      cardPairs = [...cardPairs, ...extraIcons, ...extraIcons];\n    }\n    \n    // Trim to exactly 24 cards if we have more\n    if (cardPairs.length > 24) {\n      cardPairs = cardPairs.slice(0, 24);\n    }\n    \n    // Shuffle the cards\n    const shuffledCards = cardPairs.sort(() => Math.random() - 0.5);\n    \n    // Create card objects with IDs\n    const cardObjects = shuffledCards.map((icon, index) => ({\n      id: index,\n      icon: icon,\n      isFlipped: false,\n      isMatched: false\n    }));\n    \n    setCards(cardObjects);\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setLockBoard(false);\n    setGameOver(false);\n    setTimeLeft(120);\n    setGameStarted(true);\n  }, [icons]);\n\n  // Handle card click\n  const handleCardClick = (cardId) => {\n    if (lockBoard) return;\n    if (flippedCards.length === 2) return;\n    \n    // Find the clicked card\n    const clickedCard = cards.find(card => card.id === cardId);\n    \n    // Don't allow clicking already flipped or matched cards\n    if (clickedCard.isFlipped || clickedCard.isMatched) return;\n    \n    // Update the cards state to flip the clicked card\n    setCards(prevCards => \n      prevCards.map(card => \n        card.id === cardId ? { ...card, isFlipped: true } : card\n      )\n    );\n    \n    // Add the clicked card to flippedCards\n    setFlippedCards(prev => [...prev, clickedCard]);\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setLockBoard(true);\n      \n      const [firstCard, secondCard] = flippedCards;\n      \n      if (firstCard.icon === secondCard.icon) {\n        // It's a match!\n        setMatchedCards(prev => [...prev, firstCard.icon]);\n        \n        // Mark the cards as matched\n        setCards(prevCards => \n          prevCards.map(card => \n            card.id === firstCard.id || card.id === secondCard.id\n              ? { ...card, isMatched: true }\n              : card\n          )\n        );\n        \n        // Reset flipped cards\n        setFlippedCards([]);\n        setLockBoard(false);\n      } else {\n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          setCards(prevCards => \n            prevCards.map(card => \n              card.id === firstCard.id || card.id === secondCard.id\n                ? { ...card, isFlipped: false }\n                : card\n            )\n          );\n          \n          setFlippedCards([]);\n          setLockBoard(false);\n        }, 1500);\n      }\n    }\n  }, [flippedCards]);\n\n  // Check if game is over (all matches found)\n  useEffect(() => {\n    if (gameStarted && matchedCards.length === icons.length) {\n      setGameOver(true);\n    }\n  }, [matchedCards, icons.length, gameStarted]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    \n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Format time as MM:SS\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n    const resetButtonIndex = 12; // Middle position (0-indexed)\n    \n    for (let i = 0; i < totalCells; i++) {\n      if (i === resetButtonIndex) {\n        // Add reset button in the middle\n        grid.push(\n          <div \n            key=\"reset\" \n            className=\"memory-game-reset\"\n            onClick={initGame}\n          >\n            Reset\n          </div>\n        );\n      } else {\n        // Calculate the card index (accounting for the reset button)\n        const cardIndex = i > resetButtonIndex ? i - 1 : i;\n        \n        if (cardIndex < cards.length) {\n          const card = cards[cardIndex];\n          grid.push(\n            <div\n              key={card.id}\n              className={`memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`}\n              onClick={() => handleCardClick(card.id)}\n            >\n              {card.isFlipped || card.isMatched ? (\n                <div className=\"memory-card-content\">\n                  <img src={getAzureIcon(card.icon)} alt={card.icon} />\n                  <div className=\"memory-card-text\">{card.icon}</div>\n                </div>\n              ) : (\n                <span>?</span>\n              )}\n            </div>\n          );\n        }\n      }\n    }\n    \n    return grid;\n  };\n\n  return (\n    <div className=\"gameCanvas-container\">\n      <h1 className=\"gameCanvas-game-title\">Azure Icons Memory</h1>\n      \n      <div className=\"gameCanvas-game-content\">\n        <div className=\"gameCanvas-canvas-wrapper\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n          <div className=\"memory-game-timer\">TIMER: {formatTime(timeLeft)}</div>\n          \n          <div className=\"memory-game-grid\">\n            {renderGrid()}\n          </div>\n          \n          {gameOver && (\n            <div className=\"gameCanvas-game-over\">\n              <h3>{matchedCards.length === icons.length ? 'Congratulations!' : 'Time\\'s Up!'}</h3>\n              <p>\n                {matchedCards.length === icons.length \n                  ? `You found all matches with ${formatTime(timeLeft)} remaining!` \n                  : `You found ${matchedCards.length} out of ${icons.length} matches.`}\n              </p>\n              <button onClick={initGame}>Play Again</button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IconsMemoryGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}