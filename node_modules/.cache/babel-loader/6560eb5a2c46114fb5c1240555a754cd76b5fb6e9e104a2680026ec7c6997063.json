{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = data => {\n  if (!data || !data.services || !data.connections) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n\n  // Ensure missing services exist in the services list\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n  const serviceNames = data.services.map(service => typeof service === 'string' ? service : service === null || service === void 0 ? void 0 : service.name);\n  const missingServicesAbsent = requiredMissingServices.some(ms => !serviceNames.includes(ms));\n\n  // Ensure missing services are part of the connections\n  const connectionNames = data.connections.flatMap(conn => [conn.from, conn.to]);\n  const missingConnectionsAbsent = requiredMissingServices.some(ms => !connectionNames.includes(ms));\n  if (missingServicesAbsent || missingConnectionsAbsent) {\n    console.warn(\"⚠️ Invalid JSON: Missing required services or connections. Retrying...\");\n    return false;\n  }\n  return true;\n};\nconst AWSArchitectureGame = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n\n  /**\n   * Fetch architecture data, retrying until the JSON is valid.\n   */\n  const loadNextArchitecture = useCallback(async () => {\n    var _data$missingServices;\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    let isValid = false;\n    let data = null;\n    let attempt = 0;\n    while (!isValid && attempt < 5) {\n      // Max 5 retries to prevent infinite loops\n      try {\n        console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        data = await response.json();\n        console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n        isValid = isValidArchitecture(data);\n        if (!isValid) {\n          console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n        }\n      } catch (error) {\n        console.error(\"❌ Failed to load architecture:\", error);\n        setError(error.message);\n        return;\n      }\n      attempt++;\n    }\n    if (!isValid) {\n      console.error(\"❌ Maximum retries reached. Unable to get valid JSON.\");\n      setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n      setIsLoading(false);\n      return;\n    }\n    console.log(\"✅ Valid architecture received, updating state...\");\n\n    // Transform services with proper icon handling\n    const transformedServices = data.services.map(serviceName => {\n      if (!serviceName) {\n        console.error(\"⚠️ Undefined service in services array\");\n        return null;\n      }\n      return {\n        id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n        name: serviceName,\n        icon: getCachedServiceIcon(serviceName)\n      };\n    }).filter(Boolean); // Remove null entries\n\n    setArchitecture({\n      services: transformedServices,\n      connections: data.connections\n    });\n    if (((_data$missingServices = data.missingServices) === null || _data$missingServices === void 0 ? void 0 : _data$missingServices.length) > 0) {\n      const currentMissingService = data.missingServices[0];\n      setCurrentQuestion({\n        text: currentMissingService.question,\n        optimizationFocus: currentMissingService.optimizationFocus,\n        options: currentMissingService.options.map(opt => {\n          if (!opt.service) {\n            console.error(\"⚠️ Undefined service in options:\", opt);\n            return null;\n          }\n          return {\n            id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n            name: opt.service,\n            isCorrect: opt.isCorrect,\n            isOptimal: opt.isOptimal,\n            explanation: opt.explanation,\n            rating: opt.rating,\n            icon: getCachedServiceIcon(opt.service)\n          };\n        }).filter(Boolean) // Remove null entries\n      });\n    }\n    setArchitectureInfo({\n      name: data.architecture.name,\n      description: data.architecture.description,\n      missingServices: data.missingServices\n    });\n    setIsLoading(false);\n  }, [API_URL, difficulty, isLoading]);\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [loadNextArchitecture]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-architecture-button\",\n        onClick: loadNextArchitecture,\n        disabled: isLoading,\n        children: isLoading ? 'Loading...' : 'New Architecture'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"architecture-description\",\n      children: architectureInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 28\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n      architecture: architecture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"QBb/xW6AJBxezApSOUmDBIb9z3o=\");\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","AWSArchitectureDisplay","getCachedServiceIcon","jsxDEV","_jsxDEV","API_URL","isValidArchitecture","data","services","connections","console","warn","requiredMissingServices","serviceNames","map","service","name","missingServicesAbsent","some","ms","includes","connectionNames","flatMap","conn","from","to","missingConnectionsAbsent","AWSArchitectureGame","_s","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","difficulty","loadNextArchitecture","_data$missingServices","isValid","attempt","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","message","transformedServices","serviceName","id","toLowerCase","replace","icon","filter","Boolean","missingServices","length","currentMissingService","text","question","optimizationFocus","options","opt","isCorrect","isOptimal","explanation","rating","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = (data) => {\n  if (!data || !data.services || !data.connections) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n\n  // Ensure missing services exist in the services list\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n  const serviceNames = data.services.map(service => \n    typeof service === 'string' ? service : service?.name\n  );\n\n  const missingServicesAbsent = requiredMissingServices.some(ms => !serviceNames.includes(ms));\n\n  // Ensure missing services are part of the connections\n  const connectionNames = data.connections.flatMap(conn => [conn.from, conn.to]);\n  const missingConnectionsAbsent = requiredMissingServices.some(ms => !connectionNames.includes(ms));\n\n  if (missingServicesAbsent || missingConnectionsAbsent) {\n    console.warn(\"⚠️ Invalid JSON: Missing required services or connections. Retrying...\");\n    return false;\n  }\n\n  return true;\n};\n\nconst AWSArchitectureGame = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n\n  /**\n   * Fetch architecture data, retrying until the JSON is valid.\n   */\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n\n    let isValid = false;\n    let data = null;\n    let attempt = 0;\n\n    while (!isValid && attempt < 5) { // Max 5 retries to prevent infinite loops\n      try {\n        console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ difficulty })\n        });\n\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n\n        data = await response.json();\n        console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n\n        isValid = isValidArchitecture(data);\n\n        if (!isValid) {\n          console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n        }\n\n      } catch (error) {\n        console.error(\"❌ Failed to load architecture:\", error);\n        setError(error.message);\n        return;\n      }\n\n      attempt++;\n    }\n\n    if (!isValid) {\n      console.error(\"❌ Maximum retries reached. Unable to get valid JSON.\");\n      setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n      setIsLoading(false);\n      return;\n    }\n\n    console.log(\"✅ Valid architecture received, updating state...\");\n\n    // Transform services with proper icon handling\n    const transformedServices = data.services.map(serviceName => {\n      if (!serviceName) {\n        console.error(\"⚠️ Undefined service in services array\");\n        return null;\n      }\n\n      return {\n        id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n        name: serviceName,\n        icon: getCachedServiceIcon(serviceName)\n      };\n    }).filter(Boolean); // Remove null entries\n\n    setArchitecture({\n      services: transformedServices,\n      connections: data.connections\n    });\n\n    if (data.missingServices?.length > 0) {\n      const currentMissingService = data.missingServices[0];\n      setCurrentQuestion({\n        text: currentMissingService.question,\n        optimizationFocus: currentMissingService.optimizationFocus,\n        options: currentMissingService.options.map(opt => {\n          if (!opt.service) {\n            console.error(\"⚠️ Undefined service in options:\", opt);\n            return null;\n          }\n\n          return {\n            id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n            name: opt.service,\n            isCorrect: opt.isCorrect,\n            isOptimal: opt.isOptimal,\n            explanation: opt.explanation,\n            rating: opt.rating,\n            icon: getCachedServiceIcon(opt.service)\n          };\n        }).filter(Boolean) // Remove null entries\n      });\n    }\n\n    setArchitectureInfo({\n      name: data.architecture.name,\n      description: data.architecture.description,\n      missingServices: data.missingServices\n    });\n\n    setIsLoading(false);\n  }, [API_URL, difficulty, isLoading]);\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [loadNextArchitecture]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n        <button \n          className=\"new-architecture-button\"\n          onClick={loadNextArchitecture}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'New Architecture'}\n        </button>\n      </div>\n      \n      {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n      \n      {error ? (\n        <div className=\"error-message\">{error}</div>\n      ) : (\n        <AWSArchitectureDisplay architecture={architecture} />\n      )}\n    </div>\n  );\n};\n\nexport default AWSArchitectureGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}