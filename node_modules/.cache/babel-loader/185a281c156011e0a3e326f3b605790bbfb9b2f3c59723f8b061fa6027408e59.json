{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, MarkerType, Handle, applyNodeChanges, applyEdgeChanges } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\n// Move AWSServiceNode outside and memoize it\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSServiceNode = /*#__PURE__*/React.memo(_c = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(motion.div, {\n  className: `aws-service-node ${data.isMissing ? 'missing' : ''}`,\n  initial: {\n    scale: 0,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1\n  },\n  exit: {\n    scale: 0,\n    opacity: 0\n  },\n  whileHover: {\n    scale: 1.1\n  },\n  transition: {\n    type: \"spring\",\n    stiffness: 300\n  },\n  children: [/*#__PURE__*/_jsxDEV(Handle, {\n    type: \"target\",\n    position: \"top\",\n    id: `${data.id}-target`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-content\",\n    children: [data.isMissing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missing-service-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.icon,\n      alt: data.label,\n      className: \"service-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"service-label\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Handle, {\n    type: \"source\",\n    position: \"bottom\",\n    id: `${data.id}-source`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this));\n\n// Move nodeTypes outside component\n_c2 = AWSServiceNode;\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\nconst createNodeId = serviceName => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\nconst AWSArchitectureDisplay = ({\n  architecture,\n  missingServices\n}) => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const onNodesChange = useCallback(changes => setNodes(nds => applyNodeChanges(changes, nds)), []);\n  const onEdgesChange = useCallback(changes => setEdges(eds => applyEdgeChanges(changes, eds)), []);\n  useEffect(() => {\n    if (!architecture || !architecture.services) {\n      console.log('No architecture or services provided');\n      return;\n    }\n    try {\n      // Create graph structure\n      const graph = {\n        nodes: new Map(),\n        children: new Map(),\n        parents: new Map()\n      };\n\n      // Initialize graph with safety checks\n      architecture.services.forEach(service => {\n        if (!service || !service.name) {\n          console.warn('Invalid service found:', service);\n          return;\n        }\n        const id = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n        graph.nodes.set(id, service);\n        graph.children.set(id, new Set());\n        graph.parents.set(id, new Set());\n      });\n\n      // Build relationships with safety checks\n      if (architecture.connections && Array.isArray(architecture.connections)) {\n        architecture.connections.forEach(conn => {\n          if (!conn || !conn.from || !conn.to) {\n            console.warn('Invalid connection found:', conn);\n            return;\n          }\n          const fromId = typeof conn.from === 'string' ? conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n          const toId = typeof conn.to === 'string' ? conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n          const fromSet = graph.children.get(fromId);\n          const toSet = graph.parents.get(toId);\n          if (fromSet && toSet) {\n            fromSet.add(toId);\n            toSet.add(fromId);\n          } else {\n            console.warn(`Invalid connection between ${fromId} and ${toId}`);\n          }\n        });\n      }\n\n      // Find root nodes (no parents)\n      const rootNodes = Array.from(graph.nodes.keys()).filter(id => {\n        var _graph$parents$get;\n        return ((_graph$parents$get = graph.parents.get(id)) === null || _graph$parents$get === void 0 ? void 0 : _graph$parents$get.size) === 0;\n      });\n\n      // Layout constants\n      const VERTICAL_GAP = 150;\n      const HORIZONTAL_GAP = 300;\n      const newNodes = [];\n      const newEdges = [];\n\n      // Calculate levels with safety checks\n      const levels = new Map();\n      const calculateLevels = (nodeId, level = 0) => {\n        if (!nodeId || levels.has(nodeId)) return;\n        levels.set(nodeId, level);\n        const children = graph.children.get(nodeId);\n        if (children) {\n          children.forEach(childId => {\n            calculateLevels(childId, level + 1);\n          });\n        }\n      };\n      rootNodes.forEach(rootId => calculateLevels(rootId));\n\n      // Group nodes by level\n      const nodesPerLevel = new Map();\n      levels.forEach((level, nodeId) => {\n        if (!nodesPerLevel.has(level)) {\n          nodesPerLevel.set(level, []);\n        }\n        nodesPerLevel.get(level).push(nodeId);\n      });\n\n      // Position nodes\n      nodesPerLevel.forEach((levelNodes, level) => {\n        const levelHeight = levelNodes.length * VERTICAL_GAP;\n        const startY = -(levelHeight / 2) + VERTICAL_GAP / 2;\n        levelNodes.forEach((nodeId, index) => {\n          const service = graph.nodes.get(nodeId);\n          if (!service) return;\n          const x = level * HORIZONTAL_GAP;\n          const y = startY + index * VERTICAL_GAP;\n          newNodes.push({\n            id: nodeId,\n            type: 'awsService',\n            position: {\n              x,\n              y\n            },\n            data: {\n              label: service.name,\n              icon: service.icon,\n              isMissing: service.name.toLowerCase().includes('missing')\n            },\n            style: {\n              width: 120,\n              height: 80\n            },\n            draggable: true\n          });\n        });\n      });\n\n      // Create edges with safety checks\n      if (architecture.connections) {\n        architecture.connections.forEach(conn => {\n          if (!conn || !conn.from || !conn.to) return;\n          const fromId = typeof conn.from === 'string' ? conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n          const toId = typeof conn.to === 'string' ? conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'step',\n            animated: true,\n            style: {\n              stroke: '#4FD1C5',\n              strokeWidth: 3,\n              opacity: 1\n            },\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: '#4FD1C5'\n            }\n          });\n        });\n      }\n      setNodes(newNodes);\n      setEdges(newEdges);\n    } catch (error) {\n      console.error('Error creating architecture display:', error);\n    }\n  }, [architecture]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '600px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      nodeTypes: nodeTypes,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      fitViewOptions: {\n        padding: 0.3,\n        minZoom: 0.5,\n        maxZoom: 1.5\n      },\n      defaultViewport: {\n        zoom: 1\n      },\n      minZoom: 0.5,\n      maxZoom: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#4FD1C5\",\n        gap: 16,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"sdeFQG5Xa46JX/bRKr7FbXGJyUA=\");\n_c3 = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AWSServiceNode$React.memo\");\n$RefreshReg$(_c2, \"AWSServiceNode\");\n$RefreshReg$(_c3, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","useCallback","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","MarkerType","Handle","applyNodeChanges","applyEdgeChanges","motion","getCachedServiceIcon","jsxDEV","_jsxDEV","AWSServiceNode","memo","_c","data","div","className","isMissing","initial","scale","opacity","animate","exit","whileHover","transition","type","stiffness","children","position","id","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","label","_c2","nodeTypes","awsService","createNodeId","serviceName","console","error","toLowerCase","replace","AWSArchitectureDisplay","architecture","missingServices","_s","nodes","setNodes","edges","setEdges","onNodesChange","changes","nds","onEdgesChange","eds","services","log","graph","Map","parents","forEach","service","name","warn","set","Set","connections","Array","isArray","conn","from","to","fromId","toId","fromSet","get","toSet","add","rootNodes","keys","filter","_graph$parents$get","size","VERTICAL_GAP","HORIZONTAL_GAP","newNodes","newEdges","levels","calculateLevels","nodeId","level","has","childId","rootId","nodesPerLevel","push","levelNodes","levelHeight","length","startY","index","x","y","includes","style","width","height","draggable","source","target","animated","stroke","strokeWidth","markerEnd","ArrowClosed","color","fitView","fitViewOptions","padding","minZoom","maxZoom","defaultViewport","zoom","gap","_c3","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport ReactFlow, { \n  Background, \n  Controls, \n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  MarkerType,\n  Handle,\n  applyNodeChanges,\n  applyEdgeChanges\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\n// Move AWSServiceNode outside and memoize it\nconst AWSServiceNode = React.memo(({ data }) => (\n  <motion.div\n    className={`aws-service-node ${data.isMissing ? 'missing' : ''}`}\n    initial={{ scale: 0, opacity: 0 }}\n    animate={{ scale: 1, opacity: 1 }}\n    exit={{ scale: 0, opacity: 0 }}\n    whileHover={{ scale: 1.1 }}\n    transition={{ type: \"spring\", stiffness: 300 }}\n  >\n    <Handle \n      type=\"target\" \n      position=\"top\" \n      id={`${data.id}-target`}\n      className=\"handle\"\n    />\n    <div className=\"node-content\">\n      {data.isMissing ? (\n        <div className=\"missing-service-placeholder\">\n          <span>?</span>\n        </div>\n      ) : (\n        <img src={data.icon} alt={data.label} className=\"service-icon\" />\n      )}\n      <span className=\"service-label\">{data.label}</span>\n    </div>\n    <Handle \n      type=\"source\" \n      position=\"bottom\" \n      id={`${data.id}-source`}\n      className=\"handle\"\n    />\n  </motion.div>\n));\n\n// Move nodeTypes outside component\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\n\nconst createNodeId = (serviceName) => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\n\nconst AWSArchitectureDisplay = ({ architecture, missingServices }) => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  \n  const onNodesChange = useCallback(\n    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)),\n    []\n  );\n\n  const onEdgesChange = useCallback(\n    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)),\n    []\n  );\n\n  useEffect(() => {\n    if (!architecture || !architecture.services) {\n      console.log('No architecture or services provided');\n      return;\n    }\n\n    try {\n      // Create graph structure\n      const graph = {\n        nodes: new Map(),\n        children: new Map(),\n        parents: new Map(),\n      };\n\n      // Initialize graph with safety checks\n      architecture.services.forEach(service => {\n        if (!service || !service.name) {\n          console.warn('Invalid service found:', service);\n          return;\n        }\n        const id = service.id || service.name.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n        graph.nodes.set(id, service);\n        graph.children.set(id, new Set());\n        graph.parents.set(id, new Set());\n      });\n\n      // Build relationships with safety checks\n      if (architecture.connections && Array.isArray(architecture.connections)) {\n        architecture.connections.forEach(conn => {\n          if (!conn || !conn.from || !conn.to) {\n            console.warn('Invalid connection found:', conn);\n            return;\n          }\n          \n          const fromId = typeof conn.from === 'string' ? \n            conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n          const toId = typeof conn.to === 'string' ? \n            conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n          \n          const fromSet = graph.children.get(fromId);\n          const toSet = graph.parents.get(toId);\n          \n          if (fromSet && toSet) {\n            fromSet.add(toId);\n            toSet.add(fromId);\n          } else {\n            console.warn(`Invalid connection between ${fromId} and ${toId}`);\n          }\n        });\n      }\n\n      // Find root nodes (no parents)\n      const rootNodes = Array.from(graph.nodes.keys())\n        .filter(id => graph.parents.get(id)?.size === 0);\n\n      // Layout constants\n      const VERTICAL_GAP = 150;\n      const HORIZONTAL_GAP = 300;\n      const newNodes = [];\n      const newEdges = [];\n\n      // Calculate levels with safety checks\n      const levels = new Map();\n      const calculateLevels = (nodeId, level = 0) => {\n        if (!nodeId || levels.has(nodeId)) return;\n        \n        levels.set(nodeId, level);\n        const children = graph.children.get(nodeId);\n        if (children) {\n          children.forEach(childId => {\n            calculateLevels(childId, level + 1);\n          });\n        }\n      };\n\n      rootNodes.forEach(rootId => calculateLevels(rootId));\n\n      // Group nodes by level\n      const nodesPerLevel = new Map();\n      levels.forEach((level, nodeId) => {\n        if (!nodesPerLevel.has(level)) {\n          nodesPerLevel.set(level, []);\n        }\n        nodesPerLevel.get(level).push(nodeId);\n      });\n\n      // Position nodes\n      nodesPerLevel.forEach((levelNodes, level) => {\n        const levelHeight = levelNodes.length * VERTICAL_GAP;\n        const startY = -(levelHeight / 2) + (VERTICAL_GAP / 2);\n        \n        levelNodes.forEach((nodeId, index) => {\n          const service = graph.nodes.get(nodeId);\n          if (!service) return;\n\n          const x = level * HORIZONTAL_GAP;\n          const y = startY + (index * VERTICAL_GAP);\n\n          newNodes.push({\n            id: nodeId,\n            type: 'awsService',\n            position: { x, y },\n            data: {\n              label: service.name,\n              icon: service.icon,\n              isMissing: service.name.toLowerCase().includes('missing')\n            },\n            style: {\n              width: 120,\n              height: 80\n            },\n            draggable: true\n          });\n        });\n      });\n\n      // Create edges with safety checks\n      if (architecture.connections) {\n        architecture.connections.forEach(conn => {\n          if (!conn || !conn.from || !conn.to) return;\n\n          const fromId = typeof conn.from === 'string' ? \n            conn.from.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.from.id;\n          const toId = typeof conn.to === 'string' ? \n            conn.to.toLowerCase().replace(/[^a-z0-9]+/g, '-') : conn.to.id;\n\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'step',\n            animated: true,\n            style: { \n              stroke: '#4FD1C5', \n              strokeWidth: 3,\n              opacity: 1\n            },\n            markerEnd: { \n              type: MarkerType.ArrowClosed,\n              width: 20,\n              height: 20,\n              color: '#4FD1C5'\n            }\n          });\n        });\n      }\n\n      setNodes(newNodes);\n      setEdges(newEdges);\n    } catch (error) {\n      console.error('Error creating architecture display:', error);\n    }\n  }, [architecture]);\n\n  return (\n    <div style={{ height: '600px', width: '100%' }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        nodeTypes={nodeTypes}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        fitView\n        fitViewOptions={{\n          padding: 0.3,\n          minZoom: 0.5,\n          maxZoom: 1.5\n        }}\n        defaultViewport={{ zoom: 1 }}\n        minZoom={0.5}\n        maxZoom={1.5}\n      >\n        <Background color=\"#4FD1C5\" gap={16} size={1} />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}