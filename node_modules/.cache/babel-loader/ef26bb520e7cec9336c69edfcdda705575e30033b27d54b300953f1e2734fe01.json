{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = data => {\n  if (!data || !Array.isArray(data.services) || !Array.isArray(data.connections)) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n\n  // Extract service names (handles both strings and objects)\n  const serviceNames = data.services.map(service => typeof service === 'string' ? service : service === null || service === void 0 ? void 0 : service.name);\n\n  // Ensure all missing services exist in the services list\n  if (!requiredMissingServices.every(ms => serviceNames.includes(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing.`);\n    return false;\n  }\n\n  // Ensure missing services are referenced in the connections\n  const connectionNodes = new Set();\n  data.connections.forEach(conn => {\n    connectionNodes.add(conn.from);\n    connectionNodes.add(conn.to);\n  });\n  if (!requiredMissingServices.every(ms => connectionNodes.has(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing from the connections.`);\n    return false;\n  }\n  return true; // JSON is valid\n};\nconst AWSArchitectureGame = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [difficulty] = useState('BEGINNER');\n\n  /**\n   * Fetch architecture data, retrying until the JSON is valid.\n   */\n  const loadNextArchitecture = useCallback(async () => {\n    var _data$missingServices;\n    if (isLoading) return; // Prevent multiple simultaneous requests\n\n    setIsLoading(true);\n    setError(null);\n    let attempt = 0;\n    let isValid = false;\n    let data = null;\n    while (!isValid && attempt < 5) {\n      try {\n        console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        data = await response.json();\n        console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n        isValid = isValidArchitecture(data);\n        if (!isValid) {\n          console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n        } else {\n          console.log(\"✅ Valid architecture received, updating state...\");\n          break; // Exit loop when valid JSON is found\n        }\n      } catch (error) {\n        console.error(\"❌ Failed to load architecture:\", error);\n        setError(error.message);\n        setIsLoading(false);\n        return;\n      }\n      attempt++;\n    }\n    if (!isValid) {\n      console.error(\"❌ Maximum retries reached. Unable to get valid JSON.\");\n      setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Transform services with proper icon handling\n    const transformedServices = data.services.map(serviceName => ({\n      id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n      name: serviceName,\n      icon: getCachedServiceIcon(serviceName)\n    }));\n    setArchitecture({\n      services: transformedServices,\n      connections: data.connections\n    });\n    if (((_data$missingServices = data.missingServices) === null || _data$missingServices === void 0 ? void 0 : _data$missingServices.length) > 0) {\n      const currentMissingService = data.missingServices[0];\n      setCurrentQuestion({\n        text: currentMissingService.question,\n        optimizationFocus: currentMissingService.optimizationFocus,\n        options: currentMissingService.options.map(opt => ({\n          id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n          name: opt.service,\n          isCorrect: opt.isCorrect,\n          isOptimal: opt.isOptimal,\n          explanation: opt.explanation,\n          rating: opt.rating,\n          icon: getCachedServiceIcon(opt.service)\n        }))\n      });\n    }\n    setArchitectureInfo({\n      name: data.architecture.name,\n      description: data.architecture.description,\n      missingServices: data.missingServices\n    });\n    setIsLoading(false);\n  }, [difficulty]); // Removed `isLoading` from dependencies\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [loadNextArchitecture]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-architecture-button\",\n        onClick: loadNextArchitecture,\n        disabled: isLoading,\n        children: isLoading ? 'Loading...' : 'New Architecture'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"architecture-description\",\n      children: architectureInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 28\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n      architecture: architecture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureGame, \"zvkvxjiDdV5rorYL0E8mWvEqCLM=\");\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","AWSArchitectureDisplay","getCachedServiceIcon","jsxDEV","_jsxDEV","API_URL","isValidArchitecture","data","Array","isArray","services","connections","console","warn","requiredMissingServices","serviceNames","map","service","name","every","ms","includes","join","connectionNodes","Set","forEach","conn","add","from","to","has","AWSArchitectureGame","_s","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","difficulty","loadNextArchitecture","_data$missingServices","attempt","isValid","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","message","transformedServices","serviceName","id","toLowerCase","replace","icon","missingServices","length","currentMissingService","text","question","optimizationFocus","options","opt","isCorrect","isOptimal","explanation","rating","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = (data) => {\n  if (!data || !Array.isArray(data.services) || !Array.isArray(data.connections)) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n\n  // Extract service names (handles both strings and objects)\n  const serviceNames = data.services.map(service => \n    typeof service === 'string' ? service : service?.name\n  );\n\n  // Ensure all missing services exist in the services list\n  if (!requiredMissingServices.every(ms => serviceNames.includes(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing.`);\n    return false;\n  }\n\n  // Ensure missing services are referenced in the connections\n  const connectionNodes = new Set();\n  data.connections.forEach(conn => {\n    connectionNodes.add(conn.from);\n    connectionNodes.add(conn.to);\n  });\n\n  if (!requiredMissingServices.every(ms => connectionNodes.has(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing from the connections.`);\n    return false;\n  }\n\n  return true; // JSON is valid\n};\n\nconst AWSArchitectureGame = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [difficulty] = useState('BEGINNER');\n\n  /**\n   * Fetch architecture data, retrying until the JSON is valid.\n   */\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return; // Prevent multiple simultaneous requests\n\n    setIsLoading(true);\n    setError(null);\n\n    let attempt = 0;\n    let isValid = false;\n    let data = null;\n\n    while (!isValid && attempt < 5) {\n      try {\n        console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ difficulty })\n        });\n\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n\n        data = await response.json();\n        console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n\n        isValid = isValidArchitecture(data);\n\n        if (!isValid) {\n          console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n        } else {\n          console.log(\"✅ Valid architecture received, updating state...\");\n          break; // Exit loop when valid JSON is found\n        }\n\n      } catch (error) {\n        console.error(\"❌ Failed to load architecture:\", error);\n        setError(error.message);\n        setIsLoading(false);\n        return;\n      }\n\n      attempt++;\n    }\n\n    if (!isValid) {\n      console.error(\"❌ Maximum retries reached. Unable to get valid JSON.\");\n      setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Transform services with proper icon handling\n    const transformedServices = data.services.map(serviceName => ({\n      id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n      name: serviceName,\n      icon: getCachedServiceIcon(serviceName)\n    }));\n\n    setArchitecture({\n      services: transformedServices,\n      connections: data.connections\n    });\n\n    if (data.missingServices?.length > 0) {\n      const currentMissingService = data.missingServices[0];\n      setCurrentQuestion({\n        text: currentMissingService.question,\n        optimizationFocus: currentMissingService.optimizationFocus,\n        options: currentMissingService.options.map(opt => ({\n          id: opt.service.toLowerCase().replace(/\\s+/g, '-'),\n          name: opt.service,\n          isCorrect: opt.isCorrect,\n          isOptimal: opt.isOptimal,\n          explanation: opt.explanation,\n          rating: opt.rating,\n          icon: getCachedServiceIcon(opt.service)\n        }))\n      });\n    }\n\n    setArchitectureInfo({\n      name: data.architecture.name,\n      description: data.architecture.description,\n      missingServices: data.missingServices\n    });\n\n    setIsLoading(false);\n  }, [difficulty]); // Removed `isLoading` from dependencies\n\n  useEffect(() => {\n    loadNextArchitecture();\n  }, [loadNextArchitecture]);\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n        <button \n          className=\"new-architecture-button\"\n          onClick={loadNextArchitecture}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Loading...' : 'New Architecture'}\n        </button>\n      </div>\n      \n      {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n      \n      {error ? (\n        <div className=\"error-message\">{error}</div>\n      ) : (\n        <AWSArchitectureDisplay architecture={architecture} />\n      )}\n    </div>\n  );\n};\n\nexport default AWSArchitectureGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}