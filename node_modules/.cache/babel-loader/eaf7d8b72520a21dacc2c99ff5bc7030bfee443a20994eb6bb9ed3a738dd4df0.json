{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nconst AVAILABLE_SERVICES = [{\n  id: 'lambda',\n  name: 'AWS Lambda',\n  icon: '/aws-icons/lambda.png'\n}, {\n  id: 's3',\n  name: 'Amazon S3',\n  icon: '/aws-icons/s3.png'\n}, {\n  id: 'ec2',\n  name: 'Amazon EC2',\n  icon: '/aws-icons/ec2.png'\n}, {\n  id: 'ecs',\n  name: 'Amazon ECS',\n  icon: '/aws-icons/ecs.png'\n}, {\n  id: 'dynamodb',\n  name: 'Amazon DynamoDB',\n  icon: '/aws-icons/dynamodb.png'\n}, {\n  id: 'rds',\n  name: 'Amazon RDS',\n  icon: '/aws-icons/rds.png'\n}];\nconst generateArchitecture = async difficulty => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AWS architecture expert. Generate different architecture scenarios using only the allowed services.\"\n      }, {\n        role: \"user\",\n        content: `Create a ${difficulty} level AWS architecture scenario. \n          Use only these services: lambda, s3, ec2, ecs, dynamodb, rds.\n          Return a JSON with:\n          1. 3-6 services in the architecture\n          2. Logical connections between services\n          3. One missing service and a question about it\n          4. 3 service options including the correct answer`\n      }],\n      temperature: 0.8\n    });\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('AI Suggestion:', aiSuggestion);\n\n    // Map AI suggestion to actual service objects with correct icons\n    const mappedServices = aiSuggestion.services.map(serviceId => AVAILABLE_SERVICES.find(s => s.id === serviceId));\n    const mappedOptions = aiSuggestion.options.map(serviceId => AVAILABLE_SERVICES.find(s => s.id === serviceId));\n    return {\n      architecture: {\n        services: mappedServices,\n        connections: aiSuggestion.connections\n      },\n      question: {\n        text: aiSuggestion.question,\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: mappedOptions\n    };\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Simplified fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{\n          from: randomServices[0].id,\n          to: randomServices[1].id\n        }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\nexport { generateArchitecture };","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","AVAILABLE_SERVICES","id","name","icon","generateArchitecture","difficulty","completion","chat","completions","create","model","messages","role","content","temperature","aiSuggestion","JSON","parse","choices","message","console","log","mappedServices","services","map","serviceId","find","s","mappedOptions","options","architecture","connections","question","text","missingServices","missingService","error","randomServices","sort","Math","random","slice","from","to"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nconst AVAILABLE_SERVICES = [\n  { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/lambda.png' },\n  { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' },\n  { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n  { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n  { id: 'dynamodb', name: 'Amazon DynamoDB', icon: '/aws-icons/dynamodb.png' },\n  { id: 'rds', name: 'Amazon RDS', icon: '/aws-icons/rds.png' }\n];\n\nconst generateArchitecture = async (difficulty) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { \n          role: \"system\", \n          content: \"You are an AWS architecture expert. Generate different architecture scenarios using only the allowed services.\"\n        },\n        { \n          role: \"user\", \n          content: `Create a ${difficulty} level AWS architecture scenario. \n          Use only these services: lambda, s3, ec2, ecs, dynamodb, rds.\n          Return a JSON with:\n          1. 3-6 services in the architecture\n          2. Logical connections between services\n          3. One missing service and a question about it\n          4. 3 service options including the correct answer`\n        }\n      ],\n      temperature: 0.8\n    });\n\n    const aiSuggestion = JSON.parse(completion.choices[0].message.content);\n    console.log('AI Suggestion:', aiSuggestion);\n\n    // Map AI suggestion to actual service objects with correct icons\n    const mappedServices = aiSuggestion.services.map(serviceId => \n      AVAILABLE_SERVICES.find(s => s.id === serviceId)\n    );\n\n    const mappedOptions = aiSuggestion.options.map(serviceId =>\n      AVAILABLE_SERVICES.find(s => s.id === serviceId)\n    );\n\n    return {\n      architecture: {\n        services: mappedServices,\n        connections: aiSuggestion.connections\n      },\n      question: {\n        text: aiSuggestion.question,\n        missingServices: [aiSuggestion.missingService]\n      },\n      options: mappedOptions\n    };\n\n  } catch (error) {\n    console.error('AI Error:', error);\n    // Simplified fallback with randomization\n    const randomServices = AVAILABLE_SERVICES.sort(() => 0.5 - Math.random()).slice(0, 3);\n    const missingService = randomServices[0];\n    \n    return {\n      architecture: {\n        services: randomServices,\n        connections: [{ from: randomServices[0].id, to: randomServices[1].id }]\n      },\n      question: {\n        text: `Which service would you use for ${missingService.name}?`,\n        missingServices: [missingService.id]\n      },\n      options: AVAILABLE_SERVICES.slice(0, 3)\n    };\n  }\n};\n\nexport { generateArchitecture }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}