{"ast":null,"code":"let openai;\ntry {\n  const OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\nconst DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\nconst FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [{\n      id: 'vpc',\n      name: 'VPC',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n    }, {\n      id: 'ec2',\n      name: 'EC2',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n    }, {\n      id: 'rds',\n      name: 'RDS',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n    }],\n    connections: [{\n      from: 'vpc',\n      to: 'ec2'\n    }, {\n      from: 'ec2',\n      to: 'rds'\n    }]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [{\n    id: 'ec2',\n    name: 'EC2'\n  }, {\n    id: 'lambda',\n    name: 'Lambda'\n  }, {\n    id: 'ecs',\n    name: 'ECS'\n  }, {\n    id: 'fargate',\n    name: 'Fargate'\n  }]\n};\nexport const generateArchitecture = async function () {\n  let difficulty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'BEGINNER';\n  if (!openai) {\n    console.log('OpenAI not available, using fallback');\n    return FALLBACK_ARCHITECTURE;\n  }\n  const difficultyConfig = DIFFICULTY_LEVELS[difficulty];\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AWS Solutions Architect expert. Generate \".concat(difficultyConfig.complexity, \" \\n          architecture scenarios using \").concat(difficultyConfig.services, \".\")\n      }, {\n        role: \"user\",\n        content: \"Create a \".concat(difficulty.toLowerCase(), \" level AWS architecture scenario with missing services.\")\n      }],\n      functions: [{\n        name: \"generateArchitectureScenario\",\n        description: \"Generate an AWS architecture scenario with missing services\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            architecture: {\n              type: \"object\",\n              properties: {\n                services: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      name: {\n                        type: \"string\"\n                      },\n                      icon: {\n                        type: \"string\"\n                      }\n                    }\n                  }\n                },\n                connections: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      from: {\n                        type: \"string\"\n                      },\n                      to: {\n                        type: \"string\"\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            question: {\n              type: \"object\",\n              properties: {\n                text: {\n                  type: \"string\"\n                },\n                position: {\n                  type: \"string\"\n                },\n                missingServices: {\n                  type: \"array\",\n                  items: {\n                    type: \"string\"\n                  }\n                }\n              }\n            },\n            options: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  id: {\n                    type: \"string\"\n                  },\n                  name: {\n                    type: \"string\"\n                  }\n                }\n              }\n            }\n          },\n          required: [\"architecture\", \"question\", \"options\"]\n        }\n      }],\n      function_call: {\n        name: \"generateArchitectureScenario\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating architecture:', error);\n    return FALLBACK_ARCHITECTURE;\n  }\n};\nexport const validateAnswer = async (architecture, selectedService, position) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are validating AWS architecture design decisions.\"\n      }, {\n        role: \"user\",\n        content: \"Validate if \".concat(selectedService, \" is appropriate for position \").concat(position, \" in the given architecture.\\n          Architecture context: \").concat(JSON.stringify(architecture))\n      }],\n      functions: [{\n        name: \"validateArchitectureChoice\",\n        description: \"Validate the selected AWS service for the architecture\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            correct: {\n              type: \"boolean\",\n              description: \"Whether the service choice is correct\"\n            },\n            explanation: {\n              type: \"string\",\n              description: \"Detailed explanation of why the choice is correct or incorrect\"\n            },\n            bestPractices: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"Relevant AWS best practices\"\n            }\n          },\n          required: [\"correct\", \"explanation\"]\n        }\n      }],\n      function_call: {\n        name: \"validateArchitectureChoice\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n};","map":{"version":3,"names":["openai","OpenAI","require","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","error","console","warn","DIFFICULTY_LEVELS","BEGINNER","complexity","services","temperature","INTERMEDIATE","ADVANCED","FALLBACK_ARCHITECTURE","architecture","id","name","icon","connections","from","to","question","text","position","missingServices","options","generateArchitecture","difficulty","arguments","length","undefined","log","difficultyConfig","completion","chat","completions","create","model","messages","role","content","concat","toLowerCase","functions","description","parameters","type","properties","items","required","function_call","functionCall","choices","message","JSON","parse","validateAnswer","selectedService","stringify","correct","explanation","bestPractices"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["let openai;\ntry {\n  const OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\n\nconst DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\n\nconst FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [\n      {\n        id: 'vpc',\n        name: 'VPC',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n      },\n      {\n        id: 'ec2',\n        name: 'EC2',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n      },\n      {\n        id: 'rds',\n        name: 'RDS',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n      }\n    ],\n    connections: [\n      { from: 'vpc', to: 'ec2' },\n      { from: 'ec2', to: 'rds' }\n    ]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [\n    { id: 'ec2', name: 'EC2' },\n    { id: 'lambda', name: 'Lambda' },\n    { id: 'ecs', name: 'ECS' },\n    { id: 'fargate', name: 'Fargate' }\n  ]\n};\n\nexport const generateArchitecture = async (difficulty = 'BEGINNER') => {\n  if (!openai) {\n    console.log('OpenAI not available, using fallback');\n    return FALLBACK_ARCHITECTURE;\n  }\n\n  const difficultyConfig = DIFFICULTY_LEVELS[difficulty];\n  \n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an AWS Solutions Architect expert. Generate ${difficultyConfig.complexity} \n          architecture scenarios using ${difficultyConfig.services}.`\n        },\n        {\n          role: \"user\",\n          content: `Create a ${difficulty.toLowerCase()} level AWS architecture scenario with missing services.`\n        }\n      ],\n      functions: [{\n        name: \"generateArchitectureScenario\",\n        description: \"Generate an AWS architecture scenario with missing services\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            architecture: {\n              type: \"object\",\n              properties: {\n                services: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: { type: \"string\" },\n                      name: { type: \"string\" },\n                      icon: { type: \"string\" }\n                    }\n                  }\n                },\n                connections: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      from: { type: \"string\" },\n                      to: { type: \"string\" }\n                    }\n                  }\n                }\n              }\n            },\n            question: {\n              type: \"object\",\n              properties: {\n                text: { type: \"string\" },\n                position: { type: \"string\" },\n                missingServices: { \n                  type: \"array\",\n                  items: { type: \"string\" }\n                }\n              }\n            },\n            options: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  id: { type: \"string\" },\n                  name: { type: \"string\" }\n                }\n              }\n            }\n          },\n          required: [\"architecture\", \"question\", \"options\"]\n        }\n      }],\n      function_call: { name: \"generateArchitectureScenario\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating architecture:', error);\n    return FALLBACK_ARCHITECTURE;\n  }\n};\n\nexport const validateAnswer = async (architecture, selectedService, position) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are validating AWS architecture design decisions.\"\n        },\n        {\n          role: \"user\",\n          content: `Validate if ${selectedService} is appropriate for position ${position} in the given architecture.\n          Architecture context: ${JSON.stringify(architecture)}`\n        }\n      ],\n      functions: [{\n        name: \"validateArchitectureChoice\",\n        description: \"Validate the selected AWS service for the architecture\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            correct: {\n              type: \"boolean\",\n              description: \"Whether the service choice is correct\"\n            },\n            explanation: {\n              type: \"string\",\n              description: \"Detailed explanation of why the choice is correct or incorrect\"\n            },\n            bestPractices: {\n              type: \"array\",\n              items: { type: \"string\" },\n              description: \"Relevant AWS best practices\"\n            }\n          },\n          required: [\"correct\", \"explanation\"]\n        }\n      }],\n      function_call: { name: \"validateArchitectureChoice\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}