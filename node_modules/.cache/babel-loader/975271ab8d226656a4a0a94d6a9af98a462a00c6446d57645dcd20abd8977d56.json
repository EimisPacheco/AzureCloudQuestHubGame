{"ast":null,"code":"/** @hidden */\nexport class OrderByEndpointComponent {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(executionContext, emitRawOrderByPayload = false) {\n    this.executionContext = executionContext;\n    this.emitRawOrderByPayload = emitRawOrderByPayload;\n  }\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  hasMoreResults() {\n    return this.executionContext.hasMoreResults();\n  }\n  async fetchMore(diagnosticNode) {\n    const buffer = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    if (response === undefined || response.result === undefined) {\n      return {\n        result: undefined,\n        headers: response.headers\n      };\n    }\n    for (const item of response.result) {\n      if (this.emitRawOrderByPayload) {\n        buffer.push(item);\n      } else {\n        buffer.push(item.payload);\n      }\n    }\n    return {\n      result: buffer,\n      headers: response.headers\n    };\n  }\n}","map":{"version":3,"names":["OrderByEndpointComponent","constructor","executionContext","emitRawOrderByPayload","hasMoreResults","fetchMore","diagnosticNode","buffer","response","undefined","result","headers","item","push","payload"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/cosmos/src/queryExecutionContext/EndpointComponent/OrderByEndpointComponent.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\n\n/** @hidden */\nexport class OrderByEndpointComponent implements ExecutionContext {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(\n    private executionContext: ExecutionContext,\n    private emitRawOrderByPayload: boolean = false,\n  ) {}\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n    for (const item of response.result) {\n      if (this.emitRawOrderByPayload) {\n        buffer.push(item);\n      } else {\n        buffer.push(item.payload);\n      }\n    }\n\n    return { result: buffer, headers: response.headers };\n  }\n}\n"],"mappings":"AAMA;AACA,OAAM,MAAOA,wBAAwB;EACnC;;;;;;;EAOAC,YACUC,gBAAkC,EAClCC,qBAAA,GAAiC,KAAK;IADtC,KAAAD,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,qBAAqB,GAArBA,qBAAqB;EAC5B;EACH;;;;EAIOC,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACF,gBAAgB,CAACE,cAAc,EAAE;EAC/C;EAEO,MAAMC,SAASA,CAACC,cAAuC;IAC5D,MAAMC,MAAM,GAAU,EAAE;IACxB,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACN,gBAAgB,CAACG,SAAS,CAACC,cAAc,CAAC;IACtE,IAAIE,QAAQ,KAAKC,SAAS,IAAID,QAAQ,CAACE,MAAM,KAAKD,SAAS,EAAE;MAC3D,OAAO;QAAEC,MAAM,EAAED,SAAS;QAAEE,OAAO,EAAEH,QAAQ,CAACG;MAAO,CAAE;IACzD;IACA,KAAK,MAAMC,IAAI,IAAIJ,QAAQ,CAACE,MAAM,EAAE;MAClC,IAAI,IAAI,CAACP,qBAAqB,EAAE;QAC9BI,MAAM,CAACM,IAAI,CAACD,IAAI,CAAC;MACnB,CAAC,MAAM;QACLL,MAAM,CAACM,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC;MAC3B;IACF;IAEA,OAAO;MAAEJ,MAAM,EAAEH,MAAM;MAAEI,OAAO,EAAEH,QAAQ,CAACG;IAAO,CAAE;EACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}