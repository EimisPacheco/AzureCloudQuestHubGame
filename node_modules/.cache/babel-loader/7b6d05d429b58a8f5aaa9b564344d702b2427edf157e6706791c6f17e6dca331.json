{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { parseKeyVaultIdentifier } from \"@azure/keyvault-common\";\n/**\n * Parses the given Key Vault Key Id. An example is:\n *\n *   https://<keyvault-name>.vault.azure.net/keys/<key-name>/<unique-version-id>\n *\n * On parsing the above Id, this function returns:\n *```ts\n *   {\n *      sourceId: \"https://<keyvault-name>.vault.azure.net/keys/<key-name>/<unique-version-id>\",\n *      vaultUrl: \"https://<keyvault-name>.vault.azure.net\",\n *      version: \"<unique-version-id>\",\n *      name: \"<key-name>\"\n *   }\n *```\n * @param id - The Id of the Key Vault Key.\n */\nexport function parseKeyVaultKeyIdentifier(id) {\n  const urlParts = id.split(\"/\");\n  const collection = urlParts[3];\n  return Object.assign({\n    sourceId: id\n  }, parseKeyVaultIdentifier(collection, id));\n}","map":{"version":3,"names":["parseKeyVaultIdentifier","parseKeyVaultKeyIdentifier","id","urlParts","split","collection","Object","assign","sourceId"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/keyvault-keys/src/identifier.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { parseKeyVaultIdentifier } from \"@azure/keyvault-common\";\n\n/**\n * Represents the segments that compose a Key Vault Key Id.\n */\nexport interface KeyVaultKeyIdentifier {\n  /**\n   * The complete representation of the Key Vault Key Id. For example:\n   *\n   *   https://<keyvault-name>.vault.azure.net/keys/<key-name>/<unique-version-id>\n   *\n   */\n  sourceId: string;\n\n  /**\n   * The URL of the Azure Key Vault instance to which the Key belongs.\n   */\n  vaultUrl: string;\n\n  /**\n   * The version of Key Vault Key. Might be undefined.\n   */\n  version?: string;\n\n  /**\n   * The name of the Key Vault Key.\n   */\n  name: string;\n}\n\n/**\n * Parses the given Key Vault Key Id. An example is:\n *\n *   https://<keyvault-name>.vault.azure.net/keys/<key-name>/<unique-version-id>\n *\n * On parsing the above Id, this function returns:\n *```ts\n *   {\n *      sourceId: \"https://<keyvault-name>.vault.azure.net/keys/<key-name>/<unique-version-id>\",\n *      vaultUrl: \"https://<keyvault-name>.vault.azure.net\",\n *      version: \"<unique-version-id>\",\n *      name: \"<key-name>\"\n *   }\n *```\n * @param id - The Id of the Key Vault Key.\n */\nexport function parseKeyVaultKeyIdentifier(id: string): KeyVaultKeyIdentifier {\n  const urlParts = id.split(\"/\");\n  const collection = urlParts[3];\n\n  return {\n    sourceId: id,\n    ...parseKeyVaultIdentifier(collection, id),\n  };\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,uBAAuB,QAAQ,wBAAwB;AA8BhE;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,0BAA0BA,CAACC,EAAU;EACnD,MAAMC,QAAQ,GAAGD,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC;EAC9B,MAAMC,UAAU,GAAGF,QAAQ,CAAC,CAAC,CAAC;EAE9B,OAAAG,MAAA,CAAAC,MAAA;IACEC,QAAQ,EAAEN;EAAE,GACTF,uBAAuB,CAACK,UAAU,EAAEH,EAAE,CAAC;AAE9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}