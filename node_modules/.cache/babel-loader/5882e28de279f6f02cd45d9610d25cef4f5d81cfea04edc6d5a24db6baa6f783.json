{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, MarkerType, Handle } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSServiceNode = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(motion.div, {\n  className: `aws-service-node ${data.isMissing ? 'missing' : ''}`,\n  initial: {\n    scale: 0,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1\n  },\n  exit: {\n    scale: 0,\n    opacity: 0\n  },\n  whileHover: {\n    scale: 1.1\n  },\n  transition: {\n    type: \"spring\",\n    stiffness: 300\n  },\n  children: [/*#__PURE__*/_jsxDEV(Handle, {\n    type: \"target\",\n    position: \"top\",\n    id: `${data.id}-target`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-content\",\n    children: [data.isMissing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missing-service-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.icon,\n      alt: data.label,\n      className: \"service-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"service-label\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Handle, {\n    type: \"source\",\n    position: \"bottom\",\n    id: `${data.id}-source`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = AWSServiceNode;\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\nconst createNodeId = serviceName => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\nconst AWSArchitectureDisplay = ({\n  architecture,\n  missingServices\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  // Add a ref to track if we've logged the warning\n  const hasLoggedWarning = React.useRef(false);\n  useEffect(() => {\n    if (architecture) {\n      // Create nodes for all services\n      const newNodes = architecture.services.map((service, index) => ({\n        id: service.id,\n        type: 'default',\n        data: {\n          label: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: service.icon,\n              alt: service.name,\n              style: {\n                width: 30,\n                height: 30\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: service.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        },\n        position: {\n          x: index * 200,\n          y: Math.floor(index / 3) * 200\n        },\n        style: service.name.includes('missing') ? {\n          background: '#ffcccc'\n        } : {}\n      }));\n      const nodeIds = newNodes.map(node => node.id);\n      let nodeIndex = newNodes.length;\n      const placeholderIcon = '/path/to/missing-service-icon.png'; // Replace with your actual missing service icon path\n\n      // Create edges for all connections, adding placeholder nodes for missing services\n      const newEdges = architecture.connections.map((connection, index) => {\n        const fromId = connection.from.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n        const toId = connection.to.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n\n        // Check if 'from' node exists; if not, create a placeholder node\n        if (!nodeIds.includes(fromId)) {\n          newNodes.push({\n            id: fromId,\n            type: 'default',\n            data: {\n              label: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: placeholderIcon,\n                  alt: \"Missing Service\",\n                  style: {\n                    width: 30,\n                    height: 30\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Missing Service\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)\n            },\n            position: {\n              x: nodeIndex * 200,\n              y: Math.floor(nodeIndex / 3) * 200\n            },\n            style: {\n              background: '#ffcccc'\n            }\n          });\n          nodeIds.push(fromId);\n          nodeIndex++;\n        }\n\n        // Check if 'to' node exists; if not, create a placeholder node\n        if (!nodeIds.includes(toId)) {\n          newNodes.push({\n            id: toId,\n            type: 'default',\n            data: {\n              label: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: placeholderIcon,\n                  alt: \"Missing Service\",\n                  style: {\n                    width: 30,\n                    height: 30\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Missing Service\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this)\n            },\n            position: {\n              x: nodeIndex * 200,\n              y: Math.floor(nodeIndex / 3) * 200\n            },\n            style: {\n              background: '#ffcccc'\n            }\n          });\n          nodeIds.push(toId);\n          nodeIndex++;\n        }\n        return {\n          id: `e${index}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep'\n        };\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [architecture]);\n\n  // Early return if no data\n  if (!(architecture !== null && architecture !== void 0 && architecture.services)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-visualizer-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading architecture...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '500px'\n    },\n    className: \"architecture-visualizer\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      minZoom: 0.5,\n      maxZoom: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#4FD1C5\",\n        gap: 16,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => node.data.isMissing ? '#FF5656' : '#4FD1C5',\n        maskColor: \"rgba(13, 25, 35, 0.7)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"ymklbP+YFGCeuuTrnQcK0pTKhKc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"AWSServiceNode\");\n$RefreshReg$(_c2, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","useEffect","useState","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","MarkerType","Handle","motion","getCachedServiceIcon","jsxDEV","_jsxDEV","AWSServiceNode","data","div","className","isMissing","initial","scale","opacity","animate","exit","whileHover","transition","type","stiffness","children","position","id","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","label","_c","nodeTypes","awsService","createNodeId","serviceName","console","error","toLowerCase","replace","AWSArchitectureDisplay","architecture","missingServices","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","hasLoggedWarning","useRef","newNodes","services","map","service","index","name","style","width","height","x","y","Math","floor","includes","background","nodeIds","node","nodeIndex","length","placeholderIcon","newEdges","connections","connection","fromId","from","toId","to","push","source","target","fitView","minZoom","maxZoom","color","gap","size","nodeColor","maskColor","_c2","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactFlow, { \n  Background, \n  Controls, \n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  MarkerType,\n  Handle\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst AWSServiceNode = ({ data }) => (\n  <motion.div\n    className={`aws-service-node ${data.isMissing ? 'missing' : ''}`}\n    initial={{ scale: 0, opacity: 0 }}\n    animate={{ scale: 1, opacity: 1 }}\n    exit={{ scale: 0, opacity: 0 }}\n    whileHover={{ scale: 1.1 }}\n    transition={{ type: \"spring\", stiffness: 300 }}\n  >\n    <Handle \n      type=\"target\" \n      position=\"top\" \n      id={`${data.id}-target`}\n      className=\"handle\"\n    />\n    <div className=\"node-content\">\n      {data.isMissing ? (\n        <div className=\"missing-service-placeholder\">\n          <span>?</span>\n        </div>\n      ) : (\n        <img src={data.icon} alt={data.label} className=\"service-icon\" />\n      )}\n      <span className=\"service-label\">{data.label}</span>\n    </div>\n    <Handle \n      type=\"source\" \n      position=\"bottom\" \n      id={`${data.id}-source`}\n      className=\"handle\"\n    />\n  </motion.div>\n);\n\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\n\nconst createNodeId = (serviceName) => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  return serviceName.toLowerCase().replace(/\\s+/g, '-');\n};\n\nconst AWSArchitectureDisplay = ({ architecture, missingServices }) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  \n  // Add a ref to track if we've logged the warning\n  const hasLoggedWarning = React.useRef(false);\n\n  useEffect(() => {\n    if (architecture) {\n      // Create nodes for all services\n      const newNodes = architecture.services.map((service, index) => ({\n        id: service.id,\n        type: 'default',\n        data: { \n          label: (\n            <div>\n              <img\n                src={service.icon}\n                alt={service.name}\n                style={{ width: 30, height: 30 }}\n              />\n              <div>{service.name}</div>\n            </div>\n          ),\n        },\n        position: {\n          x: index * 200,\n          y: Math.floor(index / 3) * 200,\n        },\n        style: service.name.includes('missing') ? { background: '#ffcccc' } : {},\n      }));\n\n      const nodeIds = newNodes.map((node) => node.id);\n      let nodeIndex = newNodes.length;\n      const placeholderIcon = '/path/to/missing-service-icon.png'; // Replace with your actual missing service icon path\n\n      // Create edges for all connections, adding placeholder nodes for missing services\n      const newEdges = architecture.connections.map((connection, index) => {\n        const fromId = connection.from\n          .toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-');\n        const toId = connection.to\n          .toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-');\n\n        // Check if 'from' node exists; if not, create a placeholder node\n        if (!nodeIds.includes(fromId)) {\n          newNodes.push({\n            id: fromId,\n            type: 'default',\n            data: {\n              label: (\n                <div>\n                  <img\n                    src={placeholderIcon}\n                    alt=\"Missing Service\"\n                    style={{ width: 30, height: 30 }}\n                  />\n                  <div>Missing Service</div>\n                </div>\n              ),\n            },\n            position: {\n              x: nodeIndex * 200,\n              y: Math.floor(nodeIndex / 3) * 200,\n            },\n            style: { background: '#ffcccc' },\n          });\n          nodeIds.push(fromId);\n          nodeIndex++;\n        }\n\n        // Check if 'to' node exists; if not, create a placeholder node\n        if (!nodeIds.includes(toId)) {\n          newNodes.push({\n            id: toId,\n            type: 'default',\n            data: {\n              label: (\n                <div>\n                  <img\n                    src={placeholderIcon}\n                    alt=\"Missing Service\"\n                    style={{ width: 30, height: 30 }}\n                  />\n                  <div>Missing Service</div>\n                </div>\n              ),\n            },\n            position: {\n              x: nodeIndex * 200,\n              y: Math.floor(nodeIndex / 3) * 200,\n            },\n            style: { background: '#ffcccc' },\n          });\n          nodeIds.push(toId);\n          nodeIndex++;\n        }\n\n        return {\n          id: `e${index}`,\n          source: fromId,\n          target: toId,\n          type: 'smoothstep',\n        };\n      });\n\n      setNodes(newNodes);\n      setEdges(newEdges);\n    }\n  }, [architecture]);\n\n  // Early return if no data\n  if (!architecture?.services) {\n    return (\n      <div className=\"architecture-visualizer-loading\">\n        <span>Loading architecture...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '500px' }} className=\"architecture-visualizer\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n        minZoom={0.5}\n        maxZoom={1.5}\n      >\n        <Background color=\"#4FD1C5\" gap={16} size={1} />\n        <Controls />\n        <MiniMap \n          nodeColor={(node) => node.data.isMissing ? '#FF5656' : '#4FD1C5'}\n          maskColor=\"rgba(13, 25, 35, 0.7)\"\n        />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}