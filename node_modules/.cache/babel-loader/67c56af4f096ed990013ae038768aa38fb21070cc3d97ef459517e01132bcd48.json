{"ast":null,"code":"const translateText = async (text, targetLanguage) => {\n  try {\n    console.log('Translating:', text, 'to', targetLanguage); // Debug log\n    const response = await fetch(`${process.env.REACT_APP_TRANSLATOR_ENDPOINT}/translate?api-version=3.0&to=${targetLanguage}`, {\n      method: 'POST',\n      headers: {\n        'Ocp-Apim-Subscription-Key': process.env.REACT_APP_TRANSLATOR_KEY,\n        'Ocp-Apim-Subscription-Region': process.env.REACT_APP_TRANSLATOR_LOCATION,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([{\n        text\n      }])\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('Translation result:', result); // Debug log\n    return result[0].translations[0].text;\n  } catch (error) {\n    console.error('Translation error:', error);\n    return `Translation Error: ${error.message}`;\n  }\n};\nexport { translateText };","map":{"version":3,"names":["translateText","text","targetLanguage","console","log","response","fetch","process","env","REACT_APP_TRANSLATOR_ENDPOINT","method","headers","REACT_APP_TRANSLATOR_KEY","REACT_APP_TRANSLATOR_LOCATION","body","JSON","stringify","ok","Error","status","result","json","translations","error","message"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/services/TranslationService.js"],"sourcesContent":["const translateText = async (text, targetLanguage) => {\n  try {\n    console.log('Translating:', text, 'to', targetLanguage); // Debug log\n    const response = await fetch(\n      `${process.env.REACT_APP_TRANSLATOR_ENDPOINT}/translate?api-version=3.0&to=${targetLanguage}`,\n      {\n        method: 'POST',\n        headers: {\n          'Ocp-Apim-Subscription-Key': process.env.REACT_APP_TRANSLATOR_KEY,\n          'Ocp-Apim-Subscription-Region': process.env.REACT_APP_TRANSLATOR_LOCATION,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify([{ text }]),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    console.log('Translation result:', result); // Debug log\n    return result[0].translations[0].text;\n  } catch (error) {\n    console.error('Translation error:', error);\n    return `Translation Error: ${error.message}`;\n  }\n};\n\nexport { translateText }; "],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAOC,IAAI,EAAEC,cAAc,KAAK;EACpD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,IAAI,EAAE,IAAI,EAAEC,cAAc,CAAC,CAAC,CAAC;IACzD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGC,OAAO,CAACC,GAAG,CAACC,6BAA6B,iCAAiCP,cAAc,EAAE,EAC7F;MACEQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,2BAA2B,EAAEJ,OAAO,CAACC,GAAG,CAACI,wBAAwB;QACjE,8BAA8B,EAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B;QACzE,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC;QAAEf;MAAK,CAAC,CAAC;IACjC,CACF,CAAC;IAED,IAAI,CAACI,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBb,QAAQ,CAACc,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,MAAM,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IACpClB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEgB,MAAM,CAAC,CAAC,CAAC;IAC5C,OAAOA,MAAM,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC,CAACrB,IAAI;EACvC,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,sBAAsBA,KAAK,CAACC,OAAO,EAAE;EAC9C;AACF,CAAC;AAED,SAASxB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}