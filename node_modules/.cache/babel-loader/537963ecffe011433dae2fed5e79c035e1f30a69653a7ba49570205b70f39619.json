{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, MarkerType, Handle } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AWSServiceNode = ({\n  data\n}) => /*#__PURE__*/_jsxDEV(motion.div, {\n  className: `aws-service-node ${data.isMissing ? 'missing' : ''}`,\n  initial: {\n    scale: 0,\n    opacity: 0\n  },\n  animate: {\n    scale: 1,\n    opacity: 1\n  },\n  exit: {\n    scale: 0,\n    opacity: 0\n  },\n  whileHover: {\n    scale: 1.1\n  },\n  transition: {\n    type: \"spring\",\n    stiffness: 300\n  },\n  children: [/*#__PURE__*/_jsxDEV(Handle, {\n    type: \"target\",\n    position: \"top\",\n    id: `${data.id}-target`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node-content\",\n    children: [data.isMissing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"missing-service-placeholder\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      src: data.icon,\n      alt: data.label,\n      className: \"service-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"service-label\",\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Handle, {\n    type: \"source\",\n    position: \"bottom\",\n    id: `${data.id}-source`,\n    className: \"handle\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = AWSServiceNode;\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\nconst createNodeId = serviceName => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  // Special handling for missing_X format\n  if (serviceName.startsWith('missing_')) {\n    return serviceName;\n  }\n  // Handle regular AWS service names\n  return serviceName.toLowerCase().replace(/\\s+/g, '-').replace(/amazon-|aws-/g, '');\n};\nconst AWSArchitectureDisplay = ({\n  architecture,\n  missingServices\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  // Add a ref to track if we've logged the warning\n  const hasLoggedWarning = React.useRef(false);\n  React.useEffect(() => {\n    if (!(architecture !== null && architecture !== void 0 && architecture.services)) {\n      console.log('⚠️ Waiting for architecture data...');\n      return;\n    }\n    const newNodes = [];\n    const newEdges = [];\n\n    // Keep your existing node creation exactly as is\n    architecture.services.forEach((service, index) => {\n      const serviceId = typeof service === 'string' ? createNodeId(service) : service.id;\n      const serviceName = typeof service === 'string' ? service : service.name;\n      newNodes.push({\n        id: serviceId,\n        type: 'awsService',\n        position: {\n          x: index * 200,\n          y: 200\n        },\n        data: {\n          id: serviceId,\n          label: serviceName,\n          icon: getCachedServiceIcon(serviceName),\n          isMissing: serviceName.includes('missing')\n        }\n      });\n    });\n\n    // Only modify the edges creation\n    if (architecture.connections) {\n      console.log('Processing connections:', architecture.connections);\n      architecture.connections.forEach(conn => {\n        const fromId = typeof conn.from === 'string' ? createNodeId(conn.from) : conn.from.id;\n        const toId = typeof conn.to === 'string' ? createNodeId(conn.to) : conn.to.id;\n        console.log(`Creating edge from ${fromId} to ${toId}`);\n\n        // Check if both nodes exist\n        const sourceExists = newNodes.some(node => node.id === fromId);\n        const targetExists = newNodes.some(node => node.id === toId);\n        if (sourceExists && targetExists) {\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'smoothstep',\n            animated: true,\n            style: {\n              stroke: '#4FD1C5',\n              strokeWidth: 2\n            },\n            markerEnd: {\n              type: MarkerType.ArrowClosed\n            }\n          });\n        } else {\n          console.warn(`Missing nodes for connection: ${fromId} -> ${toId}`);\n        }\n      });\n    }\n    console.log('Final nodes:', newNodes);\n    console.log('Final edges:', newEdges);\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture, setNodes, setEdges]);\n\n  // Early return if no data\n  if (!(architecture !== null && architecture !== void 0 && architecture.services)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"architecture-visualizer-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading architecture...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '500px'\n    },\n    className: \"architecture-visualizer\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      minZoom: 0.5,\n      maxZoom: 1.5,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#4FD1C5\",\n        gap: 16,\n        size: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => node.data.isMissing ? '#FF5656' : '#4FD1C5',\n        maskColor: \"rgba(13, 25, 35, 0.7)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(AWSArchitectureDisplay, \"ymklbP+YFGCeuuTrnQcK0pTKhKc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c2 = AWSArchitectureDisplay;\nexport default AWSArchitectureDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"AWSServiceNode\");\n$RefreshReg$(_c2, \"AWSArchitectureDisplay\");","map":{"version":3,"names":["React","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","MarkerType","Handle","motion","getCachedServiceIcon","jsxDEV","_jsxDEV","AWSServiceNode","data","div","className","isMissing","initial","scale","opacity","animate","exit","whileHover","transition","type","stiffness","children","position","id","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","label","_c","nodeTypes","awsService","createNodeId","serviceName","console","error","startsWith","toLowerCase","replace","AWSArchitectureDisplay","architecture","missingServices","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","hasLoggedWarning","useRef","useEffect","services","log","newNodes","newEdges","forEach","service","index","serviceId","name","push","x","y","includes","connections","conn","fromId","from","toId","to","sourceExists","some","node","targetExists","source","target","animated","style","stroke","strokeWidth","markerEnd","ArrowClosed","warn","height","fitView","minZoom","maxZoom","color","gap","size","nodeColor","maskColor","_c2","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureDisplay.jsx"],"sourcesContent":["import React from 'react';\nimport ReactFlow, { \n  Background, \n  Controls, \n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  MarkerType,\n  Handle\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { motion } from 'framer-motion';\nimport { getCachedServiceIcon } from '../services/IconResolver';\n\nconst AWSServiceNode = ({ data }) => (\n  <motion.div\n    className={`aws-service-node ${data.isMissing ? 'missing' : ''}`}\n    initial={{ scale: 0, opacity: 0 }}\n    animate={{ scale: 1, opacity: 1 }}\n    exit={{ scale: 0, opacity: 0 }}\n    whileHover={{ scale: 1.1 }}\n    transition={{ type: \"spring\", stiffness: 300 }}\n  >\n    <Handle \n      type=\"target\" \n      position=\"top\" \n      id={`${data.id}-target`}\n      className=\"handle\"\n    />\n    <div className=\"node-content\">\n      {data.isMissing ? (\n        <div className=\"missing-service-placeholder\">\n          <span>?</span>\n        </div>\n      ) : (\n        <img src={data.icon} alt={data.label} className=\"service-icon\" />\n      )}\n      <span className=\"service-label\">{data.label}</span>\n    </div>\n    <Handle \n      type=\"source\" \n      position=\"bottom\" \n      id={`${data.id}-source`}\n      className=\"handle\"\n    />\n  </motion.div>\n);\n\nconst nodeTypes = {\n  awsService: AWSServiceNode\n};\n\nconst createNodeId = (serviceName) => {\n  if (typeof serviceName !== 'string') {\n    console.error('Invalid service name:', serviceName);\n    return 'invalid-service';\n  }\n  // Special handling for missing_X format\n  if (serviceName.startsWith('missing_')) {\n    return serviceName;\n  }\n  // Handle regular AWS service names\n  return serviceName.toLowerCase().replace(/\\s+/g, '-').replace(/amazon-|aws-/g, '');\n};\n\nconst AWSArchitectureDisplay = ({ architecture, missingServices }) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  \n  // Add a ref to track if we've logged the warning\n  const hasLoggedWarning = React.useRef(false);\n\n  React.useEffect(() => {\n    if (!architecture?.services) {\n      console.log('⚠️ Waiting for architecture data...');\n      return;\n    }\n\n    const newNodes = [];\n    const newEdges = [];\n\n    // Keep your existing node creation exactly as is\n    architecture.services.forEach((service, index) => {\n      const serviceId = typeof service === 'string' ? createNodeId(service) : service.id;\n      const serviceName = typeof service === 'string' ? service : service.name;\n      \n      newNodes.push({\n        id: serviceId,\n        type: 'awsService',\n        position: { x: index * 200, y: 200 },\n        data: {\n          id: serviceId,\n          label: serviceName,\n          icon: getCachedServiceIcon(serviceName),\n          isMissing: serviceName.includes('missing')\n        }\n      });\n    });\n\n    // Only modify the edges creation\n    if (architecture.connections) {\n      console.log('Processing connections:', architecture.connections);\n      \n      architecture.connections.forEach((conn) => {\n        const fromId = typeof conn.from === 'string' ? createNodeId(conn.from) : conn.from.id;\n        const toId = typeof conn.to === 'string' ? createNodeId(conn.to) : conn.to.id;\n        \n        console.log(`Creating edge from ${fromId} to ${toId}`);\n        \n        // Check if both nodes exist\n        const sourceExists = newNodes.some(node => node.id === fromId);\n        const targetExists = newNodes.some(node => node.id === toId);\n        \n        if (sourceExists && targetExists) {\n          newEdges.push({\n            id: `${fromId}-${toId}`,\n            source: fromId,\n            target: toId,\n            type: 'smoothstep',\n            animated: true,\n            style: { stroke: '#4FD1C5', strokeWidth: 2 },\n            markerEnd: { type: MarkerType.ArrowClosed }\n          });\n        } else {\n          console.warn(`Missing nodes for connection: ${fromId} -> ${toId}`);\n        }\n      });\n    }\n\n    console.log('Final nodes:', newNodes);\n    console.log('Final edges:', newEdges);\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [architecture, setNodes, setEdges]);\n\n  // Early return if no data\n  if (!architecture?.services) {\n    return (\n      <div className=\"architecture-visualizer-loading\">\n        <span>Loading architecture...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '500px' }} className=\"architecture-visualizer\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        nodeTypes={nodeTypes}\n        fitView\n        minZoom={0.5}\n        maxZoom={1.5}\n      >\n        <Background color=\"#4FD1C5\" gap={16} size={1} />\n        <Controls />\n        <MiniMap \n          nodeColor={(node) => node.data.isMissing ? '#FF5656' : '#4FD1C5'}\n          maskColor=\"rgba(13, 25, 35, 0.7)\"\n        />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default AWSArchitectureDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}