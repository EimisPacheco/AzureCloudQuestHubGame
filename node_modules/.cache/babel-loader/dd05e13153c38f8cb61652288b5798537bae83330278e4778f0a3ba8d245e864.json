{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = data => {\n  if (!data || !Array.isArray(data.services) || !Array.isArray(data.connections)) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n\n  // Extract service names (handles both strings and objects)\n  const serviceNames = data.services.map(service => typeof service === 'string' ? service : service === null || service === void 0 ? void 0 : service.name);\n\n  // Ensure all missing services exist in the services list\n  if (!requiredMissingServices.every(ms => serviceNames.includes(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing.`);\n    return false;\n  }\n\n  // Ensure missing services are referenced in the connections\n  const connectionNodes = new Set();\n  data.connections.forEach(conn => {\n    connectionNodes.add(conn.from);\n    connectionNodes.add(conn.to);\n  });\n  if (!requiredMissingServices.every(ms => connectionNodes.has(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing from the connections.`);\n    return false;\n  }\n  return true; // JSON is valid\n};\nconst AWSArchitectureGame = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n  const [score, setScore] = useState(0);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [feedback, setFeedback] = useState({\n    isCorrect: false,\n    message: '',\n    points: 0\n  });\n  const [currentMissingServiceIndex, setCurrentMissingServiceIndex] = useState(0);\n  const [questionStartTime, setQuestionStartTime] = useState(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  const getServiceIcon = serviceName => {\n    if (!serviceName) return null;\n    if (serviceName.toLowerCase().includes('missing')) return '/aws-icons/missing.svg';\n    const cleanedServiceName = serviceName.toLowerCase().replace(/^(amazon|aws)\\s+/, '').replace(/\\s+/g, '-');\n    return getCachedServiceIcon(serviceName) || '/aws-icons/default.svg';\n  };\n\n  /**\n   * Fetch architecture data, retrying until the JSON is valid.\n   */\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    let attempt = 0;\n    let isValid = false;\n    let data = null;\n    while (!isValid && attempt < 5) {\n      try {\n        console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        data = await response.json();\n        console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n        isValid = isValidArchitecture(data);\n        if (isValid) break;\n        console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n      } catch (error) {\n        console.error(\"❌ Failed to load architecture:\", error);\n        setError(error.message);\n        setIsLoading(false);\n        return;\n      }\n      attempt++;\n    }\n    if (!isValid) {\n      setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n      setIsLoading(false);\n      return;\n    }\n    console.log(\"✅ Valid architecture received, updating state...\");\n    const transformedServices = data.services.map(serviceName => ({\n      id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n      name: serviceName,\n      icon: getServiceIcon(serviceName)\n    }));\n    setArchitecture({\n      services: transformedServices,\n      connections: data.connections\n    });\n    setArchitectureInfo({\n      name: data.architecture.name,\n      description: data.architecture.description,\n      missingServices: data.missingServices\n    });\n    setIsLoading(false);\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score\",\n            children: [\"Score: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"complexity\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"complexity-icon\",\n              children: \"\\uD83C\\uDFAF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), difficulty]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-architecture-button\",\n          onClick: loadNextArchitecture,\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'New Architecture'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"architecture-description\",\n        children: architectureInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 32\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n        architecture: architecture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          children: architectureInfo !== null && architectureInfo !== void 0 && architectureInfo.missingServices ? `Service ${currentMissingServiceIndex + 1} of ${architectureInfo.missingServices.length}` : 'Loading...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 7\n  }, this);\n};\n_s(AWSArchitectureGame, \"CVDsOu40UfVc5ObHjtDi9CfgQxQ=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","AWSArchitectureDisplay","DraggableService","DndProvider","HTML5Backend","getCachedServiceIcon","SERVICE_MAPPINGS","jsxDEV","_jsxDEV","S3_BUCKET_URL","ICONS_BASE_PATH","API_URL","isValidArchitecture","data","Array","isArray","services","connections","console","warn","requiredMissingServices","serviceNames","map","service","name","every","ms","includes","join","connectionNodes","Set","forEach","conn","add","from","to","has","AWSArchitectureGame","_s","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","difficulty","score","setScore","showFeedback","setShowFeedback","feedback","setFeedback","isCorrect","message","points","currentMissingServiceIndex","setCurrentMissingServiceIndex","questionStartTime","setQuestionStartTime","elapsedTime","setElapsedTime","sensors","activationConstraint","distance","getServiceIcon","serviceName","toLowerCase","cleanedServiceName","replace","loadNextArchitecture","attempt","isValid","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","transformedServices","id","icon","description","missingServices","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { getCachedServiceIcon, SERVICE_MAPPINGS } from '../services/IconResolver';\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\nconst API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n/**\n * Validate the JSON response structure to ensure it includes required missing services.\n * @param {Object} data - JSON response from the API.\n * @returns {boolean} - Returns true if the JSON is valid, otherwise false.\n */\nconst isValidArchitecture = (data) => {\n  if (!data || !Array.isArray(data.services) || !Array.isArray(data.connections)) {\n    console.warn(\"⚠️ Invalid JSON structure: Missing 'services' or 'connections'. Retrying...\");\n    return false;\n  }\n\n  const requiredMissingServices = ['missing_1', 'missing_2', 'missing_3'];\n\n  // Extract service names (handles both strings and objects)\n  const serviceNames = data.services.map(service => \n    typeof service === 'string' ? service : service?.name\n  );\n\n  // Ensure all missing services exist in the services list\n  if (!requiredMissingServices.every(ms => serviceNames.includes(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing.`);\n    return false;\n  }\n\n  // Ensure missing services are referenced in the connections\n  const connectionNodes = new Set();\n  data.connections.forEach(conn => {\n    connectionNodes.add(conn.from);\n    connectionNodes.add(conn.to);\n  });\n\n  if (!requiredMissingServices.every(ms => connectionNodes.has(ms))) {\n    console.warn(`⚠️ JSON is invalid: One or more missing services (${requiredMissingServices.join(', ')}) are missing from the connections.`);\n    return false;\n  }\n\n  return true; // JSON is valid\n};\n\nconst AWSArchitectureGame = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [architecture, setArchitecture] = useState(null);\n    const [architectureInfo, setArchitectureInfo] = useState(null);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [serviceOptions, setServiceOptions] = useState([]);\n    const [difficulty] = useState('BEGINNER');\n    const [score, setScore] = useState(0);\n    const [showFeedback, setShowFeedback] = useState(false);\n    const [feedback, setFeedback] = useState({ isCorrect: false, message: '', points: 0 });\n    const [currentMissingServiceIndex, setCurrentMissingServiceIndex] = useState(0);\n    const [questionStartTime, setQuestionStartTime] = useState(null);\n    const [elapsedTime, setElapsedTime] = useState(0);\n\n    const sensors = useSensors(\n      useSensor(PointerSensor, { activationConstraint: { distance: 8 } }),\n      useSensor(TouchSensor)\n    );\n\n    const getServiceIcon = (serviceName) => {\n      if (!serviceName) return null;\n      if (serviceName.toLowerCase().includes('missing')) return '/aws-icons/missing.svg';\n\n      const cleanedServiceName = serviceName.toLowerCase().replace(/^(amazon|aws)\\s+/, '').replace(/\\s+/g, '-');\n      return getCachedServiceIcon(serviceName) || '/aws-icons/default.svg';\n    };\n\n    /**\n     * Fetch architecture data, retrying until the JSON is valid.\n     */\n    const loadNextArchitecture = useCallback(async () => {\n      if (isLoading) return;\n\n      setIsLoading(true);\n      setError(null);\n      \n      let attempt = 0;\n      let isValid = false;\n      let data = null;\n\n      while (!isValid && attempt < 5) {\n        try {\n          console.log(`🔄 Attempt ${attempt + 1}: Fetching architecture data...`);\n          const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ difficulty })\n          });\n\n          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n\n          data = await response.json();\n          console.log(\"📥 Received AI Response:\", JSON.stringify(data, null, 2));\n\n          isValid = isValidArchitecture(data);\n          if (isValid) break;\n\n          console.warn(`⛔ Invalid JSON structure. Retrying request...`);\n\n        } catch (error) {\n          console.error(\"❌ Failed to load architecture:\", error);\n          setError(error.message);\n          setIsLoading(false);\n          return;\n        }\n\n        attempt++;\n      }\n\n      if (!isValid) {\n        setError(\"Failed to fetch a valid architecture after multiple attempts.\");\n        setIsLoading(false);\n        return;\n      }\n\n      console.log(\"✅ Valid architecture received, updating state...\");\n\n      const transformedServices = data.services.map(serviceName => ({\n        id: serviceName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n        name: serviceName,\n        icon: getServiceIcon(serviceName)\n      }));\n\n      setArchitecture({\n        services: transformedServices,\n        connections: data.connections\n      });\n\n      setArchitectureInfo({\n        name: data.architecture.name,\n        description: data.architecture.description,\n        missingServices: data.missingServices\n      });\n\n      setIsLoading(false);\n    }, [difficulty]);\n\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"game-container\">\n          <div className=\"game-header\">\n            <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n            <div className=\"game-stats\">\n              <div className=\"score\">Score: {score}</div>\n              <div className=\"complexity\">\n                <span className=\"complexity-icon\">🎯</span>\n                {difficulty}\n              </div>\n            </div>\n            <button \n              className=\"new-architecture-button\"\n              onClick={loadNextArchitecture}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'New Architecture'}\n            </button>\n          </div>\n          \n          {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n          \n          {error ? (\n            <div className=\"error-message\">{error}</div>\n          ) : (\n            <AWSArchitectureDisplay architecture={architecture} />\n          )}\n\n          <div className=\"game-status\">\n            <div className=\"progress\">\n              {architectureInfo?.missingServices ? \n                `Service ${currentMissingServiceIndex + 1} of ${architectureInfo.missingServices.length}` :\n                'Loading...'\n              }\n            </div>\n          </div>\n        </div>\n      </DndProvider>\n    );\n};\n\nexport default AWSArchitectureGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC/D,SAASC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,eAAe;AAC7F,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,oBAAoB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,MAAMC,aAAa,GAAG,yDAAyD;AAC/E,MAAMC,eAAe,GAAG,uDAAuD;AAE/E,MAAMC,OAAO,GAAG,kFAAkF;;AAElG;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAIC,IAAI,IAAK;EACpC,IAAI,CAACA,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,IAAI,CAACF,KAAK,CAACC,OAAO,CAACF,IAAI,CAACI,WAAW,CAAC,EAAE;IAC9EC,OAAO,CAACC,IAAI,CAAC,6EAA6E,CAAC;IAC3F,OAAO,KAAK;EACd;EAEA,MAAMC,uBAAuB,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC;;EAEvE;EACA,MAAMC,YAAY,GAAGR,IAAI,CAACG,QAAQ,CAACM,GAAG,CAACC,OAAO,IAC5C,OAAOA,OAAO,KAAK,QAAQ,GAAGA,OAAO,GAAGA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,IACnD,CAAC;;EAED;EACA,IAAI,CAACJ,uBAAuB,CAACK,KAAK,CAACC,EAAE,IAAIL,YAAY,CAACM,QAAQ,CAACD,EAAE,CAAC,CAAC,EAAE;IACnER,OAAO,CAACC,IAAI,CAAC,qDAAqDC,uBAAuB,CAACQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACrH,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC;EACjCjB,IAAI,CAACI,WAAW,CAACc,OAAO,CAACC,IAAI,IAAI;IAC/BH,eAAe,CAACI,GAAG,CAACD,IAAI,CAACE,IAAI,CAAC;IAC9BL,eAAe,CAACI,GAAG,CAACD,IAAI,CAACG,EAAE,CAAC;EAC9B,CAAC,CAAC;EAEF,IAAI,CAACf,uBAAuB,CAACK,KAAK,CAACC,EAAE,IAAIG,eAAe,CAACO,GAAG,CAACV,EAAE,CAAC,CAAC,EAAE;IACjER,OAAO,CAACC,IAAI,CAAC,qDAAqDC,uBAAuB,CAACQ,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC;IAC1I,OAAO,KAAK;EACd;EAEA,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAED,MAAMS,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgD,KAAK,EAAEC,QAAQ,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACsD,eAAe,EAAEC,kBAAkB,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACwD,cAAc,EAAEC,iBAAiB,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC0D,UAAU,CAAC,GAAG1D,QAAQ,CAAC,UAAU,CAAC;EACzC,MAAM,CAAC2D,KAAK,EAAEC,QAAQ,CAAC,GAAG5D,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC6D,YAAY,EAAEC,eAAe,CAAC,GAAG9D,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC+D,QAAQ,EAAEC,WAAW,CAAC,GAAGhE,QAAQ,CAAC;IAAEiE,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EACtF,MAAM,CAACC,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGrE,QAAQ,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACsE,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvE,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACwE,WAAW,EAAEC,cAAc,CAAC,GAAGzE,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAM0E,OAAO,GAAGrE,UAAU,CACxBD,SAAS,CAACE,aAAa,EAAE;IAAEqE,oBAAoB,EAAE;MAAEC,QAAQ,EAAE;IAAE;EAAE,CAAC,CAAC,EACnExE,SAAS,CAACG,WAAW,CACvB,CAAC;EAED,MAAMsE,cAAc,GAAIC,WAAW,IAAK;IACtC,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;IAC7B,IAAIA,WAAW,CAACC,WAAW,CAAC,CAAC,CAAC7C,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,wBAAwB;IAElF,MAAM8C,kBAAkB,GAAGF,WAAW,CAACC,WAAW,CAAC,CAAC,CAACE,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACzG,OAAOrE,oBAAoB,CAACkE,WAAW,CAAC,IAAI,wBAAwB;EACtE,CAAC;;EAED;AACJ;AACA;EACI,MAAMI,oBAAoB,GAAGjF,WAAW,CAAC,YAAY;IACnD,IAAI6C,SAAS,EAAE;IAEfC,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAIkC,OAAO,GAAG,CAAC;IACf,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIhE,IAAI,GAAG,IAAI;IAEf,OAAO,CAACgE,OAAO,IAAID,OAAO,GAAG,CAAC,EAAE;MAC9B,IAAI;QACF1D,OAAO,CAAC4D,GAAG,CAAC,cAAcF,OAAO,GAAG,CAAC,iCAAiC,CAAC;QACvE,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACrE,OAAO,EAAE;UACpCsE,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAElC;UAAW,CAAC;QACrC,CAAC,CAAC;QAEF,IAAI,CAAC4B,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;QAE3E3E,IAAI,GAAG,MAAMkE,QAAQ,CAACU,IAAI,CAAC,CAAC;QAC5BvE,OAAO,CAAC4D,GAAG,CAAC,0BAA0B,EAAEM,IAAI,CAACC,SAAS,CAACxE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEtEgE,OAAO,GAAGjE,mBAAmB,CAACC,IAAI,CAAC;QACnC,IAAIgE,OAAO,EAAE;QAEb3D,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;MAE/D,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdvB,OAAO,CAACuB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDC,QAAQ,CAACD,KAAK,CAACkB,OAAO,CAAC;QACvBnB,YAAY,CAAC,KAAK,CAAC;QACnB;MACF;MAEAoC,OAAO,EAAE;IACX;IAEA,IAAI,CAACC,OAAO,EAAE;MACZnC,QAAQ,CAAC,+DAA+D,CAAC;MACzEF,YAAY,CAAC,KAAK,CAAC;MACnB;IACF;IAEAtB,OAAO,CAAC4D,GAAG,CAAC,kDAAkD,CAAC;IAE/D,MAAMY,mBAAmB,GAAG7E,IAAI,CAACG,QAAQ,CAACM,GAAG,CAACiD,WAAW,KAAK;MAC5DoB,EAAE,EAAEpB,WAAW,CAACC,WAAW,CAAC,CAAC,CAACE,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC;MACzDlD,IAAI,EAAE+C,WAAW;MACjBqB,IAAI,EAAEtB,cAAc,CAACC,WAAW;IAClC,CAAC,CAAC,CAAC;IAEH3B,eAAe,CAAC;MACd5B,QAAQ,EAAE0E,mBAAmB;MAC7BzE,WAAW,EAAEJ,IAAI,CAACI;IACpB,CAAC,CAAC;IAEF6B,mBAAmB,CAAC;MAClBtB,IAAI,EAAEX,IAAI,CAAC8B,YAAY,CAACnB,IAAI;MAC5BqE,WAAW,EAAEhF,IAAI,CAAC8B,YAAY,CAACkD,WAAW;MAC1CC,eAAe,EAAEjF,IAAI,CAACiF;IACxB,CAAC,CAAC;IAEFtD,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,CAACW,UAAU,CAAC,CAAC;EAEhB,oBACE3C,OAAA,CAACL,WAAW;IAAC4F,OAAO,EAAE3F,YAAa;IAAA4F,QAAA,eACjCxF,OAAA;MAAKyF,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC7BxF,OAAA;QAAKyF,SAAS,EAAC,aAAa;QAAAD,QAAA,gBAC1BxF,OAAA;UAAAwF,QAAA,EAAK,CAAAnD,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAErB,IAAI,KAAI;QAA4B;UAAA0E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACjE7F,OAAA;UAAKyF,SAAS,EAAC,YAAY;UAAAD,QAAA,gBACzBxF,OAAA;YAAKyF,SAAS,EAAC,OAAO;YAAAD,QAAA,GAAC,SAAO,EAAC5C,KAAK;UAAA;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC3C7F,OAAA;YAAKyF,SAAS,EAAC,YAAY;YAAAD,QAAA,gBACzBxF,OAAA;cAAMyF,SAAS,EAAC,iBAAiB;cAAAD,QAAA,EAAC;YAAE;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,EAC1ClD,UAAU;UAAA;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACN7F,OAAA;UACEyF,SAAS,EAAC,yBAAyB;UACnCK,OAAO,EAAE3B,oBAAqB;UAC9B4B,QAAQ,EAAEhE,SAAU;UAAAyD,QAAA,EAEnBzD,SAAS,GAAG,YAAY,GAAG;QAAkB;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAELxD,gBAAgB,iBAAIrC,OAAA;QAAGyF,SAAS,EAAC,0BAA0B;QAAAD,QAAA,EAAEnD,gBAAgB,CAACgD;MAAW;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE9F5D,KAAK,gBACJjC,OAAA;QAAKyF,SAAS,EAAC,eAAe;QAAAD,QAAA,EAAEvD;MAAK;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,gBAE5C7F,OAAA,CAACP,sBAAsB;QAAC0C,YAAY,EAAEA;MAAa;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACtD,eAED7F,OAAA;QAAKyF,SAAS,EAAC,aAAa;QAAAD,QAAA,eAC1BxF,OAAA;UAAKyF,SAAS,EAAC,UAAU;UAAAD,QAAA,EACtBnD,gBAAgB,aAAhBA,gBAAgB,eAAhBA,gBAAgB,CAAEiD,eAAe,GAChC,WAAWjC,0BAA0B,GAAG,CAAC,OAAOhB,gBAAgB,CAACiD,eAAe,CAACU,MAAM,EAAE,GACzF;QAAY;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEpB,CAAC;AAAC/D,EAAA,CA1IID,mBAAmB;EAAA,QAeLvC,UAAU,EACxBD,SAAS,EACTA,SAAS;AAAA;AAAA4G,EAAA,GAjBTpE,mBAAmB;AA4IzB,eAAeA,mBAAmB;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}