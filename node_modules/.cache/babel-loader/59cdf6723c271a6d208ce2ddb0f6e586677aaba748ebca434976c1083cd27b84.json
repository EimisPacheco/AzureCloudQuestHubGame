{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AWSArchitectureGame = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [architecture, setArchitecture] = useState(null);\n  const [architectureInfo, setArchitectureInfo] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [serviceOptions, setServiceOptions] = useState([]);\n  const [difficulty] = useState('BEGINNER');\n  const [score, setScore] = useState(0);\n  const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(TouchSensor));\n  const loadNextArchitecture = useCallback(async () => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    const maxRetries = 3;\n    let retryCount = 0;\n    while (retryCount < maxRetries) {\n      try {\n        console.log('🚀 Fetching new architecture...');\n        const response = await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'Origin': 'http://localhost:3000'\n          },\n          mode: 'cors',\n          credentials: 'omit',\n          body: JSON.stringify({\n            difficulty\n          })\n        });\n        if (response.status === 503) {\n          console.warn(`⚠️ Attempt ${retryCount + 1}/${maxRetries}: Server temporarily unavailable`);\n          retryCount++;\n          if (retryCount === maxRetries) {\n            throw new Error('Server is temporarily unavailable. Please try again later.');\n          }\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          continue;\n        }\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('📦 API Response:', {\n          architecture: data.architecture,\n          services: data.services,\n          connections: data.connections,\n          missingServices: data.missingServices\n        });\n        if (!data || !data.architecture || !data.services || !data.connections || !data.missingServices) {\n          throw new Error('Missing required fields in API response');\n        }\n        setArchitectureInfo({\n          name: data.architecture.name,\n          description: data.architecture.description\n        });\n        const transformedServices = data.services.map(serviceName => ({\n          id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n          name: serviceName,\n          icon: `/aws-icons/${serviceName.toLowerCase().replace(/\\s+/g, '-')}.png`\n        }));\n        console.log('🔄 Transformed Services:', transformedServices);\n        setArchitecture({\n          services: transformedServices,\n          connections: data.connections\n        });\n        if (data.missingServices && data.missingServices.length > 0) {\n          console.log('❓ Current Question:', data.missingServices[0]);\n          setCurrentQuestion(data.missingServices[0]);\n          setServiceOptions(data.missingServices[0].options);\n        }\n        break;\n      } catch (error) {\n        console.error('❌ Failed to load architecture:', error);\n        setError(error.message);\n      }\n    }\n    setIsLoading(false);\n  }, [API_URL, difficulty, isLoading]);\n  const handleServiceSelection = async selectedServiceId => {\n    const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n    if (selectedOption !== null && selectedOption !== void 0 && selectedOption.isCorrect) {\n      const points = selectedOption.isOptimal ? 2 : 1;\n      setScore(prev => prev + points);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (architectureInfo === null || architectureInfo === void 0 ? void 0 : architectureInfo.name) || 'AWS Architecture Challenge'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"new-architecture-button\",\n          onClick: loadNextArchitecture,\n          disabled: isLoading,\n          children: isLoading ? 'Loading...' : 'New Architecture'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), architectureInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"architecture-description\",\n        children: architectureInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 32\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n          architecture: architecture,\n          currentQuestion: currentQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"service-options\",\n          children: serviceOptions.map((option, index) => /*#__PURE__*/_jsxDEV(DraggableService, {\n            service: option,\n            onClick: () => handleServiceSelection(option.service)\n          }, `${option.service}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 7\n  }, this);\n};\n_s(AWSArchitectureGame, \"bSQea3j8JJ0kyR2XgeOxzOSfgLk=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = AWSArchitectureGame;\nexport default AWSArchitectureGame;\nvar _c;\n$RefreshReg$(_c, \"AWSArchitectureGame\");","map":{"version":3,"names":["React","useState","useCallback","DndContext","useSensor","useSensors","PointerSensor","TouchSensor","AWSArchitectureDisplay","DraggableService","DndProvider","HTML5Backend","jsxDEV","_jsxDEV","Fragment","_Fragment","AWSArchitectureGame","_s","isLoading","setIsLoading","error","setError","architecture","setArchitecture","architectureInfo","setArchitectureInfo","currentQuestion","setCurrentQuestion","serviceOptions","setServiceOptions","difficulty","score","setScore","API_URL","sensors","activationConstraint","distance","loadNextArchitecture","maxRetries","retryCount","console","log","response","fetch","method","headers","mode","credentials","body","JSON","stringify","status","warn","Error","Promise","resolve","setTimeout","ok","data","json","services","connections","missingServices","name","description","transformedServices","map","serviceName","id","toLowerCase","replace","icon","length","options","message","handleServiceSelection","selectedServiceId","selectedOption","find","opt","service","isCorrect","points","isOptimal","prev","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","option","index","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/AWSArchitectureGame.jsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, TouchSensor } from '@dnd-kit/core';\nimport AWSArchitectureDisplay from './AWSArchitectureDisplay';\nimport DraggableService from './DraggableService';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst AWSArchitectureGame = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [architecture, setArchitecture] = useState(null);\n    const [architectureInfo, setArchitectureInfo] = useState(null);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [serviceOptions, setServiceOptions] = useState([]);\n    const [difficulty] = useState('BEGINNER');\n    const [score, setScore] = useState(0); \n  \n    const API_URL = 'https://p7bwtrx47e.execute-api.us-east-1.amazonaws.com/stage/amazon-architecture';\n\n    const sensors = useSensors(\n      useSensor(PointerSensor, {\n        activationConstraint: {\n          distance: 8,\n        },\n      }),\n      useSensor(TouchSensor)\n    );\n\n    const loadNextArchitecture = useCallback(async () => {\n      if (isLoading) return;\n      setIsLoading(true);\n      setError(null);\n      \n      const maxRetries = 3;\n      let retryCount = 0;\n      \n      while (retryCount < maxRetries) {\n        try {\n          console.log('🚀 Fetching new architecture...');\n          \n          const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n              'Origin': 'http://localhost:3000'\n            },\n            mode: 'cors',\n            credentials: 'omit',\n            body: JSON.stringify({ difficulty })\n          });\n\n          if (response.status === 503) {\n            console.warn(`⚠️ Attempt ${retryCount + 1}/${maxRetries}: Server temporarily unavailable`);\n            retryCount++;\n            if (retryCount === maxRetries) {\n              throw new Error('Server is temporarily unavailable. Please try again later.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            continue;\n          }\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          const data = await response.json();\n          console.log('📦 API Response:', {\n            architecture: data.architecture,\n            services: data.services,\n            connections: data.connections,\n            missingServices: data.missingServices\n          });\n          \n          if (!data || !data.architecture || !data.services || !data.connections || !data.missingServices) {\n            throw new Error('Missing required fields in API response');\n          }\n\n          setArchitectureInfo({\n            name: data.architecture.name,\n            description: data.architecture.description\n          });\n          \n          const transformedServices = data.services.map(serviceName => ({\n            id: serviceName.toLowerCase().replace(/\\s+/g, '-'),\n            name: serviceName,\n            icon: `/aws-icons/${serviceName.toLowerCase().replace(/\\s+/g, '-')}.png`\n          }));\n\n          console.log('🔄 Transformed Services:', transformedServices);\n\n          setArchitecture({\n            services: transformedServices,\n            connections: data.connections\n          });\n\n          if (data.missingServices && data.missingServices.length > 0) {\n            console.log('❓ Current Question:', data.missingServices[0]);\n            setCurrentQuestion(data.missingServices[0]);\n            setServiceOptions(data.missingServices[0].options);\n          }\n          \n          break;\n          \n        } catch (error) {\n          console.error('❌ Failed to load architecture:', error);\n          setError(error.message);\n        }\n      }\n      \n      setIsLoading(false);\n    }, [API_URL, difficulty, isLoading]);\n\n    const handleServiceSelection = async (selectedServiceId) => {\n      const selectedOption = currentQuestion.options.find(opt => opt.service === selectedServiceId);\n      \n      if (selectedOption?.isCorrect) {\n        const points = selectedOption.isOptimal ? 2 : 1;\n        setScore(prev => prev + points);\n      }\n    };\n\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"game-container\">\n          <div className=\"game-header\">\n            <h2>{architectureInfo?.name || 'AWS Architecture Challenge'}</h2>\n            <div className=\"score\">Score: {score}</div>\n            <button \n              className=\"new-architecture-button\"\n              onClick={loadNextArchitecture}\n              disabled={isLoading}\n            >\n              {isLoading ? 'Loading...' : 'New Architecture'}\n            </button>\n          </div>\n          \n          {architectureInfo && <p className=\"architecture-description\">{architectureInfo.description}</p>}\n          \n          {error ? (\n            <div className=\"error-message\">{error}</div>\n          ) : (\n            <>\n              <AWSArchitectureDisplay \n                architecture={architecture}\n                currentQuestion={currentQuestion}\n              />\n              \n              <div className=\"service-options\">\n                {serviceOptions.map((option, index) => (\n                  <DraggableService\n                    key={`${option.service}-${index}`}\n                    service={option}\n                    onClick={() => handleServiceSelection(option.service)}\n                  />\n                ))}\n              </div>\n            </>\n          )}\n        </div>\n      </DndProvider>\n    );\n};\n\nexport default AWSArchitectureGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}