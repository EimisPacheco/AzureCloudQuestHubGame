{"ast":null,"code":"const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App_Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial_Intelligence',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer_Tools',\n  MANAGEMENT: 'Arch_Management_Governance',\n  NETWORKING: 'Arch_Networking_Content_Delivery',\n  SECURITY: 'Arch_Security_Identity_Compliance',\n  STORAGE: 'Arch_Storage'\n};\nconst SERVICE_MAPPINGS = {\n  // Compute Services\n  'AWS Lambda': `${AWS_ICON_CATEGORIES.COMPUTE}/Arch_AWS-Lambda_16.svg`,\n  'Amazon EC2': `${AWS_ICON_CATEGORIES.COMPUTE}/Arch_Amazon-EC2_16.svg`,\n  // Storage Services\n  'Amazon S3': `${AWS_ICON_CATEGORIES.STORAGE}/Arch_Amazon-Simple-Storage-Service_16.svg`,\n  'Amazon EFS': `${AWS_ICON_CATEGORIES.STORAGE}/Arch_Amazon-EFS_16.svg`,\n  // Database Services\n  'Amazon RDS': `${AWS_ICON_CATEGORIES.DATABASE}/Arch_Amazon-RDS_16.svg`,\n  'Amazon DynamoDB': `${AWS_ICON_CATEGORIES.DATABASE}/Arch_Amazon-DynamoDB_16.svg`,\n  // Networking Services\n  'Amazon CloudFront': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Amazon-CloudFront_16.svg`,\n  'Amazon Route 53': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Amazon-Route-53_16.svg`,\n  'Elastic Load Balancing': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Elastic-Load-Balancing_16.svg`,\n  // Security Services\n  'AWS IAM': `${AWS_ICON_CATEGORIES.SECURITY}/Arch_AWS-Identity-and-Access-Management_16.svg`,\n  'AWS WAF': `${AWS_ICON_CATEGORIES.SECURITY}/Arch_AWS-WAF_16.svg`,\n  // Management Services\n  'Amazon CloudWatch': `${AWS_ICON_CATEGORIES.MANAGEMENT}/Arch_Amazon-CloudWatch_16.svg`,\n  // Container Services\n  'Amazon ECS': `${AWS_ICON_CATEGORIES.CONTAINERS}/Arch_Amazon-Elastic-Container-Service_16.svg`,\n  'Amazon EKS': `${AWS_ICON_CATEGORIES.CONTAINERS}/Arch_Amazon-Elastic-Kubernetes-Service_16.svg`\n};\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Add logging collection\nconst iconResolutionLog = {\n  success: [],\n  failed: [],\n  total: 0\n};\nconst getServiceIcon = async serviceName => {\n  iconResolutionLog.total++;\n  const iconPath = SERVICE_MAPPINGS[serviceName];\n  if (!iconPath) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: 'No mapping found'\n    });\n    console.warn(`❌ No icon mapping found for service: ${serviceName}`);\n    return '/aws-icons/default.svg';\n  }\n  try {\n    const fullUrl = `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`;\n\n    // Check if the resource exists\n    const response = await fetch(fullUrl, {\n      method: 'HEAD'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n    iconResolutionLog.success.push({\n      service: serviceName,\n      path: iconPath\n    });\n    console.log(`✅ Icon found for ${serviceName}: ${iconPath}`);\n    return fullUrl;\n  } catch (error) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: error.message\n    });\n    console.error(`❌ Error loading icon for ${serviceName}:`, error);\n    return '/aws-icons/default.svg';\n  }\n};\n\n// Add method to get resolution stats\nconst getIconResolutionStats = () => {\n  const stats = {\n    total: iconResolutionLog.total,\n    success: iconResolutionLog.success.length,\n    failed: iconResolutionLog.failed.length,\n    successRate: `${(iconResolutionLog.success.length / iconResolutionLog.total * 100).toFixed(1)}%`,\n    failedServices: iconResolutionLog.failed.map(f => `${f.service} (${f.reason})`),\n    successServices: iconResolutionLog.success.map(s => s.service)\n  };\n  console.group('🎯 Icon Resolution Statistics');\n  console.log(`Total Services: ${stats.total}`);\n  console.log(`Success: ${stats.success} (${stats.successRate})`);\n  console.log(`Failed: ${stats.failed}`);\n  console.log('\\nSuccessfully resolved icons:');\n  stats.successServices.forEach(s => console.log(`✅ ${s}`));\n  console.log('\\nFailed to resolve icons:');\n  stats.failedServices.forEach(s => console.log(`❌ ${s}`));\n  console.groupEnd();\n  return stats;\n};\n\n// Modified cached version with logging\nconst iconCache = new Map();\nconst getCachedServiceIcon = async serviceName => {\n  if (iconCache.has(serviceName)) {\n    return iconCache.get(serviceName);\n  }\n  const iconUrl = await getServiceIcon(serviceName);\n  iconCache.set(serviceName, iconUrl);\n  return iconUrl;\n};\nexport { getServiceIcon, getCachedServiceIcon, getIconResolutionStats };","map":{"version":3,"names":["AWS_ICON_CATEGORIES","ANALYTICS","APP_INTEGRATION","ARTIFICIAL_INTELLIGENCE","COMPUTE","CONTAINERS","DATABASE","DEVELOPER_TOOLS","MANAGEMENT","NETWORKING","SECURITY","STORAGE","SERVICE_MAPPINGS","S3_BUCKET_URL","ICONS_BASE_PATH","iconResolutionLog","success","failed","total","getServiceIcon","serviceName","iconPath","push","service","reason","console","warn","fullUrl","response","fetch","method","ok","Error","status","path","log","error","message","getIconResolutionStats","stats","length","successRate","toFixed","failedServices","map","f","successServices","s","group","forEach","groupEnd","iconCache","Map","getCachedServiceIcon","has","get","iconUrl","set"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/IconResolver.js"],"sourcesContent":["const AWS_ICON_CATEGORIES = {\n  ANALYTICS: 'Arch_Analytics',\n  APP_INTEGRATION: 'Arch_App_Integration',\n  ARTIFICIAL_INTELLIGENCE: 'Arch_Artificial_Intelligence',\n  COMPUTE: 'Arch_Compute',\n  CONTAINERS: 'Arch_Containers',\n  DATABASE: 'Arch_Database',\n  DEVELOPER_TOOLS: 'Arch_Developer_Tools',\n  MANAGEMENT: 'Arch_Management_Governance',\n  NETWORKING: 'Arch_Networking_Content_Delivery',\n  SECURITY: 'Arch_Security_Identity_Compliance',\n  STORAGE: 'Arch_Storage'\n};\n\nconst SERVICE_MAPPINGS = {\n  // Compute Services\n  'AWS Lambda': `${AWS_ICON_CATEGORIES.COMPUTE}/Arch_AWS-Lambda_16.svg`,\n  'Amazon EC2': `${AWS_ICON_CATEGORIES.COMPUTE}/Arch_Amazon-EC2_16.svg`,\n  \n  // Storage Services\n  'Amazon S3': `${AWS_ICON_CATEGORIES.STORAGE}/Arch_Amazon-Simple-Storage-Service_16.svg`,\n  'Amazon EFS': `${AWS_ICON_CATEGORIES.STORAGE}/Arch_Amazon-EFS_16.svg`,\n  \n  // Database Services\n  'Amazon RDS': `${AWS_ICON_CATEGORIES.DATABASE}/Arch_Amazon-RDS_16.svg`,\n  'Amazon DynamoDB': `${AWS_ICON_CATEGORIES.DATABASE}/Arch_Amazon-DynamoDB_16.svg`,\n  \n  // Networking Services\n  'Amazon CloudFront': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Amazon-CloudFront_16.svg`,\n  'Amazon Route 53': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Amazon-Route-53_16.svg`,\n  'Elastic Load Balancing': `${AWS_ICON_CATEGORIES.NETWORKING}/Arch_Elastic-Load-Balancing_16.svg`,\n  \n  // Security Services\n  'AWS IAM': `${AWS_ICON_CATEGORIES.SECURITY}/Arch_AWS-Identity-and-Access-Management_16.svg`,\n  'AWS WAF': `${AWS_ICON_CATEGORIES.SECURITY}/Arch_AWS-WAF_16.svg`,\n  \n  // Management Services\n  'Amazon CloudWatch': `${AWS_ICON_CATEGORIES.MANAGEMENT}/Arch_Amazon-CloudWatch_16.svg`,\n  \n  // Container Services\n  'Amazon ECS': `${AWS_ICON_CATEGORIES.CONTAINERS}/Arch_Amazon-Elastic-Container-Service_16.svg`,\n  'Amazon EKS': `${AWS_ICON_CATEGORIES.CONTAINERS}/Arch_Amazon-Elastic-Kubernetes-Service_16.svg`\n};\n\nconst S3_BUCKET_URL = 'https://hackthon-backend-files-ep-2024.s3.amazonaws.com';\nconst ICONS_BASE_PATH = '/amazon-icons-set/Architecture-Service-Icons_06072024';\n\n// Add logging collection\nconst iconResolutionLog = {\n  success: [],\n  failed: [],\n  total: 0\n};\n\nconst getServiceIcon = async (serviceName) => {\n  iconResolutionLog.total++;\n  const iconPath = SERVICE_MAPPINGS[serviceName];\n  \n  if (!iconPath) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: 'No mapping found'\n    });\n    console.warn(`❌ No icon mapping found for service: ${serviceName}`);\n    return '/aws-icons/default.svg';\n  }\n\n  try {\n    const fullUrl = `${S3_BUCKET_URL}${ICONS_BASE_PATH}/${iconPath}`;\n    \n    // Check if the resource exists\n    const response = await fetch(fullUrl, { method: 'HEAD' });\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}`);\n    }\n\n    iconResolutionLog.success.push({\n      service: serviceName,\n      path: iconPath\n    });\n    console.log(`✅ Icon found for ${serviceName}: ${iconPath}`);\n    return fullUrl;\n  } catch (error) {\n    iconResolutionLog.failed.push({\n      service: serviceName,\n      reason: error.message\n    });\n    console.error(`❌ Error loading icon for ${serviceName}:`, error);\n    return '/aws-icons/default.svg';\n  }\n};\n\n// Add method to get resolution stats\nconst getIconResolutionStats = () => {\n  const stats = {\n    total: iconResolutionLog.total,\n    success: iconResolutionLog.success.length,\n    failed: iconResolutionLog.failed.length,\n    successRate: `${((iconResolutionLog.success.length / iconResolutionLog.total) * 100).toFixed(1)}%`,\n    failedServices: iconResolutionLog.failed.map(f => `${f.service} (${f.reason})`),\n    successServices: iconResolutionLog.success.map(s => s.service)\n  };\n\n  console.group('🎯 Icon Resolution Statistics');\n  console.log(`Total Services: ${stats.total}`);\n  console.log(`Success: ${stats.success} (${stats.successRate})`);\n  console.log(`Failed: ${stats.failed}`);\n  console.log('\\nSuccessfully resolved icons:');\n  stats.successServices.forEach(s => console.log(`✅ ${s}`));\n  console.log('\\nFailed to resolve icons:');\n  stats.failedServices.forEach(s => console.log(`❌ ${s}`));\n  console.groupEnd();\n\n  return stats;\n};\n\n// Modified cached version with logging\nconst iconCache = new Map();\n\nconst getCachedServiceIcon = async (serviceName) => {\n  if (iconCache.has(serviceName)) {\n    return iconCache.get(serviceName);\n  }\n\n  const iconUrl = await getServiceIcon(serviceName);\n  iconCache.set(serviceName, iconUrl);\n  return iconUrl;\n};\n\nexport { getServiceIcon, getCachedServiceIcon, getIconResolutionStats }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}