{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport '../styles/GameCanvas.css';\nimport { initializeGameState, formatTime, isGameComplete, getServiceIconUrl } from '../utils/memoryGameUtils';\nimport { soundManager } from '../services/SoundManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconsMemoryGame = () => {\n  _s();\n  // Game state\n  const [gameState, setGameState] = useState(() => initializeGameState());\n  const [timeLeft, setTimeLeft] = useState(120);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [userInteracted, setUserInteracted] = useState(false);\n  const [soundsLoaded, setSoundsLoaded] = useState(false);\n  const gameContainerRef = useRef(null);\n\n  // Preload sounds\n  useEffect(() => {\n    // Preload all sounds\n    const soundNames = Object.keys(soundManager.sounds);\n    let loadedCount = 0;\n\n    // Add load event listeners to track loading progress\n    soundNames.forEach(name => {\n      const sound = soundManager.sounds[name];\n\n      // Check if already loaded\n      if (sound.readyState >= 3) {\n        loadedCount++;\n        if (loadedCount === soundNames.length) {\n          setSoundsLoaded(true);\n        }\n      } else {\n        // Add event listener for when loaded\n        const loadHandler = () => {\n          loadedCount++;\n          if (loadedCount === soundNames.length) {\n            setSoundsLoaded(true);\n          }\n          sound.removeEventListener('canplaythrough', loadHandler);\n        };\n        sound.addEventListener('canplaythrough', loadHandler);\n      }\n\n      // Force loading by setting src again\n      const currentSrc = sound.src;\n      sound.src = currentSrc;\n    });\n  }, []);\n\n  // Initialize or reset the game\n  const initGame = useCallback(() => {\n    const newGameState = initializeGameState();\n    setGameState(newGameState);\n    setTimeLeft(120);\n    setGameStarted(true);\n    setGameOver(false);\n  }, []);\n\n  // Safe sound playing function\n  const playSound = soundName => {\n    if (!userInteracted || !soundsLoaded || !soundManager.enabled) return;\n    try {\n      const sound = soundManager.sounds[soundName];\n      sound.currentTime = 0;\n\n      // Create a user interaction event to help with autoplay restrictions\n      const playPromise = sound.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.log(`Failed to play sound ${soundName}:`, error);\n\n          // If we get a user interaction error, make note for next time\n          if (error.name === 'NotAllowedError') {\n            console.log('Sound blocked by browser. User interaction required.');\n          }\n        });\n      }\n    } catch (error) {\n      console.log(`Error playing sound ${soundName}:`, error);\n    }\n  };\n\n  // Handle card click\n  const handleCardClick = index => {\n    setUserInteracted(true);\n\n    // Don't allow clicks if the board is locked or the card is already flipped/matched\n    if (gameState.isLocked || gameState.flippedCards.length >= 2 || gameState.cards[index].isFlipped || gameState.cards[index].isMatched) {\n      return;\n    }\n\n    // Play select sound\n    playSound('select');\n\n    // Flip the card\n    setGameState(prevState => {\n      // Create a new cards array with the clicked card flipped\n      const updatedCards = prevState.cards.map((card, i) => i === index ? {\n        ...card,\n        isFlipped: true\n      } : card);\n\n      // Add the card to flippedCards\n      const updatedFlippedCards = [...prevState.flippedCards, prevState.cards[index]];\n\n      // Check if we now have 2 flipped cards\n      const shouldCheckMatch = updatedFlippedCards.length === 2;\n      return {\n        ...prevState,\n        cards: updatedCards,\n        flippedCards: updatedFlippedCards,\n        isLocked: shouldCheckMatch // Lock the board if we need to check for a match\n      };\n    });\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (gameState.flippedCards.length === 2) {\n      const [firstCard, secondCard] = gameState.flippedCards;\n\n      // Check if the cards match (same service)\n      const isMatch = firstCard.service === secondCard.service;\n      if (isMatch) {\n        // It's a match! Update the game state\n        setTimeout(() => {\n          // Play correct sound with a slight delay to ensure it's heard\n          playSound('correct');\n          setGameState(prevState => {\n            // Mark the matched cards\n            const updatedCards = prevState.cards.map(card => card.service === firstCard.service ? {\n              ...card,\n              isMatched: true\n            } : card);\n\n            // Add the service to matched pairs\n            const updatedMatchedPairs = [...prevState.matchedPairs, firstCard.service];\n\n            // Check if the game is complete\n            const complete = isGameComplete(updatedMatchedPairs, 12); // 12 pairs total\n\n            if (complete) {\n              // Play achievement sound when game is complete\n              setTimeout(() => playSound('achievement'), 500);\n              setGameOver(true);\n            }\n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              matchedPairs: updatedMatchedPairs,\n              isLocked: false\n            };\n          });\n        }, 300);\n      } else {\n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          // Play incorrect sound\n          playSound('incorrect');\n          setGameState(prevState => {\n            // Flip the cards back\n            const updatedCards = prevState.cards.map(card => card.index === firstCard.index || card.index === secondCard.index ? {\n              ...card,\n              isFlipped: false\n            } : card);\n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              isLocked: false\n            };\n          });\n        }, 1000); // Shorter delay before flipping back\n      }\n    }\n  }, [gameState.flippedCards]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n\n    for (let i = 0; i < totalCells; i++) {\n      if (i === 12) {\n        // Middle position (3rd row, 3rd column)\n        grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-reset\",\n          onClick: () => {\n            setUserInteracted(true);\n            playSound('select');\n            initGame();\n          },\n          children: \"Reset\"\n        }, \"reset\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this));\n      } else {\n        const cardIndex = i > 12 ? i - 1 : i; // Adjust index for cards after reset button\n        if (cardIndex < gameState.cards.length) {\n          const card = gameState.cards[cardIndex];\n          grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`,\n            onClick: () => handleCardClick(cardIndex),\n            onMouseEnter: () => {\n              if (userInteracted) playSound('hover');\n            },\n            children: card.isFlipped || card.isMatched ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"memory-card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: getServiceIconUrl(card.path),\n                alt: card.service,\n                onError: e => {\n                  e.target.onerror = null;\n                  e.target.src = `${process.env.PUBLIC_URL}/azure-icons/default.svg`;\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"memory-card-text\",\n                children: card.service\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this));\n        } else {\n          // Add empty cells to complete the grid if needed\n          grid.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"memory-game-card empty\"\n          }, `empty-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this));\n        }\n      }\n    }\n    return grid;\n  };\n\n  // Setup global click handler to enable sounds\n  useEffect(() => {\n    const enableAudio = () => {\n      setUserInteracted(true);\n      // Try to play a silent sound to unlock audio\n      const unlockAudio = () => {\n        const silentSound = new Audio(\"data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADQgD///////////////////////////////////////////8AAAA8TEFNRTMuMTAwAQAAAAAAAAAAABSAJAJAQgAAgAAAA0KR6iQdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\");\n        silentSound.play().catch(e => console.log('Silent sound play failed:', e));\n      };\n      unlockAudio();\n      document.removeEventListener('click', enableAudio);\n    };\n    document.addEventListener('click', enableAudio);\n    return () => document.removeEventListener('click', enableAudio);\n  }, []);\n\n  // Create direct access to audio elements to check if they exist\n  useEffect(() => {\n    if (userInteracted) {\n      console.log(\"Sound references:\", {\n        correct: soundManager.sounds.correct,\n        incorrect: soundManager.sounds.incorrect,\n        hover: soundManager.sounds.hover,\n        select: soundManager.sounds.select,\n        achievement: soundManager.sounds.achievement\n      });\n    }\n  }, [userInteracted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameCanvas-container\",\n    ref: gameContainerRef,\n    onClick: () => setUserInteracted(true),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"gameCanvas-game-title\",\n      children: \"Azure Icons Memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameCanvas-game-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameCanvas-canvas-wrapper\",\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-timer\",\n          children: [\"TIMER: \", formatTime(timeLeft)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"memory-game-grid\",\n          children: renderGrid()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameCanvas-game-over\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: gameState.matchedPairs.length === 12 ? 'Congratulations!' : 'Time\\'s Up!'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: gameState.matchedPairs.length === 12 ? `You found all matches with ${formatTime(timeLeft)} remaining!` : `You found ${gameState.matchedPairs.length} out of 12 matches.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setUserInteracted(true);\n              playSound('select');\n              initGame();\n            },\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s(IconsMemoryGame, \"gmT1YnNcutK7AC2Km5eT/sufd8k=\");\n_c = IconsMemoryGame;\nexport default IconsMemoryGame;\nvar _c;\n$RefreshReg$(_c, \"IconsMemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","initializeGameState","formatTime","isGameComplete","getServiceIconUrl","soundManager","jsxDEV","_jsxDEV","IconsMemoryGame","_s","gameState","setGameState","timeLeft","setTimeLeft","gameStarted","setGameStarted","gameOver","setGameOver","userInteracted","setUserInteracted","soundsLoaded","setSoundsLoaded","gameContainerRef","soundNames","Object","keys","sounds","loadedCount","forEach","name","sound","readyState","length","loadHandler","removeEventListener","addEventListener","currentSrc","src","initGame","newGameState","playSound","soundName","enabled","currentTime","playPromise","play","undefined","catch","error","console","log","handleCardClick","index","isLocked","flippedCards","cards","isFlipped","isMatched","prevState","updatedCards","map","card","i","updatedFlippedCards","shouldCheckMatch","firstCard","secondCard","isMatch","service","setTimeout","updatedMatchedPairs","matchedPairs","complete","timer","setInterval","prev","clearInterval","renderGrid","grid","totalCells","push","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","cardIndex","onMouseEnter","path","alt","onError","e","target","onerror","process","env","PUBLIC_URL","id","enableAudio","unlockAudio","silentSound","Audio","document","correct","incorrect","hover","select","achievement","ref","style","display","flexDirection","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /src/components/IconsMemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport '../styles/GameCanvas.css';\nimport { \n  initializeGameState, \n  formatTime, \n  isGameComplete,\n  getServiceIconUrl\n} from '../utils/memoryGameUtils';\nimport { soundManager } from '../services/SoundManager';\n\nconst IconsMemoryGame = () => {\n  // Game state\n  const [gameState, setGameState] = useState(() => initializeGameState());\n  const [timeLeft, setTimeLeft] = useState(120);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [userInteracted, setUserInteracted] = useState(false);\n  const [soundsLoaded, setSoundsLoaded] = useState(false);\n  const gameContainerRef = useRef(null);\n\n  // Preload sounds\n  useEffect(() => {\n    // Preload all sounds\n    const soundNames = Object.keys(soundManager.sounds);\n    let loadedCount = 0;\n    \n    // Add load event listeners to track loading progress\n    soundNames.forEach(name => {\n      const sound = soundManager.sounds[name];\n      \n      // Check if already loaded\n      if (sound.readyState >= 3) {\n        loadedCount++;\n        if (loadedCount === soundNames.length) {\n          setSoundsLoaded(true);\n        }\n      } else {\n        // Add event listener for when loaded\n        const loadHandler = () => {\n          loadedCount++;\n          if (loadedCount === soundNames.length) {\n            setSoundsLoaded(true);\n          }\n          sound.removeEventListener('canplaythrough', loadHandler);\n        };\n        \n        sound.addEventListener('canplaythrough', loadHandler);\n      }\n      \n      // Force loading by setting src again\n      const currentSrc = sound.src;\n      sound.src = currentSrc;\n    });\n  }, []);\n\n  // Initialize or reset the game\n  const initGame = useCallback(() => {\n    const newGameState = initializeGameState();\n    setGameState(newGameState);\n    setTimeLeft(120);\n    setGameStarted(true);\n    setGameOver(false);\n  }, []);\n\n  // Safe sound playing function\n  const playSound = (soundName) => {\n    if (!userInteracted || !soundsLoaded || !soundManager.enabled) return;\n    \n    try {\n      const sound = soundManager.sounds[soundName];\n      sound.currentTime = 0;\n      \n      // Create a user interaction event to help with autoplay restrictions\n      const playPromise = sound.play();\n      \n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.log(`Failed to play sound ${soundName}:`, error);\n          \n          // If we get a user interaction error, make note for next time\n          if (error.name === 'NotAllowedError') {\n            console.log('Sound blocked by browser. User interaction required.');\n          }\n        });\n      }\n    } catch (error) {\n      console.log(`Error playing sound ${soundName}:`, error);\n    }\n  };\n\n  // Handle card click\n  const handleCardClick = (index) => {\n    setUserInteracted(true);\n    \n    // Don't allow clicks if the board is locked or the card is already flipped/matched\n    if (\n      gameState.isLocked || \n      gameState.flippedCards.length >= 2 || \n      gameState.cards[index].isFlipped || \n      gameState.cards[index].isMatched\n    ) {\n      return;\n    }\n\n    // Play select sound\n    playSound('select');\n\n    // Flip the card\n    setGameState(prevState => {\n      // Create a new cards array with the clicked card flipped\n      const updatedCards = prevState.cards.map((card, i) => \n        i === index ? { ...card, isFlipped: true } : card\n      );\n      \n      // Add the card to flippedCards\n      const updatedFlippedCards = [...prevState.flippedCards, prevState.cards[index]];\n      \n      // Check if we now have 2 flipped cards\n      const shouldCheckMatch = updatedFlippedCards.length === 2;\n      \n      return {\n        ...prevState,\n        cards: updatedCards,\n        flippedCards: updatedFlippedCards,\n        isLocked: shouldCheckMatch // Lock the board if we need to check for a match\n      };\n    });\n  };\n\n  // Check for matches when two cards are flipped\n  useEffect(() => {\n    if (gameState.flippedCards.length === 2) {\n      const [firstCard, secondCard] = gameState.flippedCards;\n      \n      // Check if the cards match (same service)\n      const isMatch = firstCard.service === secondCard.service;\n      \n      if (isMatch) {\n        // It's a match! Update the game state\n        setTimeout(() => {\n          // Play correct sound with a slight delay to ensure it's heard\n          playSound('correct');\n          \n          setGameState(prevState => {\n            // Mark the matched cards\n            const updatedCards = prevState.cards.map(card => \n              card.service === firstCard.service ? { ...card, isMatched: true } : card\n            );\n            \n            // Add the service to matched pairs\n            const updatedMatchedPairs = [...prevState.matchedPairs, firstCard.service];\n            \n            // Check if the game is complete\n            const complete = isGameComplete(updatedMatchedPairs, 12); // 12 pairs total\n            \n            if (complete) {\n              // Play achievement sound when game is complete\n              setTimeout(() => playSound('achievement'), 500);\n              setGameOver(true);\n            }\n            \n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              matchedPairs: updatedMatchedPairs,\n              isLocked: false\n            };\n          });\n        }, 300);\n      } else {\n        // Not a match, flip the cards back after a delay\n        setTimeout(() => {\n          // Play incorrect sound\n          playSound('incorrect');\n          \n          setGameState(prevState => {\n            // Flip the cards back\n            const updatedCards = prevState.cards.map(card => \n              card.index === firstCard.index || card.index === secondCard.index\n                ? { ...card, isFlipped: false }\n                : card\n            );\n            \n            return {\n              ...prevState,\n              cards: updatedCards,\n              flippedCards: [],\n              isLocked: false\n            };\n          });\n        }, 1000); // Shorter delay before flipping back\n      }\n    }\n  }, [gameState.flippedCards]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n    \n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setGameOver(true);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, [gameStarted, gameOver]);\n\n  // Start the game when component mounts\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  // Create a 5x5 grid with cards and reset button\n  const renderGrid = () => {\n    const grid = [];\n    const totalCells = 25; // 5x5 grid\n    \n    for (let i = 0; i < totalCells; i++) {\n      if (i === 12) { // Middle position (3rd row, 3rd column)\n        grid.push(\n          <div \n            key=\"reset\" \n            className=\"memory-game-reset\"\n            onClick={() => {\n              setUserInteracted(true);\n              playSound('select');\n              initGame();\n            }}\n          >\n            Reset\n          </div>\n        );\n      } else {\n        const cardIndex = i > 12 ? i - 1 : i; // Adjust index for cards after reset button\n        if (cardIndex < gameState.cards.length) {\n          const card = gameState.cards[cardIndex];\n          grid.push(\n            <div\n              key={card.id}\n              className={`memory-game-card ${card.isFlipped || card.isMatched ? 'flipped' : ''}`}\n              onClick={() => handleCardClick(cardIndex)}\n              onMouseEnter={() => {\n                if (userInteracted) playSound('hover');\n              }}\n            >\n              {card.isFlipped || card.isMatched ? (\n                <div className=\"memory-card-content\">\n                  <img \n                    src={getServiceIconUrl(card.path)} \n                    alt={card.service} \n                    onError={(e) => {\n                      e.target.onerror = null;\n                      e.target.src = `${process.env.PUBLIC_URL}/azure-icons/default.svg`;\n                    }}\n                  />\n                  <div className=\"memory-card-text\">{card.service}</div>\n                </div>\n              ) : (\n                <span>?</span>\n              )}\n            </div>\n          );\n        } else {\n          // Add empty cells to complete the grid if needed\n          grid.push(\n            <div key={`empty-${i}`} className=\"memory-game-card empty\"></div>\n          );\n        }\n      }\n    }\n    \n    return grid;\n  };\n\n  // Setup global click handler to enable sounds\n  useEffect(() => {\n    const enableAudio = () => {\n      setUserInteracted(true);\n      // Try to play a silent sound to unlock audio\n      const unlockAudio = () => {\n        const silentSound = new Audio(\"data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAADQgD///////////////////////////////////////////8AAAA8TEFNRTMuMTAwAQAAAAAAAAAAABSAJAJAQgAAgAAAA0KR6iQdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\");\n        silentSound.play().catch(e => console.log('Silent sound play failed:', e));\n      };\n      \n      unlockAudio();\n      document.removeEventListener('click', enableAudio);\n    };\n    \n    document.addEventListener('click', enableAudio);\n    return () => document.removeEventListener('click', enableAudio);\n  }, []);\n\n  // Create direct access to audio elements to check if they exist\n  useEffect(() => {\n    if (userInteracted) {\n      console.log(\"Sound references:\", {\n        correct: soundManager.sounds.correct,\n        incorrect: soundManager.sounds.incorrect,\n        hover: soundManager.sounds.hover,\n        select: soundManager.sounds.select,\n        achievement: soundManager.sounds.achievement\n      });\n    }\n  }, [userInteracted]);\n\n  return (\n    <div \n      className=\"gameCanvas-container\" \n      ref={gameContainerRef}\n      onClick={() => setUserInteracted(true)}\n    >\n      <h1 className=\"gameCanvas-game-title\">Azure Icons Memory</h1>\n      \n      <div className=\"gameCanvas-game-content\">\n        <div className=\"gameCanvas-canvas-wrapper\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n          <div className=\"memory-game-timer\">TIMER: {formatTime(timeLeft)}</div>\n          \n          <div className=\"memory-game-grid\">\n            {renderGrid()}\n          </div>\n          \n          {gameOver && (\n            <div className=\"gameCanvas-game-over\">\n              <h3>\n                {gameState.matchedPairs.length === 12 ? 'Congratulations!' : 'Time\\'s Up!'}\n              </h3>\n              <p>\n                {gameState.matchedPairs.length === 12 \n                  ? `You found all matches with ${formatTime(timeLeft)} remaining!` \n                  : `You found ${gameState.matchedPairs.length} out of 12 matches.`}\n              </p>\n              <button \n                onClick={() => {\n                  setUserInteracted(true);\n                  playSound('select');\n                  initGame();\n                }}\n              >\n                Play Again\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IconsMemoryGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}