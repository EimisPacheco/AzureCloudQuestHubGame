{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst validWWWAuthenticateProperties = [\"authorization\", \"authorization_url\", \"resource\", \"scope\", \"tenantId\", \"claims\", \"error\"];\n/**\n * Parses an WWW-Authenticate response header.\n * This transforms a string value like:\n * `Bearer authorization=\"https://some.url/tenantId\", resource=\"https://some.url\"`\n * into an object like:\n * `{ authorization: \"https://some.url/tenantId\", resource: \"https://some.url\" }`\n * @param headerValue - String value in the WWW-Authenticate header\n */\nexport function parseWWWAuthenticateHeader(headerValue) {\n  const pairDelimiter = /,? +/;\n  const parsed = headerValue.split(pairDelimiter).reduce((kvPairs, p) => {\n    if (p.match(/\\w=\"/)) {\n      // 'sampleKey=\"sample_value\"' -> [sampleKey, \"sample_value\"] -> { sampleKey: sample_value }\n      const [key, ...value] = p.split(\"=\");\n      if (validWWWAuthenticateProperties.includes(key)) {\n        // The values will be wrapped in quotes, which need to be stripped out.\n        return Object.assign(Object.assign({}, kvPairs), {\n          [key]: value.join(\"=\").slice(1, -1)\n        });\n      }\n    }\n    return kvPairs;\n  }, {});\n  // Finally, we pull the tenantId from the authorization header to support multi-tenant authentication.\n  if (parsed.authorization) {\n    try {\n      const tenantId = new URL(parsed.authorization).pathname.substring(1);\n      if (tenantId) {\n        parsed.tenantId = tenantId;\n      }\n    } catch (_) {\n      throw new Error(`The challenge authorization URI '${parsed.authorization}' is invalid.`);\n    }\n  }\n  return parsed;\n}","map":{"version":3,"names":["validWWWAuthenticateProperties","parseWWWAuthenticateHeader","headerValue","pairDelimiter","parsed","split","reduce","kvPairs","p","match","key","value","includes","Object","assign","join","slice","authorization","tenantId","URL","pathname","substring","_","Error"],"sources":["/Users/eimis/test-server/Azure Hackthons/azure-cloud-architecture-game /node_modules/@azure/keyvault-common/src/parseWWWAuthenticate.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Parameters parsed out of the WWW-Authenticate header value by the parseWWWAuthenticate function.\n */\nexport interface WWWAuthenticate {\n  /**\n   * The authorization parameter, if present.\n   */\n  authorization?: string;\n\n  /**\n   * The authorization_url parameter, if present.\n   */\n  authorization_url?: string;\n\n  /**\n   * The resource parameter, if present.\n   */\n  resource?: string;\n\n  /**\n   * The scope parameter, if present.\n   */\n  scope?: string;\n\n  /**\n   * The tenantId parameter, if present.\n   */\n  tenantId?: string;\n\n  /**\n   * The claims parameter, if present.\n   */\n  claims?: string;\n\n  /**\n   * The error parameter, if present.\n   */\n  error?: string;\n}\n\nconst validWWWAuthenticateProperties: readonly (keyof WWWAuthenticate)[] = [\n  \"authorization\",\n  \"authorization_url\",\n  \"resource\",\n  \"scope\",\n  \"tenantId\",\n  \"claims\",\n  \"error\",\n] as const;\n\n/**\n * Parses an WWW-Authenticate response header.\n * This transforms a string value like:\n * `Bearer authorization=\"https://some.url/tenantId\", resource=\"https://some.url\"`\n * into an object like:\n * `{ authorization: \"https://some.url/tenantId\", resource: \"https://some.url\" }`\n * @param headerValue - String value in the WWW-Authenticate header\n */\nexport function parseWWWAuthenticateHeader(headerValue: string): WWWAuthenticate {\n  const pairDelimiter = /,? +/;\n  const parsed = headerValue.split(pairDelimiter).reduce<WWWAuthenticate>((kvPairs, p) => {\n    if (p.match(/\\w=\"/)) {\n      // 'sampleKey=\"sample_value\"' -> [sampleKey, \"sample_value\"] -> { sampleKey: sample_value }\n      const [key, ...value] = p.split(\"=\");\n      if (validWWWAuthenticateProperties.includes(key as keyof WWWAuthenticate)) {\n        // The values will be wrapped in quotes, which need to be stripped out.\n        return { ...kvPairs, [key]: value.join(\"=\").slice(1, -1) };\n      }\n    }\n    return kvPairs;\n  }, {});\n\n  // Finally, we pull the tenantId from the authorization header to support multi-tenant authentication.\n  if (parsed.authorization) {\n    try {\n      const tenantId = new URL(parsed.authorization).pathname.substring(1);\n      if (tenantId) {\n        parsed.tenantId = tenantId;\n      }\n    } catch (_) {\n      throw new Error(`The challenge authorization URI '${parsed.authorization}' is invalid.`);\n    }\n  }\n\n  return parsed;\n}\n"],"mappings":"AAAA;AACA;AA0CA,MAAMA,8BAA8B,GAAuC,CACzE,eAAe,EACf,mBAAmB,EACnB,UAAU,EACV,OAAO,EACP,UAAU,EACV,QAAQ,EACR,OAAO,CACC;AAEV;;;;;;;;AAQA,OAAM,SAAUC,0BAA0BA,CAACC,WAAmB;EAC5D,MAAMC,aAAa,GAAG,MAAM;EAC5B,MAAMC,MAAM,GAAGF,WAAW,CAACG,KAAK,CAACF,aAAa,CAAC,CAACG,MAAM,CAAkB,CAACC,OAAO,EAAEC,CAAC,KAAI;IACrF,IAAIA,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,EAAE;MACnB;MACA,MAAM,CAACC,GAAG,EAAE,GAAGC,KAAK,CAAC,GAAGH,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC;MACpC,IAAIL,8BAA8B,CAACY,QAAQ,CAACF,GAA4B,CAAC,EAAE;QACzE;QACA,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYP,OAAO;UAAE,CAACG,GAAG,GAAGC,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAAC;MAC1D;IACF;IACA,OAAOT,OAAO;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,IAAIH,MAAM,CAACa,aAAa,EAAE;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAACf,MAAM,CAACa,aAAa,CAAC,CAACG,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC;MACpE,IAAIH,QAAQ,EAAE;QACZd,MAAM,CAACc,QAAQ,GAAGA,QAAQ;MAC5B;IACF,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CAAC,oCAAoCnB,MAAM,CAACa,aAAa,eAAe,CAAC;IAC1F;EACF;EAEA,OAAOb,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}