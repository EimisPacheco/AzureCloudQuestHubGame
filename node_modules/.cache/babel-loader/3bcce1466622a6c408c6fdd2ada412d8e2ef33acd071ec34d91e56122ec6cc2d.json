{"ast":null,"code":"import _regeneratorRuntime from \"/Users/eimis/test-server/react_projects/cloud-architecture-game/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/eimis/test-server/react_projects/cloud-architecture-game/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar openai;\ntry {\n  var OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\nvar DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\nvar FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [{\n      id: 'vpc',\n      name: 'VPC',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n    }, {\n      id: 'ec2',\n      name: 'EC2',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n    }, {\n      id: 'rds',\n      name: 'RDS',\n      icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n    }],\n    connections: [{\n      from: 'vpc',\n      to: 'ec2'\n    }, {\n      from: 'ec2',\n      to: 'rds'\n    }]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [{\n    id: 'ec2',\n    name: 'EC2'\n  }, {\n    id: 'lambda',\n    name: 'Lambda'\n  }, {\n    id: 'ecs',\n    name: 'ECS'\n  }, {\n    id: 'fargate',\n    name: 'Fargate'\n  }]\n};\nvar generateArchitecture = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(difficulty) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            architecture: {\n              services: [{\n                id: 'lambda',\n                name: 'AWS Lambda',\n                icon: '/aws-icons/Arch_AWS-Lambda_48.svg'\n              }, {\n                id: 'ec2',\n                name: 'Amazon EC2',\n                icon: '/aws-icons/ec2.png'\n              }, {\n                id: 's3',\n                name: 'Amazon S3',\n                icon: '/aws-icons/s3.png'\n              }],\n              connections: [{\n                from: 'lambda',\n                to: 's3'\n              }, {\n                from: 'ec2',\n                to: 's3'\n              }]\n            },\n            question: {\n              text: 'Which compute service would you use for serverless architecture?',\n              missingServices: ['lambda']\n            },\n            options: [{\n              id: 'lambda',\n              name: 'AWS Lambda',\n              icon: '/aws-icons/Arch_AWS-Lambda_48.svg'\n            }, {\n              id: 'ec2',\n              name: 'Amazon EC2',\n              icon: '/aws-icons/ec2.png'\n            }, {\n              id: 'ecs',\n              name: 'Amazon ECS',\n              icon: '/aws-icons/ecs.png'\n            }, {\n              id: 'eks',\n              name: 'Amazon EKS',\n              icon: '/aws-icons/eks.png'\n            }]\n          });\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function generateArchitecture(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { generateArchitecture };\nexport var validateAnswer = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(architecture, selectedService, position) {\n    var completion, functionCall;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return openai.chat.completions.create({\n            model: \"gpt-4\",\n            messages: [{\n              role: \"system\",\n              content: \"You are validating AWS architecture design decisions.\"\n            }, {\n              role: \"user\",\n              content: \"Validate if \".concat(selectedService, \" is appropriate for position \").concat(position, \" in the given architecture.\\n          Architecture context: \").concat(JSON.stringify(architecture))\n            }],\n            functions: [{\n              name: \"validateArchitectureChoice\",\n              description: \"Validate the selected AWS service for the architecture\",\n              parameters: {\n                type: \"object\",\n                properties: {\n                  correct: {\n                    type: \"boolean\",\n                    description: \"Whether the service choice is correct\"\n                  },\n                  explanation: {\n                    type: \"string\",\n                    description: \"Detailed explanation of why the choice is correct or incorrect\"\n                  },\n                  bestPractices: {\n                    type: \"array\",\n                    items: {\n                      type: \"string\"\n                    },\n                    description: \"Relevant AWS best practices\"\n                  }\n                },\n                required: [\"correct\", \"explanation\"]\n              }\n            }],\n            function_call: {\n              name: \"validateArchitectureChoice\"\n            }\n          });\n        case 3:\n          completion = _context2.sent;\n          functionCall = completion.choices[0].message.function_call;\n          return _context2.abrupt(\"return\", JSON.parse(functionCall.arguments));\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error('Error validating answer:', _context2.t0);\n          return _context2.abrupt(\"return\", {\n            correct: selectedService === architecture.question.missingServices[0],\n            explanation: \"This is a fallback explanation for the selected service.\"\n          });\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n  return function validateAnswer(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["openai","OpenAI","require","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","error","console","warn","DIFFICULTY_LEVELS","BEGINNER","complexity","services","temperature","INTERMEDIATE","ADVANCED","FALLBACK_ARCHITECTURE","architecture","id","name","icon","connections","from","to","question","text","position","missingServices","options","generateArchitecture","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","difficulty","wrap","_callee$","_context","prev","next","abrupt","stop","_x","apply","arguments","validateAnswer","_ref2","_callee2","selectedService","completion","functionCall","_callee2$","_context2","chat","completions","create","model","messages","role","content","concat","JSON","stringify","functions","description","parameters","type","properties","correct","explanation","bestPractices","items","required","function_call","sent","choices","message","parse","t0","_x2","_x3","_x4"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/AWSArchitectureAI.js"],"sourcesContent":["let openai;\ntry {\n  const OpenAI = require('openai');\n  openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n} catch (error) {\n  console.warn('OpenAI module not loaded:', error);\n  openai = null;\n}\n\nconst DIFFICULTY_LEVELS = {\n  BEGINNER: {\n    complexity: \"simple\",\n    services: \"basic AWS services\",\n    temperature: 0.7\n  },\n  INTERMEDIATE: {\n    complexity: \"moderate\",\n    services: \"intermediate AWS services\",\n    temperature: 0.8\n  },\n  ADVANCED: {\n    complexity: \"complex\",\n    services: \"advanced AWS services\",\n    temperature: 0.9\n  }\n};\n\nconst FALLBACK_ARCHITECTURE = {\n  architecture: {\n    services: [\n      {\n        id: 'vpc',\n        name: 'VPC',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Networking-Content-Delivery/48/Arch_Amazon-Virtual-Private-Cloud_48.svg'\n      },\n      {\n        id: 'ec2',\n        name: 'EC2',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Compute/48/Arch_Amazon-EC2_48.svg'\n      },\n      {\n        id: 'rds',\n        name: 'RDS',\n        icon: 'https://raw.githubusercontent.com/awsicons/SVGs/master/Architecture-Service-Icons/Arch_Database/48/Arch_Amazon-RDS_48.svg'\n      }\n    ],\n    connections: [\n      { from: 'vpc', to: 'ec2' },\n      { from: 'ec2', to: 'rds' }\n    ]\n  },\n  question: {\n    text: \"Which compute service would you use for this web application?\",\n    position: 'compute-layer',\n    missingServices: ['ec2']\n  },\n  options: [\n    { id: 'ec2', name: 'EC2' },\n    { id: 'lambda', name: 'Lambda' },\n    { id: 'ecs', name: 'ECS' },\n    { id: 'fargate', name: 'Fargate' }\n  ]\n};\n\nconst generateArchitecture = async (difficulty) => {\n  return {\n    architecture: {\n      services: [\n        { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/Arch_AWS-Lambda_48.svg' },\n        { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n        { id: 's3', name: 'Amazon S3', icon: '/aws-icons/s3.png' }\n      ],\n      connections: [\n        { from: 'lambda', to: 's3' },\n        { from: 'ec2', to: 's3' }\n      ]\n    },\n    question: {\n      text: 'Which compute service would you use for serverless architecture?',\n      missingServices: ['lambda']\n    },\n    options: [\n      { id: 'lambda', name: 'AWS Lambda', icon: '/aws-icons/Arch_AWS-Lambda_48.svg' },\n      { id: 'ec2', name: 'Amazon EC2', icon: '/aws-icons/ec2.png' },\n      { id: 'ecs', name: 'Amazon ECS', icon: '/aws-icons/ecs.png' },\n      { id: 'eks', name: 'Amazon EKS', icon: '/aws-icons/eks.png' }\n    ]\n  };\n};\n\nexport { generateArchitecture };\n\nexport const validateAnswer = async (architecture, selectedService, position) => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are validating AWS architecture design decisions.\"\n        },\n        {\n          role: \"user\",\n          content: `Validate if ${selectedService} is appropriate for position ${position} in the given architecture.\n          Architecture context: ${JSON.stringify(architecture)}`\n        }\n      ],\n      functions: [{\n        name: \"validateArchitectureChoice\",\n        description: \"Validate the selected AWS service for the architecture\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            correct: {\n              type: \"boolean\",\n              description: \"Whether the service choice is correct\"\n            },\n            explanation: {\n              type: \"string\",\n              description: \"Detailed explanation of why the choice is correct or incorrect\"\n            },\n            bestPractices: {\n              type: \"array\",\n              items: { type: \"string\" },\n              description: \"Relevant AWS best practices\"\n            }\n          },\n          required: [\"correct\", \"explanation\"]\n        }\n      }],\n      function_call: { name: \"validateArchitectureChoice\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    return {\n      correct: selectedService === architecture.question.missingServices[0],\n      explanation: \"This is a fallback explanation for the selected service.\"\n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}