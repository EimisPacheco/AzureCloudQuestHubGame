{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/GamePresenter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport AWSArchitectureDisplay from \"./AWSArchitectureDisplay\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePresenter = () => {\n  _s();\n  const [currentArchitecture, setCurrentArchitecture] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [score, setScore] = useState(0);\n\n  // Fetch initial architecture and questions from your AI service\n  useEffect(() => {\n    fetchNextArchitecture();\n  }, []);\n  const fetchNextArchitecture = async () => {\n    // This would be your AI service call\n    const response = await fetch('/api/architecture/next');\n    const data = await response.json();\n    setCurrentArchitecture(data.architecture);\n    setCurrentQuestion(data.question);\n    setOptions(data.options);\n  };\n  const handleServiceSelection = async selectedService => {\n    setTriggerEffect(prev => prev + 1);\n\n    // Validate answer with AI service\n    const response = await fetch('/api/validate-answer', {\n      method: 'POST',\n      body: JSON.stringify({\n        architecture: currentArchitecture,\n        selectedService,\n        position: currentQuestion.position\n      })\n    });\n    const result = await response.json();\n    if (result.correct) {\n      setScore(prev => prev + 1);\n    }\n\n    // Wait for animation\n    setTimeout(() => {\n      fetchNextArchitecture();\n    }, 750);\n  };\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"game-presenter\",\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    transition: {\n      duration: 0.5\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AWS Architecture Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score-display\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AWSArchitectureDisplay, {\n      architecture: currentArchitecture,\n      missingServices: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.missingServices) || [],\n      onServiceClick: handleServiceSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n        question: option.name,\n        triggerEffect: triggerEffect,\n        onClick: () => handleServiceSelection(option.id)\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePresenter, \"SxIqXt7aGnW1C4HvGafozsTYygk=\");\n_c = GamePresenter;\nexport default GamePresenter;\nvar _c;\n$RefreshReg$(_c, \"GamePresenter\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","AWSArchitectureDisplay","motion","jsxDEV","_jsxDEV","GamePresenter","_s","currentArchitecture","setCurrentArchitecture","currentQuestion","setCurrentQuestion","options","setOptions","triggerEffect","setTriggerEffect","score","setScore","fetchNextArchitecture","response","fetch","data","json","architecture","question","handleServiceSelection","selectedService","prev","method","body","JSON","stringify","position","result","correct","setTimeout","div","className","initial","opacity","animate","transition","duration","children","fileName","_jsxFileName","lineNumber","columnNumber","missingServices","onServiceClick","map","option","index","name","onClick","id","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/GamePresenter.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport AWSArchitectureDisplay from \"./AWSArchitectureDisplay\";\nimport { motion } from \"framer-motion\";\n\nconst GamePresenter = () => {\n  const [currentArchitecture, setCurrentArchitecture] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [score, setScore] = useState(0);\n\n  // Fetch initial architecture and questions from your AI service\n  useEffect(() => {\n    fetchNextArchitecture();\n  }, []);\n\n  const fetchNextArchitecture = async () => {\n    // This would be your AI service call\n    const response = await fetch('/api/architecture/next');\n    const data = await response.json();\n    setCurrentArchitecture(data.architecture);\n    setCurrentQuestion(data.question);\n    setOptions(data.options);\n  };\n\n  const handleServiceSelection = async (selectedService) => {\n    setTriggerEffect(prev => prev + 1);\n    \n    // Validate answer with AI service\n    const response = await fetch('/api/validate-answer', {\n      method: 'POST',\n      body: JSON.stringify({\n        architecture: currentArchitecture,\n        selectedService,\n        position: currentQuestion.position\n      })\n    });\n    \n    const result = await response.json();\n    \n    if (result.correct) {\n      setScore(prev => prev + 1);\n    }\n\n    // Wait for animation\n    setTimeout(() => {\n      fetchNextArchitecture();\n    }, 750);\n  };\n\n  return (\n    <motion.div \n      className=\"game-presenter\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      <h1>AWS Architecture Challenge</h1>\n      \n      <div className=\"score-display\">\n        Score: {score}\n      </div>\n\n      <AWSArchitectureDisplay \n        architecture={currentArchitecture}\n        missingServices={currentQuestion?.missingServices || []}\n        onServiceClick={handleServiceSelection}\n      />\n\n      <div className=\"options-container\">\n        {options.map((option, index) => (\n          <MagicalQuestionCard \n            key={option.id}\n            question={option.name}\n            triggerEffect={triggerEffect}\n            onClick={() => handleServiceSelection(option.id)}\n          />\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default GamePresenter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}